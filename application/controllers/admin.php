<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Admin extends CI_Controller {

	public function __construct(){
		parent::__construct();	

		//$this->module->is_log_in();
		
	}


	public function index()
	{
		$data['title']			= "Dashboard";
		$sy_id 					= $this->module->get_selected_sy();
		$data['dashboard']  	= $this->module->get_query("SELECT se_status, se_stud_type, sa_is_scholar, lvl_id, stud_gender,  COUNT(*) AS cnt FROM v_student_payment WHERE sy_id = ".$sy_id." AND se_status = 'Enrolled'  GROUP BY se_status, se_stud_type, sa_is_scholar, lvl_id");
		$data['today'] 			= $this->module->get_query("SELECT DATE(se_date_enrolled) AS se_date_enrolled, COUNT(*) AS cnt FROM v_student_payment WHERE DATE(se_date_enrolled) = DATE(NOW()) AND  sy_id = ".$sy_id." AND se_status = 'Enrolled' GROUP BY DATE(se_date_enrolled)");
		$data['gender_count'] 	= $this->module->get_query("SELECT lvl_name, lvl_id, stud_gender, COUNT(*) as cntt FROM v_student_payment WHERE sy_id = ".$sy_id." AND se_status = 'Enrolled' GROUP BY stud_gender, lvl_name"); 
		$data['gender']			= $this->module->get_query("SELECT stud_gender, COUNT(*) AS cnt FROM v_student_payment WHERE sy_id = ".$sy_id." AND se_status = 'Enrolled' GROUP BY stud_gender");
		$data['catholic']		= $this->module->get_query("SELECT stud_religion, COUNT(*) AS cnt FROM v_student_payment WHERE sy_id = ".$sy_id." AND  stud_religion LIKE '%catholic' AND se_status = 'Enrolled' ");
		$data['non_catholic']	= $this->module->get_query("SELECT stud_religion, COUNT(*) AS cnt FROM v_student_payment WHERE sy_id = ".$sy_id." AND stud_religion NOT LIKE '%catholic' AND se_status = 'Enrolled' ");
		$data['es_level']		= $this->module->get_query("SELECT lvl_id, COUNT(*) AS cnt FROM v_student_payment WHERE sy_id = ".$sy_id." AND se_status = 'Enrolled' GROUP BY lvl_id ");
		$data['handedness']		= $this->module->get_query("SELECT stud_handedness, COUNT(*) AS cnt FROM v_student_payment WHERE sy_id = ".$sy_id." AND se_status = 'Enrolled' GROUP BY stud_handedness");

		$data['level']			= $this->module->get_query("SELECT * FROM grade_level ORDER BY lvl_sort ");
		$data['gender_department'] = $this->module->get_query("SELECT stud_gender, dept_name, COUNT(*) AS cnt FROM v_student_payment WHERE sy_id = ".$sy_id." AND se_status = 'Enrolled' GROUP BY stud_gender, dept_id");

		$data['collection']		= $this->module->get_query("SELECT DATE(tf_payment_date) as tf_payment_date, SUM(tf_sub_total) as tf_amount_paid FROM v_student_payment_record_tf WHERE sy_id =".$sy_id." GROUP BY DATE(tf_payment_date) ORDER BY DATE(tf_payment_date) DESC ");
		//$data['reservation']  	= $this->module->get_query("SELECT * FROM v_student_class_list WHERE cl_date_reserved = '".$payment_date."' ORDER BY cl_date_reserved, stud_lastname, stud_firstname ASC");

		//echo $this->db->last_query();

		//$data['collection']	= $this->module->get_query("SELECT * FROM v_student_tf_payment WHERE DATE(tf_payment_date) = DATE(NOW()) AND se_status = 'Enrolled' GROUP BY stud_id ORDER BY se_date_enrolled ASC");

		//echo $this->db->last_query();



		//$data['enrollee']	= $this->module->get_query("SELECT stud_reg_date, COUNT(*) as cnt FROM v_student_section WHERE sy_id =".$sy_id." GROUP BY stud_reg_date ORDER BY stud_reg_date DESC ");
		//$data['collection']	= $this->module->get_query("SELECT DATE(as_date) AS as_date, SUM(as_total) AS collection FROM v_student_assessment WHERE sy_id =".$sy_id." GROUP BY DATE(as_date) ORDER BY DATE(as_date) DESC ");
		//$data['due_account']= $this->module->get_query("SELECT inst_det_date, SUM(inst_det_payment +  inst_det_partial) AS sum_total FROM installment_details GROUP BY inst_det_date ORDER BY inst_det_date DESC");

		//$data['section']	= $this->module->get_query("SELECT * FROM section WHERE sy_id =".$sy_id." ORDER BY sec_sort ASC");
		//$data['level']		= $this->module->get_query("SELECT lvl_name, COUNT(*) AS cnt FROM v_student_section WHERE sy_id =".$sy_id."  GROUP BY lvl_name ORDER BY lvl_sort ASC");
		//$data['new_student']= $this->module->get_query("SELECT lvl_name, COUNT(*) as cnt FROM v_student_section WHERE sy_id =".$sy_id." AND stud_type = 'New Student' GROUP BY lvl_id ORDER BY lvl_sort ASC");
		//$data['new_student_dept']= $this->module->get_query("SELECT dept_name, COUNT(*) as cnt FROM v_student_section WHERE sy_id =".$sy_id." AND stud_type = 'New Student' GROUP BY dept_id");
		$this->load->view('dashboard_new', $data);
	}

	public function assessment()
	{
		$data['title']		= "Assessment";
		$sy_id 				= $this->module->get_active_sy();
		$data['student']   	= $this->module->get_query('SELECT * FROM v_student_assessment WHERE `as_stat` = "PENDING" AND sy_id = '.$sy_id.'  ORDER BY stud_queue ASC'); /*AND ass.`as_stat` = "PENDING"  WHERE `as_stat` = "PENDING"  ORDER BY stud_queue ASC */
		$this->load->view('assessment/for_assessment', $data);
	}

	public function assessments()
	{
		$data['title']		= "Assessment";
		$data['student']   	= $this->module->get_query('SELECT * FROM v_student_assessment  '); /*AND ass.`as_stat` = "PENDING"  WHERE `as_stat` = "PENDING"  ORDER BY stud_queue ASC */
		$this->load->view('assessment/for_assessment', $data);
	}

	public function re_assessment()
	{
		$data['title']		= "Re-Assessment";
		$sy_id 				= $this->module->get_active_sy();
		$data['student']   	= $this->module->get_query('SELECT * FROM v_student_assessment WHERE sy_id = '.$sy_id.' ORDER BY as_date DESC '); /*AND ass.`as_stat` = "PENDING"  WHERE `as_stat` = "PENDING"  ORDER BY stud_queue ASC */
		$this->load->view('assessment/re_assessment', $data);
	}

	public function fee_schedule(){
		if(!$this->input->is_ajax_request())
			{
				$fhdr_fee_id = $this->uri->segment(3);
				$data['title']		= "Fee Schedule";
				$data['department'] = $this->module->get_table('department');
				$data['fee_hdr'] 	= $this->module->get_table('fee_hdr');
				$data['fee_sched'] 	= $this->module->table_where('fee_sched', array('fhdr_fee_id' => $fhdr_fee_id));
				$this->load->view('configuration/fee_schedule', $data);
			}
		else{

			}
	}

	public function fee_header(){
		$fhdr_fee_name 		= $this->input->post('fhdr_fee_name', true);
		$fhdr_fee_is_active = $this->input->post('fhdr_fee_is_active', true);

		$data = array(
			'fhdr_fee_name' 		=> $fhdr_fee_name,
			'fhdr_fee_is_active' 	=> $fhdr_fee_is_active
		);

		$this->module->public_insert('fee_hdr', $data);

	}

	public function change_fee_active()
	{
		$fhdr_fee_id = $this->uri->segment(3);
		$this->module->get_query("UPDATE fee_hdr set fhdr_fee_is_active = 'N'");
		
		if($this->module->update('fee_hdr', array('fhdr_fee_is_active' => 'Y') , array('fhdr_fee_id' => $fhdr_fee_id) )){
			return true;
		}
	}

	public function view_fee_schedule(){
		
		if(!$this->input->is_ajax_request())
			{
				$fhdr_fee_id 		= $this->uri->segment(3);
				$data['title']		= "Fee Schedule";
				$data['department'] = $this->module->get_table('department');
				$data['fee_sched'] 	= $this->module->table_where('fee_sched', array('fhdr_fee_id' => $fhdr_fee_id));
				$this->load->view('configuration/view_fee_schedule', $data);
			}
		else{
			$this->form_validation->set_rules('fee_type', 'Fee Type', 'trim|required');
			$this->form_validation->set_rules('dept_id', 'Department', 'trim|required');
			$this->form_validation->set_rules('fee_tf', 'Tuition Fee', 'trim|required');
			$this->form_validation->set_rules('fee_other_schl_fee', 'Other School Fee', 'trim|required');

			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {

                	$fhdr_fee_id 		= $this->input->post('fhdr_fee_id', true);
                	$dept_id 			= $this->input->post('dept_id', true);
                	$fee_type 			= $this->input->post('fee_type', true);

                	$fee_tf 			= floatval($this->input->post('fee_tf', true));
                	$fee_other_schl_fee = floatval($this->input->post('fee_other_schl_fee', true));

                	$fee_installment 	= floatval($this->input->post('fee_installment', true));

                	$fee_amnt_to_pay 	= floatval($fee_tf) + floatval($fee_other_schl_fee);


                	switch ($fee_type) {
						    case "Semestral":
						       	$data = array( 
						       		'fhdr_fee_id' 		 => $fhdr_fee_id,
		                			'dept_id' 			 => $dept_id,
									'fee_type' 			 => $fee_type,
									'fee_tf' 			 => $fee_tf,
									'fee_other_schl_fee' => $fee_other_schl_fee,
									'fee_amnt_to_pay'	 => $fee_amnt_to_pay,
									'fee_july'			 => 0,
									'fee_aug'			 => 0,
									'fee_sept'			 => 0,
									'fee_oct'			 => $fee_installment,
									'fee_nov'			 => 0,
									'fee_dec'			 => 0,
									'fee_jan'			 => 0,
									'fee_feb'			 => 0
								);

						        break;
						    case "Quarterly":

						    	$data = array( 
						    		'fhdr_fee_id' 		 => $fhdr_fee_id,
		                			'dept_id' 			 => $dept_id,
									'fee_type' 			 => $fee_type,
									'fee_tf' 			 => $fee_tf,
									'fee_other_schl_fee' => $fee_other_schl_fee,
									'fee_amnt_to_pay'	 => $fee_amnt_to_pay,
									'fee_july'			 => 0,
									'fee_aug'			 => $fee_installment,
									'fee_sept'			 => 0,
									'fee_oct'			 => $fee_installment,
									'fee_nov'			 => 0,
									'fee_dec'			 => 0,
									'fee_jan'			 => $fee_installment,
									'fee_feb'			 => 0
								);
						       
						        break;
						    case "Monthly":

						    	$data = array( 
						    		'fhdr_fee_id' 		 => $fhdr_fee_id,
		                			'dept_id' 			 => $dept_id,
									'fee_type' 			 => $fee_type,
									'fee_tf' 			 => $fee_tf,
									'fee_other_schl_fee' => $fee_other_schl_fee,
									'fee_amnt_to_pay'	 => $fee_amnt_to_pay,
									'fee_july'			 => $fee_installment,
									'fee_aug'			 => $fee_installment,
									'fee_sept'			 => $fee_installment,
									'fee_oct'			 => $fee_installment,
									'fee_nov'			 => $fee_installment,
									'fee_dec'			 => $fee_installment,
									'fee_jan'			 => $fee_installment,
									'fee_feb'			 => $fee_installment
								);
						        
						        break;

						    default: // for cash payment
						    	$data = array( 
						    		'fhdr_fee_id' 		 => $fhdr_fee_id,
		                			'dept_id' 			 => $dept_id,
									'fee_type' 			 => $fee_type,
									'fee_tf' 			 => $fee_tf,
									'fee_other_schl_fee' => $fee_other_schl_fee,
									'fee_amnt_to_pay'	 => $fee_amnt_to_pay,
									'fee_july'			 => 0,
									'fee_aug'			 => 0,
									'fee_sept'			 => 0,
									'fee_oct'			 => 0,
									'fee_nov'			 => 0,
									'fee_dec'			 => 0,
									'fee_jan'			 => 0,
									'fee_feb'			 => 0
								);
						} 


						$this->module->public_insert('fee_sched', $data);

                }
		}


	}

	/*public function fee_schedule()
	{
		if(!$this->input->is_ajax_request())
			{
				$data['title']		= "Fee Schedule";
				$data['department'] = $this->module->get_table('department');
				$data['fee_sched'] 	= $this->module->get_table('fee_sched');
				$this->load->view('assessment/fee_schedule', $data);
			}
		else{
			$this->form_validation->set_rules('fee_type', 'Fee Type', 'trim|required');
			$this->form_validation->set_rules('dept_id', 'Department', 'trim|required');
			$this->form_validation->set_rules('fee_tf', 'Tuition Fee', 'trim|required');
			$this->form_validation->set_rules('fee_other_schl_fee', 'Other School Fee', 'trim|required');

			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {

                	$dept_id 			= $this->input->post('dept_id', true);
                	$fee_type 			= $this->input->post('fee_type', true);

                	$fee_tf 			= floatval($this->input->post('fee_tf', true));
                	$fee_other_schl_fee = floatval($this->input->post('fee_other_schl_fee', true));

                	$fee_installment 	= floatval($this->input->post('fee_installment', true));

                	$fee_amnt_to_pay 	= floatval($fee_tf) + floatval($fee_other_schl_fee);


                	switch ($fee_type) {
						    case "Semestral":
						       	$data = array( 
		                			'dept_id' 			 => $dept_id,
									'fee_type' 			 => $fee_type,
									'fee_tf' 			 => $fee_tf,
									'fee_other_schl_fee' => $fee_other_schl_fee,
									'fee_amnt_to_pay'	 => $fee_amnt_to_pay,
									'fee_july'			 => 0,
									'fee_aug'			 => 0,
									'fee_sept'			 => 0,
									'fee_oct'			 => $fee_installment,
									'fee_nov'			 => 0,
									'fee_dec'			 => 0,
									'fee_jan'			 => 0,
									'fee_feb'			 => 0
								);

						        break;
						    case "Quarterly":

						    	$data = array( 
		                			'dept_id' 			 => $dept_id,
									'fee_type' 			 => $fee_type,
									'fee_tf' 			 => $fee_tf,
									'fee_other_schl_fee' => $fee_other_schl_fee,
									'fee_amnt_to_pay'	 => $fee_amnt_to_pay,
									'fee_july'			 => 0,
									'fee_aug'			 => $fee_installment,
									'fee_sept'			 => 0,
									'fee_oct'			 => $fee_installment,
									'fee_nov'			 => 0,
									'fee_dec'			 => 0,
									'fee_jan'			 => $fee_installment,
									'fee_feb'			 => 0
								);
						       
						        break;
						    case "Monthly":

						    	$data = array( 
		                			'dept_id' 			 => $dept_id,
									'fee_type' 			 => $fee_type,
									'fee_tf' 			 => $fee_tf,
									'fee_other_schl_fee' => $fee_other_schl_fee,
									'fee_amnt_to_pay'	 => $fee_amnt_to_pay,
									'fee_july'			 => $fee_installment,
									'fee_aug'			 => $fee_installment,
									'fee_sept'			 => $fee_installment,
									'fee_oct'			 => $fee_installment,
									'fee_nov'			 => $fee_installment,
									'fee_dec'			 => $fee_installment,
									'fee_jan'			 => $fee_installment,
									'fee_feb'			 => $fee_installment
								);
						        
						        break;

						    default: // for cash payment
						    	$data = array( 
		                			'dept_id' 			 => $dept_id,
									'fee_type' 			 => $fee_type,
									'fee_tf' 			 => $fee_tf,
									'fee_other_schl_fee' => $fee_other_schl_fee,
									'fee_amnt_to_pay'	 => $fee_amnt_to_pay,
									'fee_july'			 => 0,
									'fee_aug'			 => 0,
									'fee_sept'			 => 0,
									'fee_oct'			 => 0,
									'fee_nov'			 => 0,
									'fee_dec'			 => 0,
									'fee_jan'			 => 0,
									'fee_feb'			 => 0
								);
						} 


						$this->module->public_insert('fee_sched', $data);

                }
		}

	}*/

	public function delete_fee_schedule()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('fee_sched', array('fee_id' => $id)))
		{
			return true;
		}
		
	}


	public function department()
	{
		if(!$this->input->is_ajax_request())
			{
				$data['title']		= "Department";
				$data['department'] = $this->module->get_table('department');
				$this->load->view('configuration/department', $data);
			}
		else
		{
			$this->form_validation->set_rules('dept_name', 'Department Name', 'trim|required|is_unique[department.dept_name]');
			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {
                	$data = array('dept_name' => $this->input->post('dept_name', true));
                	$this->module->public_insert('department', $data);
                }

		}
	}

	public function delete_department()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('department', array('dept_id' => $id)))
		{
			return true;
		}
		
	}


	public function school_year()
	{
		if(!$this->input->is_ajax_request())
			{
				$data['title']		= "School Year";
				$data['sy'] = $this->module->get_table('school_year');
				$this->load->view('configuration/school_year', $data);
			}
		else
		{
			$this->form_validation->set_rules('sy_name', 'School Year', 'trim|required|is_unique[school_year.sy_name]');
			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {
                	$sy 	= $this->input->post('sy_name', true);

                	if($sy == 'Y'){
                		$this->module->get_query("UPDATE school_year SET sy_is_active = 'N' ");
                		$data 	= array('sy_name' => $sy, 'sy_is_active' => $this->input->post('sy_is_active', true));
                		$this->module->public_insert('school_year', $data);
                	}else{
                		$data 	= array('sy_name' => $sy);
                		$this->module->public_insert('school_year', $data);
                	}
                	//$data 	= array('sy_name' => $sy, 'sy_is_active' => $this->input->post('sy_is_active', true));
                	//$this->module->public_insert('school_year', $data);
                }

		}
	}

	public function delete_sy()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('school_year', array('sy_id' => $id)))
		{
			return true;
		}
		
	}

	public function change_sy_active()
	{
		$sy_id = $this->uri->segment(3);
		$this->module->get_query("UPDATE school_year set sy_is_active = 'N'");
		
		if($this->module->update('school_year', array('sy_is_active' => 'Y') , array('sy_id' => $sy_id) )){
			return true;
		}

		/*if($this->module->delete('school_year', array('sy_id' => $id)))
		{
			return true;
		}*/


		
	}


	public function grade_level()
	{
		if(!$this->input->is_ajax_request())
			{
				$data['title']		= "Grade Level";
				$data['level'] 		= $this->module->get_query("SELECT dp.`dept_name`, lvl.* FROM department AS dp, grade_level AS lvl WHERE dp.`dept_id` = lvl.`dept_id` ORDER BY lvl.`lvl_sort`");
				$data['department'] = $this->module->get_table('department');
				$this->load->view('configuration/grade_level', $data);
			}
		else
		{
			$this->form_validation->set_rules('lvl_name', 'Grade Level', 'trim|required|is_unique[grade_level.lvl_name]');
			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {
                	$data = array('lvl_name' => $this->input->post('lvl_name', true), 'dept_id' => $this->input->post('dept_id', true), 'lvl_sort' => $this->input->post('lvl_sort', true));
                	$this->module->public_insert('grade_level', $data);
                }

		}
	}

	public function delete_grade_level()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('grade_level', array('lvl_id' => $id)))
		{
			return true;
		}
		
	}

	public function assessment_detail(){
		$stud_id 			= $this->uri->segment(3);

		$sy_id 				= $this->module->get_active_sy();
		$detail 			= $this->module->get_query('SELECT * FROM v_student_assessment WHERE `stud_id` = '.$stud_id.' AND sy_id ='.$sy_id.' ');

		$data['title']		= "Assessment Detail";
		$data['level'] 		= $this->module->get_table('grade_level');
		$data['detail']   	= $detail;
		$data['assessment']	= $this->module->get_query('SELECT * from v_student_assessment WHERE stud_id = '.$stud_id.' AND sy_id ='.$sy_id.' ');
		$data['sy']			= $sy_id;
		$data['section']	= $this->module->get_query("SELECT * FROM section WHERE lvl_id = ".$detail->row('lvl_id')." ");
		$data['section_assignment'] = $this->module->get_query("SELECT * FROM section_assignment WHERE stud_id = ".$stud_id." ");

		$this->load->view('assessment/assessment_detail', $data);
	}

	public function compute_assessment(){
		$stud_id 			= $this->input->post('stud_id', true);
		$stud_name 			= $this->input->post('stud_name', true);
		$stud_queue 		= $this->input->post('stud_queue', true);
		$lvl_id 			= $this->input->post('lvl_id', true);
		$sec_id 			= $this->input->post('sec_id', true);
		$sy_id 				= $this->input->post('sy_id', true);
		$as_mode 			= $this->input->post('as_mode', true);
		$as_sib_discount 	= $this->input->post('as_sib_discount', true);
		$stud_type			= $this->input->post('stud_type', true);
		$as_is_reserve		= $this->input->post('as_is_reserve', true);
		$as_book 			= floatval($this->input->post('as_book', true));
		$as_notebook 		= floatval($this->input->post('as_notebook', true));
		$as_uniform			= floatval($this->input->post('as_uniform', true));
		$as_others			= floatval($this->input->post('as_others', true)); 	// PE Shoes
		$get_tf 			= $this->module->table_where('v_fee_schedule', array( 'lvl_id'=> $lvl_id, 'fee_type' => $as_mode ));

		$assessed_fee = [];

		$checkmax = $this->module->get_query("SELECT COUNT(stud_id) as cnt from section_assignment WHERE sec_id = ".$sec_id." ")->row('cnt');
		

		if($checkmax <= 25){
			foreach($get_tf->result() as $r){
			
				$tf 			= floatval($r->fee_tf);
				$as_sib_amount 	= 0;

				if($as_sib_discount == 'Y'){
					$as_sib_amount 	= $tf * 0.1;
					$tf 			= $tf - $as_sib_amount;
				}else{
					$as_sib_amount = 0;
					$tf 			= $tf;
				}

				$as_reservation = 0;
				if($as_is_reserve == 'Y'){

					if($stud_type == 'New Student'){
						$as_reservation = 2000;
					}else{
						$as_reservation = 1000;
					}
				}else{
					$as_reservation = 0;
				}

				$fee_other_schl_fee = floatval($r->fee_other_schl_fee);
				$fee_amnt_to_pay 	= floatval($r->fee_amnt_to_pay);
				$sub_amount 		= ($fee_other_schl_fee + $tf) - ($as_reservation);


				array_push($assessed_fee,
					array(
						'orig_tf' 				=> floatval($r->fee_tf),
						'tf' 					=> $r->fee_tf,
						'fee_other_schl_fee' 	=> $fee_other_schl_fee,
						'as_sib_amount'			=> $as_sib_amount,
						'as_book'				=> $as_book,
						'as_notebook'			=> $as_notebook,
						'as_uniform'			=> $as_uniform,
						'as_others'				=> $as_others,
						'as_reservation'		=> $as_reservation,
						'sub_amount' 			=> $sub_amount,
						'as_total'				=> ($sub_amount + $as_book + $as_notebook + $as_uniform + $as_others),
						'stud_id'				=> $stud_id,
						'stud_name'				=> $stud_name,
						'stud_queue'			=> $stud_queue,
						'lvl_name'				=> $r->lvl_name,
						'sec_id'				=> $sec_id,
						'stud_type' 			=> $stud_type,
						'lvl_id'				=> $lvl_id,
						'sy_id'					=> $sy_id,
						'as_mode'				=> $as_mode,
						'as_sib_discount'		=> $as_sib_discount,
						'as_is_reserve'			=> $as_is_reserve,
						'as_is_reserve'			=> 'N',
						'as_percentage'			=> ''
					)
				);
			}

			$data['assessed_fee'] 	= $assessed_fee;
		}else{

			$data['msg'] 			= 'Maximum <strong>(25) student</strong> has been reached.';
		}
		
		
		return $this->load->view('assessment/tbl_assess', $data);

	}

	public function compute_scholar(){
		$stud_id 			= $this->input->post('stud_id', true);
		$stud_name 			= $this->input->post('stud_name', true);
		$stud_queue 		= $this->input->post('stud_queue', true);
		$lvl_id 			= $this->input->post('lvl_id', true);
		$sec_id 			= $this->input->post('sec_id', true);
		$sy_id 				= $this->input->post('sy_id', true);
		$as_mode 			= $this->input->post('as_mode', true);
		$stud_type			= $this->input->post('stud_type', true);
		$as_book 			= floatval($this->input->post('as_book', true));
		$as_notebook 		= floatval($this->input->post('as_notebook', true));
		$as_uniform			= floatval($this->input->post('as_uniform', true));
		$as_others			= floatval($this->input->post('as_others', true)); 	// PE Shoes
		$get_tf 			= $this->module->table_where('v_fee_schedule', array( 'lvl_id'=> $lvl_id, 'fee_type' => $as_mode ));

		$as_tf 				= floatval(str_replace(",","",$this->input->post('as_tf', true)));
		$fee_other_schl_fee = floatval(str_replace(",","",$this->input->post('fee_other_schl_fee', true)));

		$assessed_fee = [];

		$checkmax = $this->module->get_query("SELECT COUNT(stud_id) as cnt from section_assignment WHERE sec_id = ".$sec_id." ")->row('cnt');
		

		if($checkmax <= 25){
			
			$tf 				= $as_tf; 				//ORIG TF
			$fee_other_schl_fee = $fee_other_schl_fee;	// MISSCELLANEOUS
			$sub_amount 		= ($fee_other_schl_fee + $tf);


			array_push($assessed_fee,
				array(
					'orig_tf' 				=> $tf,
					'tf'					=> $tf,
					'fee_other_schl_fee' 	=> $fee_other_schl_fee,
					'as_sib_amount'			=> 0,
					'as_book'				=> $as_book,
					'as_notebook'			=> $as_notebook,
					'as_uniform'			=> $as_uniform,
					'as_others'				=> $as_others,
					'as_reservation'		=> 0,
					'sub_amount' 			=> $sub_amount,
					'as_total'				=> ($sub_amount + $as_book + $as_notebook + $as_uniform + $as_others),
					'stud_id'				=> $stud_id,
					'stud_name'				=> $stud_name,
					'stud_queue'			=> $stud_queue,
					'sec_id'				=> $sec_id,
					'stud_type' 			=> $stud_type,
					'lvl_id'				=> $lvl_id,
					'sy_id'					=> $sy_id,
					'as_mode'				=> $as_mode,
					'as_sib_discount'		=> 'N',
					'as_is_reserve'			=> 'N',
					'as_percentage'			=> $this->input->post('as_percentage', true)
				)
			);

			$data['assessed_fee'] 	= $assessed_fee;
		}else{

			$data['msg'] 			= 'Maximum <strong>(25) student</strong> has been reached.';
		}
		
		
		return $this->load->view('assessment/tbl_assess', $data);

	}

	public function compute_mode(){
		$lvl_id 	=	$this->input->post('lvl_id', true);
		$as_mode 	=	$this->input->post('as_mode', true);
		$stud_id 	=	$this->input->post('stud_id', true);

		$get_tf  			= 	$this->module->table_where('v_fee_schedule', array( 'lvl_id'=> $lvl_id, 'fee_type' => $as_mode ));
		$get_assessment		= 	$this->module->table_where('v_student_assessment', array( 'stud_id' => $stud_id) );



	}

	public function save_print(){

		date_default_timezone_set("Asia/Manila");
		$datenow = date('Y-m-d H:i:s');

		$stud_id = $this->input->post('stud_id' , true);

		$data = array(
			'stud_id' 			=> $stud_id,
			'stud_type'			=> $this->input->post('stud_type' , true),
	        'lvl_id'			=> $this->input->post('lvl_id' , true),
	        'as_mode'			=> $this->input->post('as_mode' , true),
	        'as_sib_discount'	=> $this->input->post('as_sib_discount' , true),
	        'as_sib_amount'		=> $this->input->post('as_sib_amount' , true),
	        'as_is_reserve'		=> $this->input->post('as_is_reserve' , true),
	        'as_reservation'	=> $this->input->post('as_reservation' , true),
	        'as_tf'				=> $this->input->post('as_tf' , true),
	        'as_other_schl_fee'	=> $this->input->post('as_other_schl_fee' , true),
	        'as_disc_tf'		=> $this->input->post('as_disc_tf' , true),
	        'as_book'			=> $this->input->post('as_book' , true),
	        'as_notebook'		=> $this->input->post('as_notebook' , true),
	        'as_uniform'		=> $this->input->post('as_uniform' , true),
	        'as_others'			=> $this->input->post('as_others' , true),
	        'as_total' 			=> $this->input->post('as_total' , true),  
	        'as_stat'  			=> 'DONE',
	        'as_date'  			=> $datenow,
	    	'as_percentage' 	=> $this->input->post('as_percentage' , true) );	

		$this->module->insert('payment_history', $data);
		$this->module->update('assessment', $data, array('stud_id' => $stud_id, 'sy_id' => $this->input->post('sy_id' , true)) );
		


		$data2 = array(
			'stud_id' 			=> $stud_id,
			'sec_id' 			=> $this->input->post('sec_id' , true),
			'lvl_id'			=> $this->input->post('lvl_id' , true),
			'sy_id' 			=> $this->module->get_active_sy(),
			'seca_date'			=> date('Y-m-d')
		);

		$check = $this->module->get_query("SELECT * FROM section_assignment WHERE stud_id = ".$stud_id." ");

		if($check->num_rows() < 1){
			$this->module->insert('section_assignment', $data2);
		}else{
			$this->module->update('section_assignment', array('sec_id' => $this->input->post('sec_id' , true), 'lvl_id' => $this->input->post('lvl_id' , true),), array('stud_id' => $stud_id));
		}

		$this->module->cust_return(true,'<strong>Successful.</strong><br/> Printing Assessment Receipt . . .', $stud_id);
	}


	public function print_assessment(){
		$stud_id = $this->uri->segment(3);

		$data['title'] 			= 'Assessment';
		$data['assessment'] 	= $this->module->table_where('v_student_assessment', array('stud_id' => $stud_id));
		$this->load->view('print_assessment', $data);
	}


	public function student_record(){
		$data['title'] 		= 'Student Record';
		$sy_id 				= $this->module->get_active_sy(); //$this->uri->segment(3); /**/
		$data['student'] 	= $this->module->get_query("SELECT * FROM v_student_enrollment_assessment WHERE sy_id = ".$sy_id." ORDER BY se_date_enrolled DESC");
		$data['sy']			= $this->module->get_table('school_year');
		$this->load->view('records/student_record', $data);
	}

	public function student_contacts(){
		$data['title'] 		= 'Student Contacts';
		$sy_id 				= $this->module->get_active_sy(); //$this->uri->segment(3); /**/
		$data['student'] 	= $this->module->get_query("SELECT * FROM v_section_students WHERE sy_id = ".$sy_id." ORDER BY sec_id,stud_lastname, stud_firstname");
		//$data['sy']			= $this->module->get_table('school_year');
		$this->load->view('records/student_contacts', $data);
	}

	public function print_student(){
		$stud_id = $this->uri->segment(3);

		$data['title'] 			= 'Student Profile';
		$data['student'] 		= $this->module->table_where('student', array('stud_id' => $stud_id));
		$data['sibling'] 		= $this->module->table_where('sibling', array('stud_id' => $stud_id));
		$data['assessment'] 	= $this->module->table_where('assessment', array('stud_id' => $stud_id));
		$this->load->view('records/reprint_student', $data);
	}

	public function re_print_student(){
		$stud_id = $this->uri->segment(3);

		$data['title'] 				= 'Student Profile';
		$data['student'] 			= $this->module->table_where('students', array('stud_id' => $stud_id));
		$data['sibling'] 			= $this->module->table_where('sibling', array('stud_id' => $stud_id));
		$data['student_enrollment'] = $this->module->table_where('student_enrollment', array('stud_id' => $stud_id));
		$this->load->view('records/reprint_student_record', $data);
	}

	
	public function edit_student(){
		$stud_id 	= $this->uri->segment(3);
		$sy_id 		= $this->module->get_active_sy();

		if(!$this->input->is_ajax_request())
			{
				$data['title'] 		= 'Edit Student';
				$data['level'] 		= $this->module->get_query("SELECT dp.`dept_name`, lvl.* FROM department AS dp, grade_level AS lvl WHERE dp.`dept_id` = lvl.`dept_id`");
				$data['sy']			= $this->module->get_query("SELECT * FROM school_year WHERE sy_is_active ='Y' ");
				$data['student'] 	= $this->module->get_query('SELECT * FROM students WHERE stud_id = "'.$stud_id.'" ');
				$data['assessment'] = $this->module->get_query('SELECT * FROM v_student_enrollment_assessment WHERE stud_id = "'.$stud_id.'" AND sy_id = '.$sy_id.' ');
				$data['sibling'] 	= $this->module->get_query('SELECT * FROM sibling WHERE stud_id = "'.$stud_id.'" ');
				$this->load->view('records/edit_student', $data);
			}
		else
		{
			$stud_no 					= $this->input->post('stud_no', true);
			$stud_no 					= $this->input->post('stud_no', true);
			$stud_lrn 					= $this->input->post('stud_lrn', true);
			$stud_lastname				= ucwords($this->input->post('stud_lastname', true));
			$stud_firstname				= ucwords($this->input->post('stud_firstname', true));
			$stud_middlename			= ucwords($this->input->post('stud_middlename', true));
			$stud_suffix				= ucwords($this->input->post('stud_suffix', true));
			$stud_nickname				= ucwords($this->input->post('stud_nickname', true));
			$stud_birthdate				= ucwords($this->input->post('stud_birthdate', true));
			$stud_gender				= $this->input->post('stud_gender', true);
			$stud_address 				= ucwords($this->input->post('stud_address', true));
			$stud_handedness 			= $this->input->post('stud_handedness', true);
			$stud_religion				= ucwords($this->input->post('stud_religion', true));
			$stud_father_name			= $this->input->post('stud_father_name', true);
			$stud_father_occupation		= ucwords($this->input->post('stud_father_occupation', true));
			$stud_father_education		= ucwords($this->input->post('stud_father_education', true));
			$stud_father_address		= ucwords($this->input->post('stud_father_address', true));
			$stud_father_contact		= $this->input->post('stud_father_contact', true);
			$stud_father_email			= $this->input->post('stud_father_email', true);
			$stud_mother_name			= $this->input->post('stud_mother_name', true);
			$stud_mother_occupation		= ucwords($this->input->post('stud_mother_occupation', true));
			$stud_mother_education		= ucwords($this->input->post('stud_mother_education', true));
			$stud_mother_address		= ucwords($this->input->post('stud_mother_address', true));
			$stud_mother_contact		= $this->input->post('stud_mother_contact', true);
			$stud_mother_email			= $this->input->post('stud_mother_email', true);
			$stud_emergency_name		= $this->input->post('stud_emergency_name', true);
			$stud_emergency_contact		= $this->input->post('stud_emergency_contact', true);
			$stud_relationship			= ucwords($this->input->post('stud_relationship', true));
			$stud_guardian_name			= $this->input->post('stud_guardian_name', true);
			$stud_guardian_contact		= $this->input->post('stud_guardian_contact', true);
			$stud_guar_name				= $this->input->post('stud_guar_name', true);
			$stud_guar_relation			= ucwords($this->input->post('stud_guar_relation', true));
			$stud_guar_address			= ucwords($this->input->post('stud_guar_address', true));
			$stud_guar_contact			= $this->input->post('stud_guar_contact', true);
			$stud_prev_schl_name		= ucwords($this->input->post('stud_prev_schl_name', true));
			$stud_prev_level			= $this->input->post('stud_prev_level', true);
			$stud_prev_date				= $this->input->post('stud_prev_date', true);


			$this->form_validation->set_rules('stud_lrn', 'Student LRN', 'trim');

				if ($this->form_validation->run() == FALSE)
	                {
	                	$this->module->my_return(false, validation_errors());
	                }
	            else
	                {
	                	$data = array (
		                		'stud_no' 					=> $stud_no,
								'stud_lrn' 					=> $stud_lrn,
								'stud_lastname' 			=> $stud_lastname,
								'stud_firstname' 			=> $stud_firstname,
								'stud_middlename' 			=> $stud_middlename,
								'stud_suffix' 				=> $stud_suffix,
								'stud_nickname' 			=> $stud_nickname,
								'stud_birthdate' 			=> date("Y-m-d", strtotime($stud_birthdate)),
								'stud_gender' 				=> $stud_gender,
								'stud_address' 				=> $stud_address,
								'stud_handedness' 			=> $stud_handedness,
								'stud_religion' 			=> $stud_religion,
								'stud_father_name' 			=> $stud_father_name,
								'stud_father_occupation' 	=> $stud_father_occupation,
								'stud_father_education'		=> $stud_father_education,
								'stud_father_address' 		=> $stud_father_address,
								'stud_father_contact' 		=> $stud_father_contact,
								'stud_father_email' 		=> $stud_father_email,
								'stud_mother_name' 			=> $stud_mother_name,
								'stud_mother_occupation' 	=> $stud_mother_occupation,
								'stud_mother_education'		=> $stud_mother_education,
								'stud_mother_address' 		=> $stud_mother_address,
								'stud_mother_contact'		=> $stud_mother_contact,
								'stud_mother_email' 		=> $stud_mother_email,
								'stud_emergency_name' 		=> $stud_emergency_name,
								'stud_emergency_contact' 	=> $stud_emergency_contact,
								'stud_relationship' 		=> $stud_relationship,
								'stud_guardian_name' 		=> $stud_guardian_name,
								'stud_guardian_contact' 	=> $stud_guardian_contact,
								'stud_guar_name' 			=> $stud_guar_name,
								'stud_guar_relation' 		=> $stud_guar_relation,
								'stud_guar_address' 		=> $stud_guar_address,
								'stud_guar_contact' 		=> $stud_guar_contact,
								'stud_prev_schl_name' 		=> $stud_prev_schl_name,
								'stud_prev_level' 			=> $stud_prev_level,
								'stud_prev_date' 			=> $stud_prev_date);

	                	if($this->module->update('students', $data, array('stud_id' => $stud_id) )){


							if($this->module->delete('sibling', array('stud_id' => $stud_id))){
								$data 	= $this->input->post(null,true);
						        foreach($data as $d => $k){

									if(strpos($d, 'sib')!== FALSE){
										$sib_name 	= empty($k["sib_name"])?'': $k["sib_name"];
										$sib_level 	= empty($k["sib_level"])?'': $k["sib_level"];
										$sib_age 	= empty($k["sib_age"])?'': $k["sib_age"];
										$sib_gender = empty($k["sib_gender"])?'': $k["sib_gender"];
										$sib_school = empty($k["sib_school"])?'': $k["sib_school"];

										if(!empty($sib_name) && !empty($sib_age) ){
											$siblings = array(
												"stud_id" 		=>$stud_id,
												"sib_name"		=>$sib_name,
												"sib_age"		=>$sib_age,
												"sib_gender"	=>$sib_gender,
												"sib_level"		=>$sib_level,
												"sib_school"	=>$sib_school
											);

											if (!empty($siblings)){
												$this->module->insert('sibling', $siblings);
											}
										}
									}//end day_out
								}
							}


							$ass_data = array(
								'se_stud_type' 		=> $this->input->post('se_stud_type', true),
								'lvl_id' 			=> $this->input->post('lvl_id',true),
								'se_mode_payment' 	=> $this->input->post('se_mode_payment',true)
							);

							$this->module->update('student_enrollment',$ass_data, array('stud_id' => $stud_id, 'sy_id' => $this->input->post('sy_id',true) ));
							$this->module->update('student_assessment',array('lvl_id' => $this->input->post('lvl_id',true)) , array('stud_id' => $stud_id, 'sy_id' => $this->input->post('sy_id',true) ));

							$this->module->my_return(true,'<strong>Successfully Updated.</strong>');
						}else{
							$this->module->my_return(false, 'Please check your input data if it is correct.');
						}

	                }
		}
	}

	private function upload_options($folder){   

		$config = array();
		$config['upload_path']		= './asset/uploads/'.$folder.'/';
		$config['allowed_types']	= 'jpg|jpeg|png|gif';
		$config['max_filename'] 	= 50;
		$config['remove_spaces'] 	= TRUE;
		$config['max_size'] 		= 25600;

		return $config;
	}

	public function delete_sibling(){
		$sib_id = $this->uri->segment(3);
		$this->module->delete('sibling', array('sib_id' => $sib_id));
	}


	public function section()
	{
		if(!$this->input->is_ajax_request())
			{
				$data['title']		= "Section";
				$sy_id 				= $this->module->get_active_sy(); 
				$data['level'] 		= $this->module->get_table('grade_level');
				$data['teacher'] 	= $this->module->get_query("SELECT * FROM teacher WHERE  tch_type = 'Adviser' AND tch_active = 'Y' ORDER BY tch_firstname ");/*'teacher', array('tch_type' => 'Adviser'*/
				/*$data['section'] 	= $this->module->get_query('SELECT sec.*, lvl.`lvl_name` FROM section AS sec, grade_level AS lvl WHERE sec.`lvl_id` = lvl.`lvl_id` AND sec.`sy_id` = '.$sy_id.'  ORDER BY sec_sort ASC');*/

				$data['section'] 	= $this->module->get_query("SELECT sec.*, sy.sy_selected, sy.sy_name,lvl.lvl_name, lvl.lvl_id  FROM section AS sec, school_year AS sy, grade_level AS lvl WHERE sy.sy_id = sec.sy_id AND sec.lvl_id = lvl.lvl_id /* AND sy.sy_selected = 'Y'*/ ORDER BY sec_sort DESC");

				$data['school_year']= $this->module->get_table('school_year');
				$this->load->view('configuration/section', $data);
			}
		else
		{	
			$this->form_validation->set_rules('sy_id', 'School Year', 'trim|required');
			$this->form_validation->set_rules('lvl_id', 'Level', 'trim|required');
			$this->form_validation->set_rules('sec_name', 'Section Name', 'trim|required'); /*|is_unique[section.sec_name]*/
			$this->form_validation->set_rules('tch_id', 'Adviser', 'trim|required');

			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {
                	$data = array(	'sy_id' 		=> $this->input->post('sy_id', true), 
                					'lvl_id' 		=> $this->input->post('lvl_id', true), 
                					'sec_name' 		=> $this->input->post('sec_name', true), 
                					'sec_sort' 		=> $this->input->post('sec_sort', true), 
                					'sec_teacher' 	=> $this->input->post('sec_teacher', true), 
                					'tch_id' 		=> $this->input->post('tch_id', true) );
                	$this->module->public_insert('section', $data);
                }

		}
	}


	public function edit_section()
	{
		if(!$this->input->is_ajax_request())
			{	
				$sec_id 			= $this->uri->segment(3);
				$data['title']		= "Section";
				$data['level'] 		= $this->module->get_table('grade_level');
				$data['teacher'] 	= $this->module->get_query("SELECT * FROM teacher WHERE  tch_type = 'Adviser' AND tch_active = 'Y' ORDER BY tch_firstname ");
				$data['section'] 	= $this->module->get_query('SELECT * FROM section WHERE sec_id = '.$sec_id.' ');
				$data['school_year']= $this->module->get_table('school_year');
				$this->load->view('configuration/edit_section', $data);
			}
		else
		{
			$this->form_validation->set_rules('sy_id', 'School Year', 'trim|required');
			$this->form_validation->set_rules('lvl_id', 'Level', 'trim|required');
			$this->form_validation->set_rules('sec_name', 'Section Name', 'trim|required');
			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {
                	$data = array(	'sy_id' 		=> $this->input->post('sy_id', true),
                					'lvl_id' 		=> $this->input->post('lvl_id', true), 
                					'sec_name' 		=> $this->input->post('sec_name', true), 
                					'sec_sort' 		=> $this->input->post('sec_sort', true), 
                					'sec_teacher' 	=> $this->input->post('sec_teacher', true), 
                					'tch_id' 		=> $this->input->post('tch_id', true) );
                	$this->module->public_update('section', $data, array('sec_id' => $this->input->post('sec_id', true) ));
                }

		}
	}

	public function delete_section()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('section', array('sec_id' => $id)))
		{
			return true;
		}
		
	}

	public function sectioning(){
		$data['title']	 = "Section Assignment";
		$sy_id			 = $this->module->get_active_sy();
		/*$data['summary'] = $this->module->get_query("SELECT sec_name, sec_id AS s_id, 
										(SELECT COUNT(*) FROM v_section_assignment WHERE sy_id = ".$sy_id." AND sec_id = s_id AND stud_handedness = 'Right-handed') AS right_handed,
										(SELECT COUNT(*) FROM v_section_assignment WHERE sy_id = ".$sy_id." AND sec_id = s_id AND stud_handedness = 'Left-handed') AS left_handed,
										(SELECT COUNT(*) FROM v_section_assignment WHERE sy_id = ".$sy_id." AND sec_id = s_id AND stud_gender = 'Male') AS boys,
										(SELECT COUNT(*) FROM v_section_assignment WHERE sy_id = ".$sy_id." AND sec_id = s_id AND stud_gender = 'Female') AS girls,
										(SELECT COUNT(*) FROM v_section_assignment WHERE sy_id = ".$sy_id." AND sec_id = s_id AND stud_religion LIKE '%catholic') AS catholic,
										(SELECT COUNT(*) FROM v_section_assignment WHERE sy_id = ".$sy_id." AND sec_id = s_id AND stud_religion NOT LIKE '%catholic') AS non_catholic,
										(SELECT COUNT(*) FROM v_section_assignment WHERE sy_id = ".$sy_id." AND sec_id = s_id) AS total
										FROM v_section_assignment  GROUP BY sec_name ORDER BY sec_sort ASC");

		//$data['sectioning'] 	= $this->module->get_query("SELECT sec.*, lvl.lvl_name, dept.dept_name FROM section AS sec, grade_level AS lvl, department AS dept WHERE sec.`lvl_id` = lvl.`lvl_id` AND dept.`dept_id` = lvl.`dept_id` ORDER BY sec.sec_sort ASC ");*/
		$data['section']	= $this->module->get_query("SELECT * FROM section WHERE sy_id = ".$sy_id." ORDER BY sec_sort ASC");
		$this->load->view('records/sectioning', $data);
	}


	public function class_list(){
		$data['title']	 			= "Class List";
		$sy_id			 			= $this->module->get_active_sy();
		$data['sy_id']				= $sy_id;
		$data['department'] 		= $this->module->get_table('department');
		$data['section']			= $this->module->get_query("SELECT * FROM v_section WHERE sy_id = ".$sy_id." ORDER BY sec_sort ASC");
		$data['student_enrolled'] 	= $this->module->get_query("SELECT * FROM v_student_enrollment_assessment WHERE sy_id = ".$sy_id." ");
		/*$data['student_enrolled'] 	= $this->module->get_query("SELECT * FROM v_student_enrollment_assessment WHERE sy_id = ".$sy_id." ");*/
		$data['dept_all'] 			= $this->module->get_query("SELECT dept_id, dept_name, COUNT(*) as cnt FROM v_student_enrollment_assessment WHERE se_status = 'Enrolled' GROUP BY dept_id");
		$data['reserved_student'] 	= $this->module->get_query("SELECT s.lvl_id, s.lvl_name, s.sec_id, s.sec_name, COUNT(s.sec_id) AS cnt FROM v_reservation AS s WHERE s.stud_id NOT IN ( SELECT stud_id FROM student_enrollment WHERE sec_id = s.sec_id ) GROUP BY s.sec_id ");
		$data['total']				= $this->module->get_query("SELECT se_status as cl_status, COUNT(*) as cnt FROM v_student_enrollment GROUP BY cl_status");
		$this->load->view('records/class_list', $data);
	}



	public function teacher()
	{
		if(!$this->input->is_ajax_request())
			{
				$data['title']		= "Teacher";
				/*$data['section'] 	= $this->module->get_table('section');*/
				$data['teacher'] 	= $this->module->get_query("SELECT *  FROM teacher ORDER BY tch_lastname  ");
				$this->load->view('configuration/teacher', $data);
			}
		else
		{

			$this->form_validation->set_rules('tch_lastname', 'Last Name', 'trim|required');
			$this->form_validation->set_rules('tch_firstname', 'First Name', 'trim|required'); 
			$this->form_validation->set_rules('tch_middlename', 'Middle Name', 'trim');


			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {

                	
                	$tch_lastname 	=	$this->input->post('tch_lastname', true);
                	$tch_firstname 	=	$this->input->post('tch_firstname', true);
                	$tch_middlename	= 	$this->input->post('tch_middlename', true);
                	$tch_type		= 	$this->input->post('tch_type', true);
                	$tch_has_subj	= 	$this->input->post('tch_has_subj', true);
                	$tch_head		= 	$this->input->post('tch_head', true);


                	$check = $this->module->table_where('teacher', array('tch_lastname' => $tch_lastname, 'tch_firstname' => $tch_firstname));

                	if($check->num_rows() < 1){
                		$data = array(	
                						'tch_lastname' 		=> ucwords(strtolower($tch_lastname)), 
	                					'tch_firstname' 	=> ucwords(strtolower($tch_firstname)), 
	                					'tch_middlename' 	=> ucwords(strtolower($tch_middlename)), 
	                					'tch_type' 			=> $tch_type,
	                					'tch_has_subj' 		=> $tch_has_subj,
	                					'tch_head' 			=> $tch_head
	                	);
	                	$this->module->public_insert('teacher', $data);
                	}else{
                		$this->module->my_return(false, 'Already exist in record');
                	}

                	

                	/*$tch_id 	= $this->db->insert_id();
                	$this->module->insert('teacher_assignment', array('tch_id' => $tch_id, 'sec_id' => $this->input->post('sec_id', true) ));*/
                }

		}
	}


	public function edit_teacher()
	{
		if(!$this->input->is_ajax_request())
			{	
				$tch_id 			= $this->uri->segment(3);
				$data['title']		= "Edit Teacher";
				$data['tch'] 		= $this->module->get_query("SELECT * FROM teacher WHERE tch_id = ".$tch_id." ");
				$this->load->view('configuration/edit_teacher', $data);
			}
		else
		{
			$this->form_validation->set_rules('tch_id', 'Teacher ID', 'trim|required');

			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {	
                	$tch_id 		=	$this->input->post('tch_id', true);
                	$tch_lastname 	=	$this->input->post('tch_lastname', true);
                	$tch_firstname 	=	$this->input->post('tch_firstname', true);
                	$tch_middlename	= 	$this->input->post('tch_middlename', true);
                	$tch_type		= 	$this->input->post('tch_type', true);
                	$tch_has_subj	= 	$this->input->post('tch_has_subj', true);
                	$tch_head		= 	$this->input->post('tch_head', true);


                	$data = array(	'tch_lastname' 		=> ucwords(strtolower($tch_lastname)), 
                					'tch_firstname' 	=> ucwords(strtolower($tch_firstname)), 
                					'tch_middlename' 	=> ucwords(strtolower($tch_middlename)), 
                					'tch_type' 			=> $tch_type,
                					'tch_has_subj' 		=> $tch_has_subj,
                					'tch_head' 			=> $tch_head
                	);
                	$this->module->public_update('teacher', $data, array('tch_id' => $this->input->post('tch_id', true) ));
                }

		}
	}

	public function delete_teacher()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('teacher', array('tch_id' => $id)))
		{
			return true;
		}
		
	}

	public function get_tbL_subject_assignment(){
		$sy_id = $this->module->get_active_sy();
		$data['subject_assign'] = $this->module->get_query('SELECT * FROM v_subject WHERE sy_id = '.$sy_id.' ');
		$this->load->view('configuration/tbl_subject_assignment', $data);
	}

	public function get_faculty(){
		$faculty = $this->module->get_query("SELECT * FROM teacher ORDER BY tch_lastname ASC");
			echo '<option selected="" disabled="">SELECT</option>';
		foreach($faculty->result() as $r){
			echo '<option value="'.$r->tch_id.'"  >'.$r->tch_lastname.', '.$r->tch_firstname.'</option>';
		}
	}


	public function user()
	{
		if(!$this->input->is_ajax_request())
			{
				$data['title']		= "User";
				$data['user'] 	= $this->module->get_table('user');
				$this->load->view('configuration/user', $data);
			}
		else
		{
			$this->form_validation->set_rules('usr_lastname', 'Last Name', 'trim|required');
			$this->form_validation->set_rules('usr_firstname', 'First Name', 'trim|required'); 
			$this->form_validation->set_rules('usr_name', 'Username', 'trim|is_unique[user.usr_name]');


			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {


                	$tch_id 		=	$this->input->post('tch_id', true);
                	$usr_type		= 	$this->input->post('usr_type', true);
                	$usr_firstname	= 	$this->input->post('usr_firstname', true);
                	$usr_lastname	= 	$this->input->post('usr_lastname', true);
                	$username 		= 	strtolower(str_replace(' ', '', $usr_firstname).'_'.str_replace(' ', '', $usr_lastname));

                	$check 			= $this->module->table_where('user', array('tch_id'=>$tch_id));

                	if($check->num_rows() > 0){
                		$this->module->my_return(false, 'Teacher already in the database');
                	}else{
                		$data = array(	
	                					'tch_id' 			=> $tch_id,
	                					'usr_type' 			=> $usr_type, 
	                					'usr_firstname' 	=> $usr_firstname,
	                					'usr_lastname' 		=> $usr_lastname,
	                					'usr_name'			=> $username,
	                					'usr_password'		=> '123456'
	                	);

	                	$this->module->public_insert('user', $data);
                	}

                	
                
                }

		}
	}

	public function set_attendance()
	{
		if(!$this->input->is_ajax_request())
			{
				$data['title']			= "Attendance";
				$data['attendance_hdr'] = $this->module->get_table('attendance_hdr');
				$this->load->view('configuration/attendance', $data);
			}
		else
		{
			$this->form_validation->set_rules('athdr_month', 'Month', 'trim|required');
			$this->form_validation->set_rules('athdr_total_days', 'Total Days', 'trim|required'); 


			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {


                	$sy_id 				= $this->module->get_active_sy();
                	$athdr_month		= $this->input->post('athdr_month', true);
                	$athdr_total_days	= $this->input->post('athdr_total_days', true);
                	$check 				= $this->module->table_where('attendance_hdr', array('sy_id' => $sy_id, 'athdr_month' => $athdr_month ));

                	if($check->num_rows() > 0){
                		$this->module->my_return(false, 'Attendance already set for the month of '.$athdr_month);
                	}else{
                		$data = array(	
	                					'sy_id' 			=> $sy_id,
	                					'athdr_month' 		=> $athdr_month, 
	                					'athdr_total_days' 	=> $athdr_total_days
	                	);

	                	$this->module->public_insert('attendance_hdr', $data);
                	}

                	
                
                }

		}
	}

	public function delete_attendance()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('attendance_hdr', array('athdr_id' => $id)))
		{
			return true;
		}
		
	}


	public function edit_user()
	{
		if(!$this->input->is_ajax_request())
			{	
				$usr_id 			= (empty($this->uri->segment(3)) ? $this->session->userdata('usr_id') : $this->uri->segment(3) );
				$data['title']		= "Edit User";
				$data['user'] 		= $this->module->get_query("SELECT * FROM user WHERE usr_id = ".$usr_id." ");
				$this->load->view('configuration/edit_user', $data);
			}
		else
		{
			$this->form_validation->set_rules('usr_id', 'User ID', 'trim|required');

			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {	
                	$usr_id 		=	$this->input->post('usr_id', true);

                	$usr_name 		=	$this->input->post('usr_name', true);
                	$usr_password 	=	$this->input->post('usr_password', true);
                	$usr_type		= 	$this->input->post('usr_type', true);
                	$usr_firstname	= 	$this->input->post('usr_firstname', true);
                	$usr_lastname	= 	$this->input->post('usr_lastname', true);

                	$data = array(	'usr_name' 			=> $usr_name, 
                					'usr_type' 			=> $usr_type, 
                					'usr_firstname' 	=> $usr_firstname,
                					'usr_lastname' 		=> $usr_lastname,
                					'usr_password'		=> $usr_password
                	);

                	$this->module->public_update('user', $data, array('usr_id' => $usr_id));
                }

		}
	}

	public function delete_user()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('user', array('usr_id' => $id)))
		{
			return true;
		}
		
	}


	public function subject()
	{
		if(!$this->input->is_ajax_request())
			{
				$sy_id 					= $this->module->get_active_sy();
				$data['title']			= "Subject";
				$data['subject'] 		= $this->module->getTableSort('subject', 'sub_sort');
				$data['subject_assign'] = $this->module->get_query("SELECT * FROM v_subject WHERE sy_id =".$sy_id." ");
				$this->load->view('configuration/subject', $data);
			}
		else
		{
			$this->form_validation->set_rules('sub_name', 'Subject Name', 'trim|required');

			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {
					$sub_name		= $this->input->post('sub_name', true);
					$sub_sort		= $this->input->post('sub_sort', true);

					$this->module->public_insert('subject', array('sub_name' => $sub_name, 'sub_sort' => $sub_sort ));
		}		}

	}

	public function edit_subject()
	{
		if(!$this->input->is_ajax_request())
			{	
				$sub_id 			= $this->uri->segment(3);
				$data['title']		= "Edit Subject";
				$data['subject'] 	= $this->module->get_query("SELECT * FROM subject WHERE sub_id = ".$sub_id." ");
				$this->load->view('configuration/edit_subject', $data);
			}
		else
		{
			$this->form_validation->set_rules('sub_name', 'Subject Name', 'trim|required');

			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {	
                	$sub_id 		=	$this->input->post('sub_id', true);
                	$sub_name 		=	$this->input->post('sub_name', true);
                	$sub_sort 		=	$this->input->post('sub_sort', true);


                	$data = array(	'sub_name' 		=> $sub_name,
                					'sub_sort' 		=> $sub_sort
                	);
                	$this->module->public_update('subject', $data, array('sub_id' => $sub_id ));
                }

		}
	}

	public function delete_subject()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('subject', array('sub_id' => $id)))
		{
			return true;
		}
		
	}

	public function delete_subject_assignment()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('subject_assignment', array('subj_id' => $id)))
		{
			return true;
		}
		
	}

	public function delete_subject_details()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('subject_detail', array('subj_det_id' => $id)))
		{
			return true;
		}
		
	}


	public function subject_detail()
	{


		$sub_id = $this->input->post('sub_id', true);

		$data 	= $this->input->post(null,true);
        foreach($data as $d => $k){

			if(strpos($d, 'subject')!== FALSE){
				$subj_det_name 			= empty($k["subj_det_name"])?'': $k["subj_det_name"];
				$subj_det_percentage 	= empty($k["subj_det_percentage"])?'': $k["subj_det_percentage"];

				if(!empty($subj_det_name) && !empty($subj_det_percentage) ){
					$subject = array(
						"sub_id" 				=>$sub_id,
						"subj_det_name" 		=>$subj_det_name,
						"subj_det_percentage"	=>$subj_det_percentage
					);

					if (!empty($subject)){
						$this->module->insert('subject_detail', $subject);
					}
				}
			}// Subject
		}

		$this->module->my_return(true, 'Success');

		
	}


	public function subject_assignment()
	{

			$sy_id			= $this->input->post('sy_id', true);	
			$sec_id			= $this->input->post('sec_id', true);
			$lvl_id			= $this->input->post('lvl_id', true);
			$tch_id 		= $this->input->post('tch_id', true);
			$sub_id 		= $this->input->post('sub_id', true);
			$subj_det_id 	= $this->input->post('subj_det_id', true);

			$chk = $this->module->table_where('subject_assignment', array('sec_id' => $sec_id, 'sub_id' => $sub_id,  'subj_det_id' => $subj_det_id ));

			if($chk->num_rows() < 1){

				$data = array(	'sy_id' 	=> $sy_id, 
							'lvl_id' 		=> $lvl_id, 
        					'sec_id' 		=> $sec_id, 
        					'tch_id' 		=> $tch_id, 
        					'sub_id' 		=> $sub_id,
        					'subj_det_id' 	=> $subj_det_id
	        	);
	        	$this->module->public_insert('subject_assignment', $data);

			}else{
				$this->module->my_return(false, 'Subject with that teacher & section is already exist in the record');
			}

			
	}


	public function grade_transmutation()
	{
		if(!$this->input->is_ajax_request())
			{	
				$sub_id 			= $this->uri->segment(3);
				$data['title']		= "Grade Transmutation";
				$data['gt'] 		= $this->module->get_table("grade_transmutation");
				$this->load->view('configuration/grade_transmutation', $data);
			}
		else
		{
			$this->form_validation->set_rules('gt_min', 'Minimum Grade', 'trim');
			$this->form_validation->set_rules('gt_max', 'Maximum Grade', 'trim');
			$this->form_validation->set_rules('gt_grade', 'Transmuted Grade', 'trim|required');

			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {	
                	$gt_min 		=	$this->input->post('gt_min', true);
                	$gt_max 		=	$this->input->post('gt_max', true);
                	$gt_grade 		=	$this->input->post('gt_grade', true);


                	$data = array(	'gt_min' 		=> $gt_min,
                					'gt_max' 		=> $gt_max,
                					'gt_grade' 		=> $gt_grade
                	);
                	$this->module->public_insert('grade_transmutation', $data);
                }

		}
	}

	public function delete_grade_transmutation()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('grade_transmutation', array('gt_id' => $id)))
		{
			return true;
		}
		
	}


	public function component_assessment()
	{
		if(!$this->input->is_ajax_request())
			{	
				$data['title']		= "Components of Assessment";
				$data['ca'] 		= $this->module->getTableSort('v_component_assessment', 'sub_sort');
				$this->load->view('configuration/component_assessment', $data);
			}
		else
		{
			$this->form_validation->set_rules('ca_ww_percentage', 'Written Works (%)', 'trim|required');
			$this->form_validation->set_rules('ca_pt_percentage', 'Performance Task (%)', 'trim|required');
			$this->form_validation->set_rules('ca_qa_percentage', 'Quality Assessment (%)', 'trim|required');
			$this->form_validation->set_rules('sub_id', 'Subject', 'trim|required');

			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {	
                	$ca_ww_percentage 		=	$this->input->post('ca_ww_percentage', true);
                	$ca_pt_percentage 		=	$this->input->post('ca_pt_percentage', true);
                	$ca_qa_percentage 		=	$this->input->post('ca_qa_percentage', true);
                	$sub_id 				=	$this->input->post('sub_id', true);

                	$chk = $this->module->table_where('component_assessment', array('sub_id'=>$sub_id));

                	if($chk->num_rows() >= 1){
                		$this->module->my_return(false, 'Subject already in the record.');
                	}else{

                		$data = array(	'ca_ww_percentage' 		=> $ca_ww_percentage,
	                					'ca_pt_percentage' 		=> $ca_pt_percentage,
	                					'ca_qa_percentage' 		=> $ca_qa_percentage,
	                					'sub_id'				=> $sub_id
	                	);
	                	$this->module->public_insert('component_assessment', $data);

                	}

                }

		}
	}

	public function delete_component_assessment()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('component_assessment', array('ca_id' => $id)))
		{
			return true;
		}
		
	}


	public function admission(){
		$sy_id		= $this->module->get_active_sy();

		if(!$this->input->is_ajax_request())
			{
				$sec_id 					= $this->uri->segment(3);
				$data['title']				= "Section Assignment";
				$data['section_assignment']	= $this->module->get_query("SELECT * FROM v_section_assignment WHERE sec_id = ".$sec_id." AND sy_id = ".$sy_id." ");
				$get_sec  					= $this->module->get_query("SELECT * FROM v_section WHERE sec_id = ".$sec_id."  ");
				$lvl_id						= $get_sec->row("lvl_id");
				$data['section']			= $get_sec;
				$data['student']			= $this->module->get_query("SELECT * FROM v_student_enrollment WHERE lvl_id = ".$lvl_id." AND sy_id = ".$sy_id." AND stud_id NOT IN(SELECT stud_id FROM section_assignment) ORDER BY stud_lastname "); 
				$this->load->view('records/admission', $data);
			}
		else{

			$stud_id 	= $this->input->post('stud_id', true);
			$sec_id 	= $this->input->post('sec_id', true);
			$sec_name 	= $this->input->post('sec_name', true);
			$lvl_id 	= $this->input->post('lvl_id', true);
			

			$check 		= $this->module->table_where('section_assignment', array('stud_id' => $stud_id,'sec_id'=> $sec_id,'lvl_id'=> $lvl_id,'sy_id' => $sy_id));

			if($check->num_rows() < 1){
				$checkmax = $this->module->get_query("SELECT COUNT(stud_id) as cnt from section_assignment WHERE sec_id = ".$sec_id." ")->row('cnt');

				if($checkmax < 25){

					$this->form_validation->set_rules('stud_id', 'Student', 'trim|required');

					if ($this->form_validation->run() == FALSE)
		                {
		                	$this->module->my_return(false, validation_errors());
		                }
		            else
			            {
			            	$data 		= array(
								'stud_id' 	=> $stud_id,
								'sec_id'	=> $sec_id,
								'sec_name' 	=> $sec_name,
								'lvl_id'	=> $lvl_id,
								'sy_id'		=> $sy_id,
								'seca_date' => date('Y-m-d'));

							$this->module->public_insert('section_assignment', $data);
			            }
				}else{
					$this->module->my_return(false, 'Maximum <strong>(25) student</strong> has been reached.');
				}

				
			}else{
				$this->module->my_return(false, 'This Student already in that section.');
			}

			
		}
	}

	public function section_class_list(){
		$data['title']				= "Class List";
		$sy_id 						= $this->module->get_active_sy();
		$sec_id 					= $this->uri->segment(3);
		$data['section_details'] 	= $this->module->table_where('v_sy_section', array('sec_id' => $sec_id, 'sy_id' => $sy_id));
		$data['grade_level'] 		= $this->module->get_table('grade_level');
		$data['class_list']			= $this->module->get_query("SELECT * FROM student_class_list WHERE sec_id = ".$sec_id."  AND  sy_id = ".$sy_id." ORDER BY stud_lastname ASC " );
		//$data['reservation_list']	= $this->module->table_where('v_reservation', array('sec_id' => $sec_id, 'sy_id' => $sy_id));
		//$data['enrolled_list']		= $this->module->table_where('v_student_enrollment', array('sec_id' => $sec_id, 'sy_id' => $sy_id));
		$this->load->view('records/section_class_list', $data);
	}

	public function delete_section_assignment()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('section_assignment', array('seca_id' => $id)))
		{
			return true;
		}
		
	}

	public function delete_class_list()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('student_class_list', array('cl_id' => $id)))
		{
			return true;
		}
		
	}

	public function print_class(){
		$sec_id 					= $this->uri->segment(3);
		$data['title']				= "Section Assignment";
		$sy_id 						= $this->module->get_active_sy();
		$data['section_assignment']	= $this->module->get_query("SELECT * FROM v_section_students WHERE sec_id = ".$sec_id." AND sy_id = ".$sy_id." ORDER BY stud_lastname ASC ");
		$this->load->view('records/print_class', $data);
	}


	/*public function print_class(){
		$sec_id 					= $this->uri->segment(3);
		$data['title']				= "Section Assignment";
		$data['section_assignment']	= $this->module->get_query("SELECT * FROM v_admission WHERE sec_id = ".$sec_id." ORDER BY stud_lastname ASC ");
		$this->load->view('records/print_class', $data);
	}*/

	public function excel_class(){
		$sec_id 					= $this->uri->segment(3);
		$sy_id 						= $this->module->get_active_sy();
		$data['title']				= "Section Assignment";
		$data['section_assignment']	= $this->module->get_query("SELECT * FROM v_section_students WHERE sec_id = ".$sec_id." AND sy_id = ".$sy_id." ORDER BY stud_lastname ASC ");
		$this->load->view('records/excel_class', $data);
	}


	public function get_assessment(){

		$student = $this->module->get_query('SELECT * FROM v_student_assessment '); /*WHERE `as_stat` = "PENDING"  ORDER BY stud_queue DESC*/

		$cnt = 1;
 		foreach($student->result() as $r){
 			echo '<tr>';
			echo '<td>'.$cnt++.'</td>';
			echo '<td class="bold">'.$r->stud_queue.'</td>';
			echo '<td class="bold">'.strtoupper($r->fullname).'</td>';
			echo '<td>'.$r->stud_type.'</td>';
			echo '<td>'.$r->lvl_name.'</td>';
			echo '<td>'.$r->as_mode.'</td>';
			echo '<td>';
			echo  '<a class="btn btn-success btn-xs" href="'.base_url().'admin/assessment_detail/'.$r->stud_id.'">Assess</a>';

			        $stat = $r->as_stat;
			        if($stat == 'DONE'){
			        	echo '<a class="btn btn-info btn-xs" href="<'.base_url().'admin/print_assessment/'.$r->stud_id.'"> <i class="fa fa-print"></i> Reprint </a>';
			        }
			echo '</td>';
			echo '</tr>';
 		}
	}


	public function view_student(){
		$stud_id 			= $this->uri->segment(3);
		$sy_id 				= $this->module->get_active_sy();
		$data['title'] 		= 'Student Profile';
		$data['level'] 		= $this->module->get_query("SELECT dp.`dept_name`, lvl.* FROM department AS dp, grade_level AS lvl WHERE dp.`dept_id` = lvl.`dept_id`");
		$data['sy']			= $sy_id;
		$data['student'] 	= $this->module->get_query('SELECT * FROM students WHERE stud_id = "'.$stud_id.'" '); 
		$data['assessment'] = $this->module->get_query('SELECT * FROM v_student_enrollment_assessment WHERE stud_id = "'.$stud_id.'" AND sy_id = "'.$sy_id.'" ');
		$data['sibling'] 	= $this->module->get_query('SELECT * FROM sibling WHERE stud_id = "'.$stud_id.'" ');
		$this->load->view('records/student_profile', $data);
	}

	public function upload_picture(){
		$stud_id = $this->uri->segment(3);

		$config['upload_path']		= 'asset/uploads/';
		$config['allowed_types']	= 'jpg|jpeg|gif|png';
		$config['encrypt_name']		= FALSE;
		$config['remove_spaces'] 	= TRUE;
		$config['max_size'] 		= 5000;
		$config['max_width'] 		= 1000;
		$config['max_height'] 		= 1000;
		$config['overwrite'] 		= true;


		$this->load->library('image_lib',$config); 
		$this->load->library('upload', $config);
		$this->image_lib->initialize($config);


		if (!$this->upload->do_upload('stud_img')) {
			$this->module->my_return(false,$this->upload->display_errors());
		}else{
			$data = $this->upload->data();

			$this->module->update('student', array('stud_img' => $data['file_name']), array('stud_id' => $stud_id));
			$this->module->my_return(true, 'Upload Complete');
		}
	}


	public function print_student_profile(){
		$stud_id = $this->uri->segment(3);

		$data['title'] 			= 'Student Profile';
		$data['student'] 		= $this->module->table_where('student', array('stud_id' => $stud_id));
		$data['sibling'] 		= $this->module->table_where('sibling', array('stud_id' => $stud_id));
		$data['assessment'] 	= $this->module->table_where('assessment', array('stud_id' => $stud_id));
		$this->load->view('records/print_student_profile', $data);
	}


	public function payment_schedule(){
		$data['title'] 			= 'Payment Record';
		$data['sy_id']			= $this->module->get_active_sy();
		//$data['payment']		= $this->module->get_query("SELECT * FROM v_student_assessment WHERE as_mode <> 'Cash' AND sy_id = ".$sy_id." ORDER BY fullname");
		$this->load->view('payment/payment_schedule',$data);
	}


	/*public function get_payment_details(){
		$as_id 					= $this->uri->segment(3);
		$sy_id					= $this->module->get_active_sy();
		$data['payment'] 		= $this->module->get_query("SELECT * FROM v_student_assessment WHERE as_id = ".$as_id." AND sy_id = ".$sy_id." ");
		$data['fee_sched']   	= $this->module->table_where('v_fee_schedule', array('lvl_id' => $data['payment']->row('lvl_id'), 'fee_type' => $data['payment']->row('as_mode')));

		$this->load->view('payment/tbl_payment_sched', $data);
	}*/

	


	/*public function load_payment(){
		$sy_id				= $this->module->get_active_sy();
		$as_id 				= $this->uri->segment(3);
		$data['mode_res']	= $this->module->get_query("SELECT * FROM v_student_assessment WHERE  sy_id = ".$sy_id." AND as_id =".$as_id."  ORDER BY fullname");
		$this->load->view('payment/load_payment',$data);
	}*/


	public function get_section(){
		$txt_lvl 	= $this->uri->segment(3);
		$sy_id 		= $this->module->get_active_sy();
		$section 	= $this->module->get_query("SELECT * FROM v_sy_section WHERE lvl_id = ".$txt_lvl." AND sy_id =".$sy_id." ");

		foreach($section->result() as $r){
			echo '<option value="'.$r->sec_id.'">'.$r->sec_name.'</option>';
		}
	}

	public function get_subject_detail(){
		$id = $this->uri->segment(3);
		$result = $this->module->get_query("SELECT * FROM subject_detail WHERE sub_id = ".$id." ");

			echo '<option value="">SELECT</option>';
		foreach($result->result() as $r){
			echo '<option value="'.$r->subj_det_id.'">'.$r->subj_det_name.'</option>';
		}
	}

	/*public function get_payment_history(){
		$as_id 					= $this->uri->segment(3);
		$sy_id					= $this->module->get_active_sy();
		$data['installment'] 	= $this->module->table_where('installment_details', array('as_id' => $as_id, 'sy_id' => $sy_id));
		$this->load->view('payment/get_payment_history',$data);

	}*/

	public function create_payment(){

		$as_id  	= $this->input->post('as_id', true);
		$stud_id  	= $this->input->post('stud_id', true);

		$check = $this->module->table_where('installment_hdr', array('as_id' => $as_id, 'stud_id' => $stud_id ));

		if($check->num_rows() < 1 ){
			if($this->module->insert('installment_hdr', array('as_id' => $as_id, 'stud_id' => $stud_id ))){

				$inst_id  	= $this->db->insert_id();
				$data 		= $this->input->post(null,true);
		        foreach($data as $d => $k){

					if(strpos($d, 'soa')!== FALSE){
						$inst_det_month 		= empty($k["inst_det_month"])?'': $k["inst_det_month"];
						$inst_det_amount 		= empty($k["inst_det_amount"])?'': $k["inst_det_amount"];
						$inst_det_payment 		= empty($k["inst_det_payment"])?'': $k["inst_det_payment"];
						$inst_det_fine 			= empty($k["inst_det_fine"])?'': $k["inst_det_fine"];
						$inst_det_percentage 	= empty($k["inst_det_percentage"])?'': $k["inst_det_percentage"];
						$inst_det_partial 		= empty($k["inst_det_partial"])?'': $k["inst_det_partial"];
						$inst_det_date 			= empty($k["inst_det_date"])?'': $k["inst_det_date"];
						

						if(!empty($inst_det_month) ){
							$soa_data = array(
								"inst_id"				=> 	$inst_id,
								"inst_det_month" 		=>	strtolower($inst_det_month),
								"inst_det_amount" 		=>	floatval(str_replace(",","",$inst_det_amount))  ,
								"inst_det_payment" 		=>	floatval(str_replace(",","",$inst_det_payment))  ,
								"inst_det_partial" 		=>	floatval(str_replace(",","",$inst_det_partial)) ,
								"inst_det_percentage" 	=>	$inst_det_percentage,
								"inst_det_fine" 		=>	floatval(str_replace(",","",$inst_det_fine)) ,
								"inst_det_date" 		=>	date('Y-m-d',strtotime($inst_det_date))
							);

							if (!empty($soa_data)){
								$this->module->insert('installment_details', $soa_data);
							}
						}
					}//end day_out
				}//endforeach

			}
		}else{

		
			$inst_id  = $check->row('inst_id');
			
			if($this->module->delete('installment_details', array('inst_id' => $inst_id))){

				$data 		= $this->input->post(null,true);
		        foreach($data as $d => $k){

					if(strpos($d, 'soa')!== FALSE){
						$inst_det_month 		= empty($k["inst_det_month"])?'': $k["inst_det_month"];
						$inst_det_amount 		= empty($k["inst_det_amount"])?'': $k["inst_det_amount"];
						$inst_det_payment 		= empty($k["inst_det_payment"])?'': $k["inst_det_payment"];
						$inst_det_percentage 	= empty($k["inst_det_percentage"])?'': $k["inst_det_percentage"];
						$inst_det_fine 			= empty($k["inst_det_fine"])?'': $k["inst_det_fine"];
						$inst_det_partial 		= empty($k["inst_det_partial"])?'': $k["inst_det_partial"];
						$inst_det_date 			= empty($k["inst_det_date"])?'': $k["inst_det_date"];
						

						if(!empty($inst_det_month) ){
							$soa_data = array(
								"inst_id"				=> 	$inst_id,
								"inst_det_month" 		=>	strtolower($inst_det_month),
								"inst_det_amount" 		=>	floatval(str_replace(",","",$inst_det_amount))  ,
								"inst_det_payment" 		=>	floatval(str_replace(",","",$inst_det_payment))  ,
								"inst_det_partial" 		=>	floatval(str_replace(",","",$inst_det_partial)) ,
								"inst_det_percentage" 	=>	$inst_det_percentage,
								"inst_det_fine" 		=>	floatval(str_replace(",","",$inst_det_fine))  ,
								"inst_det_date" 		=>	date('Y-m-d',strtotime($inst_det_date))
							);

							if (!empty($soa_data)){
								$this->module->insert('installment_details', $soa_data);
							}
						}
					}//end day_out
				}//endforeach
			}
		}

		$this->module->cust_return(true,'Success',$as_id);

	}

	public function update_account_details(){
		$as_id = $this->uri->segment(3); 
		
		$payment 	= $this->module->get_query("SELECT * FROM v_student_assessment WHERE as_id = ".$as_id." ");
		$fee_sched  = $this->module->table_where('v_fee_schedule', array('lvl_id' => $payment->row('lvl_id'), 'fee_type' => $payment->row('as_mode')));


		$orig_as_tf 	= $fee_sched->row('fee_tf');
		$sib_discount 	= $payment->row('as_sib_discount');
		$as_reservation = $payment->row('as_reservation');
		$as_disc_tf		= $payment->row('as_disc_tf');
		$dept_name 		= $payment->row('dept_name');
		$discount 		= 0.10;
		$as_mode 		= $payment->row('as_mode');
		


		$msc_mo			= 300;
		$msc_quar		= 800;
		$msc_sem 		= 2400;

		$get_hdr 		= $this->module->get_query("SELECT inst_id from installment_hdr WHERE as_id = ".$as_id." ");
		$hdr_inst_id	= (empty($get_hdr->row('inst_id')) ? 0 : $get_hdr->row('inst_id') );
		$get_det 		= $this->module->get_query("SELECT SUM(inst_det_payment) AS det, SUM(inst_det_partial) as partial, SUM(inst_det_fine) as fine FROM installment_details WHERE inst_id = ".$hdr_inst_id." ");

		$total_amount_to_pay 	= 0;
		$discounted_tf 	= 0;
 
		if($sib_discount == 'Y'){

			if($as_mode == 'Monthly'){
				$discounted_tf 	= $orig_as_tf - (floatval($orig_as_tf) * $discount) + $msc_mo;
			}else if($as_mode == 'Quarterly'){
				$discounted_tf 	= $orig_as_tf - (floatval($orig_as_tf) * $discount) + $msc_quar;
			}else if($as_mode == 'Semestral'){
				$discounted_tf 	= $orig_as_tf - (floatval($orig_as_tf) * $discount) + $msc_sem;
			}
			
		}else{
			if($as_mode == 'Monthly'){
				$discounted_tf 	= $orig_as_tf  + $msc_mo;
			}else if($as_mode == 'Quarterly'){
				$discounted_tf 	= $orig_as_tf  + $msc_quar;
			}else if($as_mode == 'Semestral'){
				$discounted_tf 	= $orig_as_tf + $msc_sem;
			}
		}

		if($as_mode == 'Monthly'){
			$total_amount_to_pay 	= $discounted_tf * 8;
		}else if($as_mode == 'Quarterly'){
			$total_amount_to_pay 	= $discounted_tf * 3;
		}else if($as_mode == 'Semestral'){
			$total_amount_to_pay 	= $discounted_tf * 1;
		}

		$amount_to_pay = $total_amount_to_pay + $as_reservation + $as_disc_tf;


		$data  =  array(
				'as_id'			=> $as_id,
				'lvl_name'		=> $payment->row('lvl_name'),
				'amount_to_pay' => $amount_to_pay,
				'amount_paid' 	=> $as_disc_tf + $as_reservation + $get_det->row('det') + $get_det->row('partial'),
				'inst_det_fine' => $get_det->row('fine'),
				'sib_discount'	=> $sib_discount,
				'orig_tf' 		=> $orig_as_tf,
				'as_mode' 		=> $as_mode,
				'discounted_tf'	=> $discounted_tf,
				'dept_name'		=> $dept_name,
				'enrollment_pay'=> $payment->row('as_total')
		);

		//echo json_encode($data);
		$data['account'] 	= $data;
		$this->load->view('payment/tbl_account_details',$data);


	}

	public function get_soa(){
		$as_id  	= $this->uri->segment(3);
		$payment 	= $this->module->get_query("SELECT * FROM v_student_assessment WHERE as_id = ".$as_id." ");
		$fee_sched  = $this->module->table_where('v_fee_schedule', array('lvl_id' => $payment->row('lvl_id'), 'fee_type' => $payment->row('as_mode')));


		$fullname 		= $payment->row('fullname');
		$orig_as_tf 	= $fee_sched->row('fee_tf');
		$sib_discount 	= $payment->row('as_sib_discount');
		$as_reservation = $payment->row('as_reservation');
		$as_disc_tf		= $payment->row('as_disc_tf');
		$discount 		= 0.10;
		$as_mode 		= $payment->row('as_mode');
		$dept_name 		= $payment->row('dept_name');
		$discounted_tf 	= 0;

		$msc_mo			= 300;
		$msc_quar		= 800;
		$msc_sem 		= 2400;

		$get_hdr 		= $this->module->get_query("SELECT inst_id from installment_hdr WHERE as_id = ".$as_id." ");
		$hdr_inst_id	= (empty($get_hdr->row('inst_id')) ? 0 : $get_hdr->row('inst_id') );
		$get_det 		= $this->module->get_query("SELECT SUM(inst_det_payment) AS det, SUM(inst_det_partial) as partial, SUM(inst_det_fine) as fine FROM installment_details WHERE inst_id = ".$hdr_inst_id." ");
		//$det 			= $this->module->get_query("SELECT * FROM installment_details WHERE inst_id = ".$hdr_inst_id." ");

		$total_amount_to_pay 	= 0;
		

 
		if($dept_name == 'Pre-School'){

			if($sib_discount == 'Y'){

				if($as_mode == 'Monthly'){	
					$discounted_tf 	= $orig_as_tf - (floatval($orig_as_tf) * $discount);
				}else if($as_mode == 'Quarterly'){
					$discounted_tf 	= $orig_as_tf - (floatval($orig_as_tf) * $discount);
				}else if($as_mode == 'Semestral'){
					$discounted_tf 	= $orig_as_tf - (floatval($orig_as_tf) * $discount);
				}

			}else{
				$discounted_tf 	= $orig_as_tf;
			}

		}else{

			if($sib_discount == 'Y'){

				if($as_mode == 'Monthly'){	
					$discounted_tf 	= $orig_as_tf - (floatval($orig_as_tf) * $discount) + $msc_mo;
				}else if($as_mode == 'Quarterly'){
					$discounted_tf 	= $orig_as_tf - (floatval($orig_as_tf) * $discount) + $msc_quar;
				}else if($as_mode == 'Semestral'){
					$discounted_tf 	= $orig_as_tf - (floatval($orig_as_tf) * $discount) + $msc_sem;
				}

			}else{

				if($as_mode == 'Monthly'){
					$discounted_tf 	= $orig_as_tf + $msc_mo;
				}else if($as_mode == 'Quarterly'){
					$discounted_tf 	= $orig_as_tf + $msc_quar;
				}else if($as_mode == 'Semestral'){
					$discounted_tf 	= $orig_as_tf + $msc_sem;
				}


			}

		}

		if($as_mode == 'Monthly'){
			$total_amount_to_pay 	= $discounted_tf * 8;
		}else if($as_mode == 'Quarterly'){
			$total_amount_to_pay 	= $discounted_tf * 3;
		}else if($as_mode == 'Semestral'){
			$total_amount_to_pay 	= $discounted_tf * 1;
		}

		$amount_to_pay 	= $total_amount_to_pay + $as_reservation + $as_disc_tf;
		$amount_paid 	= $as_disc_tf + $as_reservation + $get_det->row('det') + $get_det->row('partial');


		$data  =  array(
				'fullname' 		=> $fullname,
				'as_id'			=> $as_id,
				'lvl_name'		=> $payment->row('lvl_name'),
				'amount_to_pay' => $amount_to_pay,
				'amount_paid' 	=> $amount_paid,
				'inst_det_fine' => $get_det->row('fine'),
				'sib_discount'	=> $sib_discount,
				'orig_tf' 		=> $orig_as_tf,
				'as_mode' 		=> $as_mode,
				'discounted_tf'	=> $discounted_tf,
				'dept_name'		=> $dept_name,
				'enrollment_pay'=> $payment->row('as_total')
		);

		$balance 	= number_format(($amount_to_pay - $amount_paid) + $get_det->row('fine'),2);
		$sy_id  	= $this->module->get_active_sy();
		$this->module->update('installment_hdr', array('inst_balance' => floatval(str_replace(",","",$balance)) , 'sy_id' => $sy_id), array('as_id' => $as_id));

		$data['computed_tf']		= $data;
		$data['assessment_detail'] 	= $payment;
		$this->load->view('payment/tbl_soa',$data);

		//echo json_encode($data);

	}

	public function delete_payment_history()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('installment_details', array('inst_det_id' => $id)))
		{
			return true;
		}
		
	}

	public function receivables(){
		$data['title'] 			= 'Receivables';
		$sy_id 					= $this->module->get_active_sy();
		$data['receivables']	= $this->module->get_query("SELECT stud.`stud_lastname`, stud.`stud_firstname`, stud.`stud_suffix`, inst.* FROM installment_hdr AS inst, student AS stud WHERE stud.`stud_id` = inst.`stud_id` AND inst_balance > 0 AND sy_id = ".$sy_id."  ORDER BY stud.`stud_lastname`");
		$data['total']			= $this->module->get_query("SELECT SUM(inst_balance) as total FROM installment_hdr AS inst, student AS stud WHERE stud.`stud_id` = inst.`stud_id` AND inst_balance > 0 AND sy_id = ".$sy_id."")->row('total');
		$this->load->view('payment/receivables', $data);
	}

	public function due_accounts(){
		$data['title'] 			= 'Due Accounts';
		$sy_id 					= $this->module->get_active_sy();
		$data['student']		= $this->module->get_query("SELECT *, SUM(inst_det_amount - inst_det_partial) as amount FROM v_due_accounts GROUP BY stud_id ORDER BY stud_lastname ");
		$data['due_account'] 	= $this->module->get_query("SELECT * FROM v_due_accounts ORDER BY stud_lastname ASC");
		$data['per_month']		= $this->module->get_query("SELECT inst_det_month, SUM(inst_det_amount - inst_det_partial) AS amount FROM v_due_accounts GROUP BY inst_det_month");
		$this->load->view('payment/due_accounts', $data);
	}





	public function new_student(){
		$data['title'] 		= 'New Student';
		$sy_id 				= $this->module->get_active_sy();
		$data['student'] 	= $this->module->get_query("SELECT * FROM v_student_enrollment_assessment WHERE sy_id = ".$sy_id." AND se_stud_type = 'N' ORDER BY stud_id DESC");
		$this->load->view('records/new_student', $data);
	}

	public function print_new_student(){
		$data['title'] 		= 'New Student';
		$data['student'] 	= $this->module->get_query("SELECT * FROM v_section_students WHERE /*stud_type = 'New Student' AND*/ se_stud_type = 'N' ORDER BY  stud_no, stud_lastname ASC");
		$this->load->view('records/print_new_student', $data);
	}

	public function excel_mode_payment(){
		$data['title'] 		= 'Student - Mode of Payment';
		$data['student'] 	= $this->module->get_query("SELECT * FROM v_section_students ORDER BY  sec_sort, stud_lastname ASC");
		$this->load->view('records/print_mode_payment', $data);
	}

	public function print_handedness(){
		$data['title'] 		= 'Handedness';
		$data['section']	= $this->module->get_query("SELECT * FROM section ORDER BY sec_sort ASC");
		$this->load->view('print_handedness', $data);
	}


	public function reservation(){

		if(!$this->input->is_ajax_request())
			{
				$data['title']			= "Reservation";
				$sy_id 					= $this->module->get_active_sy();
				$data['student']		= $this->module->get_query("SELECT * FROM student ");
				$data['school_year']	= $this->module->get_table('school_year');
				$sy_selected 			= $this->module->get_query("SELECT * FROM school_year WHERE sy_selected = 'Y' ")->row('sy_id');
				$data['reservation'] 	= $this->module->get_table('v_reservation');
				$data['section']		= $this->module->get_query("SELECT * FROM v_sy_section WHERE sy_selected = 'Y' ");
				$this->load->view('records/reservation', $data);
			}
		else{
				/*$stud_lastname		= preg_replace('/\s+/', '', $this->input->post('stud_lastname', true));
				$stud_firstname 	= preg_replace('/\s+/', '', $this->input->post('stud_firstname', true));
				$stud_middlename 	= preg_replace('/\s+/', '', $this->input->post('stud_middlename', true));*/

				$stud_lastname		= $this->input->post('stud_lastname', true);
				$stud_firstname 	= $this->input->post('stud_firstname', true);
				$stud_middlename 	= $this->input->post('stud_middlename', true);

				$fullname 		= ucwords(strtolower($stud_lastname.', '.$stud_firstname));
				$stud_id 		= $this->input->post('stud_id', true);
				$sy_id 			= $this->input->post('sy_id', true);
				$sy_id_new 		= $this->input->post('sy_id_new', true);
				$res_date 		= $this->input->post('res_date', true);
				$res_date_new 	= $this->input->post('res_date_new', true);
				$sec_id			= $this->input->post('sec_id', true);
				$sec_id_new		= $this->input->post('sec_id_new', true);

				$comp_sec_id = '';

				if(empty($sec_id)){
					$comp_sec_id = $sec_id_new;
				}else{
					$comp_sec_id = $sec_id;
				}


				$check_cnt  = $this->module->get_query("SELECT dept_name, sec_id, COUNT(*) AS cnt FROM v_reservation WHERE sy_selected = 'Y' AND sec_id = ".$comp_sec_id." ");
				$dept_name 	= $check_cnt->row('dept_name');
				$count 		= $check_cnt->row('cnt');

				

				if(!empty($stud_id)){
					//OLD STUDENT
					$check 		= $this->module->get_query("SELECT * FROM student_reservation WHERE sy_id = ".$sy_id." AND stud_id  = ".$stud_id." "); 

					$name =  $this->module->get_query("SELECT * FROM v_student_assessment WHERE stud_id =".$stud_id." ")->row('fullname');
					$data = array(
						'stud_id' 		=> $stud_id,
						'stud_type'		=> 'Old Student',
						'stud_fullname' => $name,
						'res_date'		=> date('Y-m-d', strtotime($res_date)) , /*date('Y-m-d')*/
						'sy_id' 		=> $sy_id,
						'sec_id' 		=> $sec_id
					);


					if($check->num_rows() < 1){
						
						if($dept_name == 'Pre-School') {

							if($count < 15){
								$this->module->public_insert('student_reservation', $data);
							} else{
								$this->module->my_return(false, 'This section is full.');
							}
							
						}else{
							if($count < 25){
								$this->module->public_insert('student_reservation', $data);
							} else{
								$this->module->my_return(false, 'This section is full.');
							}
						}


					}else{
						$this->module->my_return(false, 'Already <strong>reserved</strong> in this school year');
					}

				}else{
					//NEW STUDENT
					$check2 	= $this->module->get_query("SELECT * FROM student_reservation WHERE sy_id = ".$sy_id_new." AND stud_fullname LIKE '%".$fullname."%'");
					$cnt 		= $this->module->get_query("SELECT COUNT(*) as cnt FROM student_reservation ")->row('cnt');

					$data_new = array(
						'stud_type'		=> 'New Student',
						'stud_temp_id'	=> date('Ymd').$cnt,
						'stud_fullname' => $fullname,
						'res_date'		=> date('Y-m-d'),
						'sy_id' 		=> $sy_id_new,
						'sec_id' 		=> $sec_id_new,
						'res_date' 		=> $res_date_new
					);

					if($check2->num_rows() < 1){
						
						if($dept_name == 'Pre-School') {

							if($count < 15){
								$this->module->public_insert('student_reservation', $data_new);
							} else{
								$this->module->my_return(false, 'This section is full.');
							}
							
						}else{
							if($count < 25){
								$this->module->public_insert('student_reservation', $data_new);
							} else{
								$this->module->my_return(false, 'This section is full.');
							}
						}


					}else{
						$this->module->my_return(false, 'Already <strong>reserved</strong> in this school year');
					}
					
				}

				
				
				

		}
	}

	public function student_reservation(){
		if(!$this->input->is_ajax_request())
			{
				$data['title']			= "Student Reservation";
				$sy_id 					= $this->module->get_selected_sy();
				$data['student']		= $this->module->get_query("SELECT * FROM students ");
				$data['school_year']	= $this->module->get_table('school_year');
				$sy_selected 			= $this->module->get_query("SELECT * FROM school_year WHERE sy_selected = 'Y' ")->row('sy_id');
				$data['reservation'] 	= $this->module->table_where('v_student_class_list', array('sy_id' => $sy_id, 'sy_selected' => 'Y', 'cl_status' => 'Reserved') );
				//echo $this->db->last_query();
				$data['grade_level']	= $this->module->get_table('grade_level');
				$data['section']		= $this->module->get_query("SELECT * FROM v_sy_section WHERE sy_selected = 'Y' ORDER BY sec_sort ASC ");
				$data['department']		= $this->module->get_table('department');

				
				$data['reservation_cnt'] = $this->module->get_query("SELECT dept_id, dept_name, sec_id, lvl_id, lvl_name, sec_name, stud_type, COUNT(*) AS cnt FROM v_student_class_list WHERE sy_selected = 'Y' GROUP BY sec_id, stud_type ORDER BY sec_sort"); 

				$data['pending_student'] = $this->module->get_query("SELECT dept_id, dept_name, lvl_id, lvl_name,sec_id, sec_name,  COUNT(*) AS cnt FROM v_student_class_list WHERE stud_id NOT IN (SELECT stud_id FROM v_student_class_list WHERE sy_id = ".$sy_selected.") AND lvl_id <> 21 GROUP BY sec_id ORDER BY lvl_sort,sec_sort");

				$data['pending_student_list'] = $this->module->get_query("SELECT sy_name, dept_id, dept_name, lvl_id, lvl_name,sec_id, sec_name, stud_id, stud_lastname, stud_firstname FROM v_student_class_list WHERE stud_id NOT IN (SELECT stud_id FROM v_student_class_list WHERE sy_id = ".$sy_selected.") AND lvl_id <> 21 ORDER BY lvl_sort,sec_sort");

				/*if($check_department_department == 'Pre-School'){

					if($check_class_list_count->row('cnt') < 15){
						//OK
						$flag = 1;
					}else{
						$flag = 0;
					}
				}else{
					if($check_class_list_count->row('cnt') < 25){
						//OK
						$flag = 1;
					}else{
						$flag = 0;
					}
				}


				if($flag == 0){
					$this->module->my_return(false, '['.$check_department_department.'] No available slot for this section.');
				}else{
				}*/


				$this->load->view('records/student_reservation', $data);
			}
		else{

			$stud_type 			= $this->input->post('stud_type', true);
			$stud_lastname		= ucfirst(trim($this->input->post('stud_lastname', true)));
			$stud_firstname 	= ucfirst(trim($this->input->post('stud_firstname', true)));

			$stud_id 			= $this->input->post('stud_id', true);
			$sy_id 				= $this->input->post('sy_id', true);
			$res_date 			= $this->input->post('res_date', true);
			$sec_id				= $this->input->post('sec_id', true);
			$lvl_id				= $this->input->post('lvl_id', true);
			$stud_birthdate		= date('Y-m-d',strtotime($this->input->post('stud_birthdate', true)));
			$cl_remarks			= $this->input->post('cl_remarks', true);

			$check_student 		= $this->module->get_query("SELECT * FROM student_class_list WHERE sy_id = ".$sy_id." AND stud_birthdate = '".$stud_birthdate."' AND stud_lastname LIKE '%".$stud_lastname."%' AND stud_firstname LIKE '%".$stud_firstname."%' ");

			//echo $this->db->last_query();
			
			$flag = 0;
			
	
			if($check_student->num_rows() < 1 ){

				$check_class_list_count 		= $this->module->get_query("SELECT COUNT(*) as cnt FROM student_class_list WHERE sy_id = ".$sy_id." AND lvl_id =".$lvl_id." AND sec_id = ".$sec_id." ");
				$check_department_department 	= $this->module->get_query("SELECT * FROM v_sy_section WHERE sy_id = ".$sy_id." AND lvl_id =".$lvl_id." AND sec_id = ".$sec_id." ")->row('dept_name');

				if($check_department_department == 'Pre-School'){

					if($check_class_list_count->row('cnt') < 15){
						//OK
						$flag = 1;
					}else{
						$flag = 0;
					}
				}else{
					if($check_class_list_count->row('cnt') < 25){
						//OK
						$flag = 1;
					}else{
						$flag = 0;
					}
				}



				if($flag == 0){
					$this->module->my_return(false, '['.$check_department_department.'] No available slot for this section.');
				}else{

					if($stud_type == 'O'){
						//OLD STUDENT
						$student_data = array(
							'stud_id' 			=> $stud_id,
							'stud_type' 		=> $stud_type,
							'stud_lastname' 	=> $stud_lastname,
							'stud_firstname' 	=> $stud_firstname,
							'sy_id' 			=> $sy_id,
							'cl_is_reserved' 	=> 'Y', 
							'cl_date_reserved' 	=> $res_date,
							'sec_id' 			=> $sec_id,
							'lvl_id' 			=> $lvl_id,
							'stud_birthdate' 	=> $stud_birthdate,
							'cl_status'			=> 'Reserved',
							'cl_date'			=> date('Y-m-d'),
							'cl_remarks'		=> $cl_remarks
						);

						$this->module->public_insert('student_class_list', $student_data);
					}else{
						//NEW STUDENT
						
						$check_enrollement = $this->module->get_query("SELECT * FROM students WHERE stud_birthdate = '".$stud_birthdate."' AND stud_lastname LIKE '%".$stud_lastname."%' AND stud_firstname LIKE '%".$stud_firstname."%'");

						if($check_enrollement->num_rows() > 0 ){
							$stud_id = $check_enrollement->row('stud_id');
						}else{
							$stud_id = '';
						}

						

						$student_data = array(
							'stud_id' 			=> $stud_id,
							'stud_type' 		=> $stud_type,
							'stud_lastname' 	=> $stud_lastname,
							'stud_firstname' 	=> $stud_firstname,
							'sy_id' 			=> $sy_id,
							'cl_is_reserved' 	=> 'Y', 
							'cl_date_reserved' 	=> $res_date,
							'sec_id' 			=> $sec_id,
							'lvl_id' 			=> $lvl_id,
							'stud_birthdate' 	=> $stud_birthdate,
							'cl_status'			=> 'Reserved',
							'cl_date'			=> date('Y-m-d'),
							'cl_remarks'		=> $cl_remarks
						);

						$this->module->public_insert('student_class_list', $student_data);
						
					}


					//INSERT INTO COLLECTION TABLE
					$insert_collection = array(
						'sy_id'				=> $sy_id,
						'cl_id'				=> $this->db->insert_id(),
						'stud_id'			=> $stud_id,
						'stud_name'			=> $stud_lastname.', '.$stud_firstname,
						'coltype_id'		=> 2,
						'col_payment'		=> ($stud_type == 'N' ? 2000 : 1000 ),
						'col_payment_date'	=> $res_date,
						'col_type'			=> 'C'
					);

					$this->module->insert('collection', $insert_collection);

				}

				

			}else{
				$this->module->my_return(false, 'Learner was already reserved');
			}


			//echo $this->db->last_query();
			//print_r($_POST);

			/*if(!empty($stud_id)){
				//OLD STUDENT
				$check_student_data = array('sy_id' => $sy_id, 'sec_id' => $sec_id, 'stud_id' => $stud_id);

				if($check_student_data->num_rows() > 0 ){
					$this->module->my_return(false, 'Already <strong>reserved</strong> in this school year');
				}else{
					$insert_data = array(
						'stud_type'			=> 'O',
						'stud_id'			=> $stud_id,
						'stud_lastname'		=> $stud_lastname,
						'stud_firstname'	=> $stud_firstname,
						'lvl_id'			=> $lvl_id,
						'sec_id'			=> $sec_id,
						'sy_id'				=> $sy_id,
						'cl_is_reserved'	=> 'Y',
						'cl_date_reserved'	=> date('Y-m-d'),
						'cl_status'			=> 'Reserved'
					);

					$this->module->public_insert('student_class_list', $insert_data);
				}

			}else{
				//NEW STUDENT
				
			}*/
			

			//$fullname 		= ucwords(strtolower($stud_lastname.', '.$stud_firstname));
			//$sy_id_new 		= $this->input->post('sy_id_new', true);
			//$res_date_new 	= $this->input->post('res_date_new', true);
			//$sec_id_new		= $this->input->post('sec_id_new', true);
		}
	}


	public function delete_reservation()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('student_reservation', array('res_id' => $id)))
		{
			return true;
		}
		
	}


	public function daily_enrollment(){
		$data['title']		= "Daily Enrollment";
		$stud_reg_date 		= $this->uri->segment(3);
		$data['student'] 	= $this->module->get_query('SELECT * FROM v_student_assessment WHERE stud_reg_date = "'.$stud_reg_date.'" ');
		$this->load->view('records/daily_enrollment', $data);
	}

	public function daily_collection(){
		$data['title']		= "Daily Collection";
		$payment_date 		= $this->uri->segment(3);
		//$data['enrollment'] = $this->module->get_query("SELECT * FROM assessment WHERE DATE_FORMAT(as_date, '%Y-%m-%d') = '".$payment_date."' ");
		//$data['collection']   = $this->module->get_query("SELECT * FROM v_student_payment_record_tf WHERE DATE(tf_payment_date) = '".$payment_date."'ORDER BY spd_id ASC  ");
		$data['collection']   = $this->module->get_query("SELECT *, SUM(tf_amount_due) AS tf_amount_due, SUM(tf_fine_amount) AS tf_fine_amount, SUM(tf_fine_percentage) AS tf_fine_percentage, SUM(tf_sub_total) AS tf_sub_total, GROUP_CONCAT(tf_months SEPARATOR ', ') AS tf_months FROM v_student_payment_record_tf WHERE DATE(tf_payment_date) = '".$payment_date."' GROUP BY stud_id ORDER BY spd_id ASC ");
		$data['reservation']  = $this->module->get_query("SELECT * FROM v_student_class_list WHERE cl_date_reserved = '".$payment_date."' ORDER BY cl_date_reserved, stud_lastname, stud_firstname ASC");
		//echo $this->db->last_query();
		$this->load->view('records/daily_collection', $data);
	}

	public function schedule(){
		$data['title']		= "Schedule";
		$data['subject_assignment'] = $this->module->get_query(" SELECT * FROM v_subject_teacher_assignment WHERE sy_id =".$this->module->get_active_sy()." ORDER BY sec_sort, sub_sort ASC ");
		$this->load->view('records/schedule', $data);
	}


	public function class_record(){
		$data['title']		= "Class Record";
		$data['active_quarter'] = $this->module->table_where('quarter', array('qtr_active' => 'Y'))->row('qtr_code');
		$this->load->view('records/class_record', $data);
	}





	public function advisory_class(){
		$data['title']	= 'Advisory Class';

		$sec_id 		= $this->uri->segment(3);
		$sy_id 			= $this->module->get_active_sy();
		$data['sec_id']	= $sec_id;
		$qtr 			= $this->uri->segment(4);


		$section 			= $this->module->get_query("SELECT * FROM v_section WHERE sec_id =".$sec_id." ");
		$data['section']	= $section;
		$subject			= $this->module->getTableSort('subject', 'sub_sort');
		$data['subject']	= $subject;

		$student_data 		= array();
		$students			= $this->module->get_query("SELECT * FROM v_student_section_class_list WHERE sec_id = ".$sec_id."  GROUP BY stud_id ORDER BY stud_lastname, stud_firstname ASC "); 
		$quarter  			= $this->module->get_table('quarter');
		$data['quarters']	= $quarter;
		$qgrade 			= $this->module->table_where('v_quarterly_grade', array('sec_id' => $sec_id, 'sy_id' => $sy_id, 'qtr_code' => $qtr));


		foreach($students->result() as $st){
			$stud_id 			= $st->stud_id;
			$stud_lastname 		= $st->stud_lastname;
			$stud_firstname 	= $st->stud_firstname;
			$stud_middlename 	= $st->stud_middlename;
			$stud_name 			= '<strong>'.$stud_lastname.'</strong>, '.$stud_firstname.' '.(empty($stud_middlename) ? '' : substr($st->stud_middlename,0, 1).'.');

				$disq_grade 		= array();
				$subject_array 		= array();
				
				$total 				= 0;
				$average  			= 0;
				$total_cnt 			= 0;
				

				foreach($subject->result() as $sj){
					$sub_name   = $sj->sub_name;
		            $sub_id     = $sj->sub_id; 
		            $subject_detail = $this->module->table_where('subject_detail', array('sub_id' => $sub_id));

		            $check_subject 	= $this->module->table_where('subject_assignment', array('sub_id' => $sub_id, 'sec_id' => $sec_id));
		            if($check_subject->num_rows() > 0){

		            	$cnt 			= 0;
		            	$total_grade 	= 0;
		            	$quarterly_grade_array = array();	   	

		            	foreach($qgrade->result() as $qg){
							$qgh_id 			= $qg->qgh_id;
							$qgh_sub_id 		= $qg->sub_id;
							$qgh_subj_det_id 	= $qg->subj_det_id;
							$qgh_stud_id 		= $qg->stud_id;
							$qgh_grade 			= $qg->quarterly_grade;

							if( ($qgh_sub_id == $sub_id)   && ($stud_id == $qgh_stud_id)){
								$cnt ++;
								$total_grade += $qgh_grade;
								array_push($quarterly_grade_array, array('sub_id' => $qgh_sub_id, 'subj_det_id' => $qg->subj_det_id ,'grade' => $qgh_grade ));

							}

						}

						$total = round( $total_grade / ($cnt == 0 ? $cnt = 1 : $cnt = $cnt));

				       	array_push($subject_array, 
			            	array(
			            		'sub_id' 			=> $sub_id,
			            		'sub_name' 			=> $sub_name,
			            		'total_grade'		=> $total,
			            		'subject_details'	=> $quarterly_grade_array

			            	)
			       		);

			       		$average += $total; 
		            	$total_cnt  ++;
		            }

		          
		           
		             
		        }

			array_push($student_data, 
            	array(
            		'stud_id' 		=> $stud_id,
            		'stud_name' 	=> $stud_name,
            		'average' 		=> round(($average / ($total_cnt)),2),
            		'subjects'		=> $subject_array
            	)
            );

		}


		function rank($a, $b)
		  {
		    return strnatcmp($b['average'], $a['average']);
		  }

		  // sort alphabetically by name
		  uasort($student_data, 'rank');

		$data['total_cnt'] = $total_cnt; 
		$data['student_data'] = $student_data;

		//echo $this->db->last_query();

		$this->load->view('records/advisory_class', $data);
		
	}

	public function print_advisory_class(){

		$usr_type       = $this->session->userdata('usr_type');
		$tch_id         = $this->session->userdata('tch_id');
		$landing        = $this->session->userdata('landing');



			$data['title']	= 'Advisory Class';
			$sec_id 		= $this->uri->segment(3);
			$data['section']= $this->module->get_query("SELECT * FROM v_section WHERE sec_id =".$sec_id." ");
			$sy_id 			= $this->module->get_active_sy();
			$quarter 		= $this->module->table_where('quarter', array('qtr_active' => 'Y'))->row('qtr_code');
			$subject 		= $this->module->get_query("SELECT * FROM subject ORDER BY sub_sort ASC");
			$data['sec_id']	= $sec_id;

			$data['boys'] 		= $this->module->get_query("SELECT * FROM v_section_students WHERE sec_id = ".$sec_id."  GROUP BY stud_id ORDER BY stud_lastname, stud_firstname ASC "); 

			$student_score_data = array();
			$title 				= array();

			$grade_data = array();
			

			foreach($subject->result() as $s){
				$sub_id 	= $s->sub_id;
				$sub_name 	= $s->sub_name;
				$subj 		= $this->module->table_where('subject_assignment', array('sec_id' => $sec_id, 'sub_id' => $sub_id)); 
				$subj_det_name 	= '';

				$grade 				= array();
				$title_subj_det_name= array(); 

				if($subj->num_rows() > 0 ){
					foreach ($subj->result() as $l) {
						$subj_det_id 	= $l->subj_det_id;
						$subj_id 		= $l->subj_id;
						$get_name		= $this->module->table_where('subject_detail', array('subj_det_id' => $subj_det_id));
						

						if($get_name->num_rows() > 0){
							foreach($get_name->result() as $de){
								$subj_det_name = $de->subj_det_name;
								array_push($title_subj_det_name, array('subj_det_id' => $subj_det_id, 'subj_det_name' => $subj_det_name));
							}							
						}

						$grade_data = $this->module->compute_score($sub_id, $quarter, $subj_id , $sec_id, $sy_id, $subj_det_id);
						array_push($grade, array('subj_det_id' => $subj_det_id, 'subj_det_name' => $subj_det_name,  'grade' => $grade_data));
					}
				}


				array_push($title, array('sub_id' => $sub_id, 'sub_name' => $sub_name,  'subj_det_name' => $title_subj_det_name ));
				array_push($student_score_data, array('sub_id' => $sub_id, 'sub_name' => $sub_name, 'grade_data' => $grade));
				
			}

			
			$data['thead']		= $title;
			$data['student'] 	= $student_score_data;
			$this->load->view('grading/print_advisory_class', $data);
		
	}



	public function test_class(){
		$sec_id 			= $this->uri->segment(3);
		$data['student'] 	= $this->module->get_query("SELECT * FROM v_student_section WHERE sec_id = ".$sec_id."  ORDER BY stud_lastname, stud_firstname ASC ");
		$subject 			= $this->module->get_query("SELECT * FROM subject ORDER BY sub_sort ASC");

		echo '<pre>';

		foreach ($data['student']->result() as $r){
			echo '('.$r->stud_id.') '.$r->stud_lastname.', '.$r->stud_firstname.'<br/>';

			foreach($subject->result() as $s){
				$sub_id 	= $s->sub_id;
				$sub_name 	= $s->sub_name;
				$subj 		= $this->module->table_where('subject_assignment', array('sec_id' => $sec_id, 'sub_id' => $sub_id)); 
				$subj_det_name 	= '';

				$grade 				= array();
				$title_subj_det_name= array(); 

				if($subj->num_rows() > 0 ){
					foreach ($subj->result() as $l) {
						$subj_det_id 	= $l->subj_det_id;
						$subj_id 		= $l->subj_id;
						$get_name		= $this->module->table_where('subject_detail', array('subj_det_id' => $subj_det_id));
						

						if($get_name->num_rows() > 0){
							foreach($get_name->result() as $de){
								$subj_det_name = $de->subj_det_name;
								array_push($title_subj_det_name, array('subj_det_id' => $subj_det_id, 'subj_det_name' => $subj_det_name));
							}							
						}

						$grade_data = $this->module->compute_scores($sub_id, $quarter, $subj_id , $sec_id, $sy_id, $subj_det_id);
						array_push($grade, array('subj_det_id' => $subj_det_id, 'subj_det_name' => $subj_det_name,  'grade' => $grade_data));
					}
				}


				array_push($title, array('sub_id' => $sub_id, 'sub_name' => $sub_name,  'subj_det_name' => $title_subj_det_name ));
				array_push($student_score_data, array('sub_id' => $sub_id, 'sub_name' => $sub_name, 'grade_data' => $grade));
				
			}
		}

		$data['thead']		= $title;
		$data['student'] 	= $student_score_data;
		$this->load->view('grading/print_advisory_class', $data);
		
	}

	public function rating_sheet(){
		$data['title'] 	= 'Rating Sheet';
		$sy_id 			= $this->module->get_active_sy();
		$sec_id 		= $this->uri->segment(3);

		$data['sec_id']	= $sec_id;
		$section 			= $this->module->get_query("SELECT * FROM v_section WHERE sec_id =".$sec_id." ");
		$data['section']	= $section;
		$subject			= $this->module->getTableSort('subject', 'sub_sort');

		$student_data 		= array();
		$students			= $this->module->get_query("SELECT * FROM v_section_students WHERE sec_id = ".$sec_id."  GROUP BY stud_id ORDER BY stud_lastname, stud_firstname ASC "); 
		$quarter  			= $this->module->get_table('quarter');
		$data['quarters']	= $quarter;
		$qgrade 			= $this->module->table_where('v_quarterly_grade', array('sec_id' => $sec_id, 'sy_id' => $sy_id));

		foreach($students->result() as $st){
			$stud_id 			= $st->stud_id;
			$stud_lastname 		= $st->stud_lastname;
			$stud_firstname 	= $st->stud_firstname;
			$stud_middlename 	= $st->stud_middlename;
			$stud_name 			= '<strong>'.$stud_lastname.'</strong>, '.$stud_firstname.' '.(empty($stud_middlename) ? '' : substr($st->stud_middlename,0, 1).'.');

			
				$subject_array 		= array();

				foreach($subject->result() as $sj){
					$sub_name   = $sj->sub_name;
		            $sub_id     = $sj->sub_id; 

		            $subject_det    = $this->module->get_query('SELECT COUNT(*) as cnt FROM subject_detail WHERE sub_id = '.$sub_id.' ')->row('cnt');
		            $subject_detail = $this->module->table_where('subject_detail', array('sub_id' => $sub_id));

		            $check_subject 	= $this->module->table_where('subject_assignment', array('sub_id' => $sub_id, 'sec_id' => $sec_id));
		            if($check_subject->num_rows() > 0){

		            	

		            	$quarter_array = array();
		            	foreach($quarter->result() as $q){
							$qtr_code 			= $q->qtr_code;

							$quarterly_grade_array = array();

							$cnt = 0;
		            		$total_grade = 0;
							foreach($qgrade->result() as $qg){
								$qgh_id 			= $qg->qgh_id;
								$qgh_sub_id 		= $qg->sub_id;
								$qgh_subj_det_id 	= $qg->subj_det_id;
								$qgh_qtr_code 		= $qg->qtr_code;
								$qgh_stud_id 		= $qg->stud_id;
								$qgh_grade 			= $qg->quarterly_grade;

								if( ($qgh_qtr_code == $qtr_code) && ($qgh_sub_id == $sub_id)   && ($stud_id == $qgh_stud_id)){
									$cnt ++;
									$total_grade += $qgh_grade;

									array_push($quarterly_grade_array, array('sub_id' => $qgh_sub_id, 'subj_det_id' => $qg->subj_det_id ,'grade' => $qgh_grade  ));
									
								}


							}

							$total = round( $total_grade / ($cnt == 0 ? $cnt = 1 : $cnt = $cnt));
							array_push($quarter_array, array('qtr_code' => $qtr_code, 'final_grade' => $total, 'quarterly_grade' => $quarterly_grade_array) );

				       	}

				       	array_push($subject_array, 
			            	array(
			            		'sub_id' 			=> $sub_id,
			            		'sub_name' 			=> $sub_name,
			            		'quarter'			=> $quarter_array

			            	)
			       		);
		            }
		             
		        }

			array_push($student_data, 
            	array(
            		'stud_id' 	=> $stud_id,
            		'stud_name' => $stud_name,
            		'subjects'	=> $subject_array
            	)
            );


		}

		$data['student_data'] = $student_data;
		$this->load->view('records/rating_sheet', $data);

	}


	

	
	public function subject_excellence(){

		$data['title'] 	= 'Subject Excellence';
		$sy_id 			= $this->module->get_active_sy();
		$sec_id 		= $this->uri->segment(3);
		$sub_id 		= $this->uri->segment(4);
		$data['sec_id']	= $sec_id;
		$data['sub_id'] = $sub_id;

		$section 			= $this->module->get_query("SELECT * FROM v_section WHERE sec_id =".$sec_id." ");
		$data['section']	= $section;
		$subject			= $this->module->getTableSort('subject', 'sub_sort');

		$student_data 		= array();
		$students			= $this->module->get_query("SELECT * FROM v_section_students WHERE sec_id = ".$sec_id."  GROUP BY stud_id ORDER BY stud_lastname, stud_firstname ASC "); 
		$quarter  			= $this->module->get_table('quarter');
		$data['quarters']	= $quarter;
		$qgrade 			= $this->module->table_where('v_quarterly_grade', array('sec_id' => $sec_id, 'sy_id' => $sy_id, 'sub_id' => $sub_id));



		foreach($students->result() as $st){
			$stud_id 			= $st->stud_id;
			$stud_lastname 		= $st->stud_lastname;
			$stud_firstname 	= $st->stud_firstname;
			$stud_middlename 	= $st->stud_middlename;
			$stud_name 			= '<strong>'.$stud_lastname.'</strong>, '.$stud_firstname.' '.(empty($stud_middlename) ? '' : substr($st->stud_middlename,0, 1).'.');

			
				$subject_array 		= array();

				foreach($subject->result() as $sj){
					$sub_name   = $sj->sub_name;
		            $sub_id     = $sj->sub_id; 

		            $subject_det    = $this->module->get_query('SELECT COUNT(*) as cnt FROM subject_detail WHERE sub_id = '.$sub_id.' ')->row('cnt');
		            $subject_detail = $this->module->table_where('subject_detail', array('sub_id' => $sub_id));

		            $check_subject 	= $this->module->table_where('subject_assignment', array('sub_id' => $sub_id, 'sec_id' => $sec_id));
		            if($check_subject->num_rows() > 0){

		            	

		            	$quarter_array = array();
		            	foreach($quarter->result() as $q){
							$qtr_code 			= $q->qtr_code;

							$quarterly_grade_array = array();

							$cnt = 0;
		            		$total_grade = 0;
							foreach($qgrade->result() as $qg){
								$qgh_id 			= $qg->qgh_id;
								$qgh_sub_id 		= $qg->sub_id;
								$qgh_subj_det_id 	= $qg->subj_det_id;
								$qgh_qtr_code 		= $qg->qtr_code;
								$qgh_stud_id 		= $qg->stud_id;
								$qgh_grade 			= $qg->quarterly_grade;

								if( ($qgh_qtr_code == $qtr_code) && ($qgh_sub_id == $sub_id)   && ($stud_id == $qgh_stud_id)){
									$cnt ++;
									$total_grade += $qgh_grade;

									array_push($quarterly_grade_array, array('sub_id' => $qgh_sub_id, 'subj_det_id' => $qg->subj_det_id ,'grade' => $qgh_grade  ));
									
								}


							}

							$total = round( $total_grade / ($cnt == 0 ? $cnt = 1 : $cnt = $cnt));
							array_push($quarter_array, array('qtr_code' => $qtr_code, 'final_grade' => $total, 'quarterly_grade' => $quarterly_grade_array) );

				       	}

				       	array_push($subject_array, 
			            	array(
			            		'sub_id' 			=> $sub_id,
			            		'sub_name' 			=> $sub_name,
			            		'quarter'			=> $quarter_array

			            	)
			       		);
		            }
		             
		        }

			array_push($student_data, 
            	array(
            		'stud_id' 	=> $stud_id,
            		'stud_name' => $stud_name,
            		'subjects'	=> $subject_array
            	)
            );


		}

		$data['student_data'] = $student_data;
		$this->load->view('records/subject_excellence', $data);

	}


	public function get_data(){
		set_time_limit(0); //removes time limit for script execution
		ignore_User_Abort(True); //disable automatic script exit if user disconnects. you can set it to false if you want the script to stop executing when user exits. But its better to exit the script manually if you want to save some data or make some other changes.

		while(!connection_aborted())//this function checks if user is online.
		{

		    if(True)//here check if an update is available or not. If its available echo it and exit the script so that browser will recieve a complete response (status code 200)
		    {
		        
		    	$this->get_assessment();
		    	//
		    	//echo date('Y-m-d H:i:s');
		        ob_get_flush();
		        flush();//if it sees that user is offline (fails to send response) then it terminates the script if ignore_User_About is not set to True. Here it will ignore the failed response as its set to True.
		        exit;
		    }
		    else
		    {
		        sleep(1);//wait for 1 second before checking for update and finding out if user is online or not.
		    }
		}
	}



	public function collection_type(){

		if(!$this->input->is_ajax_request())
			{
				$data['title'] = 'Collection Type';
				$data['collection_type'] = $this->module->get_table('collection_type');
				$this->load->view('configuration/collection_type', $data);
			}else{
				$this->form_validation->set_rules('coltype_desc', 'Description', 'trim|required|is_unique[collection_type.coltype_desc]');
				$this->form_validation->set_rules('coltype_sort', 'Sort Order', 'trim|required');

				if ($this->form_validation->run() == FALSE)
	                {
	                	$this->module->my_return(false, validation_errors());
	                }
	            else
	                {
	                	$data = array(
	                		'coltype_desc' 	=> $this->input->post('coltype_desc', true),
	                		'coltype_sort' 	=> $this->input->post('coltype_sort', true)
	                	);

	                	$this->module->public_insert('collection_type', $data);
	                }

			}

	}


	public function delete_collection_type()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('collection_type', array('coltype_id' => $id)))
		{
			return true;
		}
		
	}


	

	public function change_section(){

		$cl_id 	= $this->input->post('cl_id', true);
		$lvl_id = $this->input->post('lvl_id', true);
		$sec_id = $this->input->post('sec_id', true);

		$stud_id 	= $this->input->post('stud_id', true);
		$dept_name 	= $this->input->post('dept_name', true);
		$sy_id 		= $this->module->get_active_sy();  

		if(empty($cl_id) || empty($sec_id) ){
			$this->module->my_return('false', 'Please select section');
		}else{
			$count = $this->module->get_query("SELECT COUNT(*) as cnt FROM student_class_list WHERE sec_id = ".$sec_id." ")->row('cnt');

			if($dept_name == 'Pre-School'){
				if($count <=15){
					$this->module->public_update('student_class_list', array('lvl_id' => $lvl_id, 'sec_id' => $sec_id), array('cl_id' => $cl_id));

					$this->module->update('student_enrollment', array('lvl_id' => $lvl_id, 'sec_id' => $sec_id), array('sy_id' => $sy_id, 'stud_id' => $stud_id));
					$this->module->update('student_assessment', array('lvl_id' => $lvl_id, 'sec_id' => $sec_id), array('sy_id' => $sy_id, 'stud_id' => $stud_id));
				}else{
					$this->module->my_return('false', 'Maximum numebr of student reached. (15 Pre-School)');
				}

			}else{
				if($count <=25){
					$this->module->public_update('student_class_list', array('lvl_id' => $lvl_id, 'sec_id' => $sec_id), array('cl_id' => $cl_id));

					$this->module->update('student_enrollment', array('lvl_id' => $lvl_id, 'sec_id' => $sec_id), array('sy_id' => $sy_id, 'stud_id' => $stud_id));
					$this->module->update('student_assessment', array('lvl_id' => $lvl_id, 'sec_id' => $sec_id), array('sy_id' => $sy_id, 'stud_id' => $stud_id));

				}else{
					$this->module->my_return('false', 'Maximum numebr of student reached. (25 Grade School)');
				}
			}
			
		}
	}

	public function change_stud_section(){
		$sy_id 		= $this->uri->segment(4);
		$cl_id 		= $this->uri->segment(3);

		$data['stud_data'] = $this->module->table_where('v_student_class_list', array('sy_id' => $sy_id, 'cl_id' => $cl_id));
		$data['level']		= $this->module->get_table('grade_level');
		$this->load->view('records/tbl_change_section', $data);
	}

	public function change_reservation_section(){
		
		$sy_id 	= $this->input->post('sy_id', true);
		$cl_id 	= $this->input->post('cl_id', true);
		$lvl_id = $this->input->post('lvl_id', true);
		$sec_id = $this->input->post('sec_id', true);

		$cnt 		= 0;
		$dept_max 	= 0;

		$count = $this->module->get_query("SELECT COUNT(*) as cnt, dept_max FROM v_student_class_list WHERE sec_id = ".$sec_id." ");

		if($count->num_rows() > 0 ){
			$cnt 		= $count->row('cnt');
			$dept_max	= $count->row('dept_max');
		}


		if($cnt <= $dept_max){

			$update_data = array(
				'lvl_id' 	=> $lvl_id,
				'sec_id' 	=> $sec_id
			);

			$this->module->public_update('student_class_list', $update_data, array('sy_id' => $sy_id, 'cl_id' => $cl_id));

		}else{
			echo 'di pwede';
			$this->module->my_return('false', 'Maximum numebr of student reached');
		}


	}

	

	public function get_lvl_section(){
		$lvl_id 	= $this->uri->segment(3);
		$sec_id  	= $this->uri->segment(4);
		$sy_id 		= $this->module->get_active_sy();

		$get_section = $this->module->get_query( "SELECT * FROM v_sy_section WHERE lvl_id = ".$lvl_id." AND sy_id = ".$sy_id." ORDER BY sec_sort ASC " );

		foreach ($get_section->result() as $v) {
			$vsec_id = $v->sec_id; 

			if($vsec_id == $sec_id){
				echo "<option selected value=".$v->sec_id." >".$v->sec_name."</option>";
			}else{
				echo "<option value=".$v->sec_id." >".$v->sec_name."</option>";
			}
			
		}

	}

	public function generate_class_list_reserved(){
		date_default_timezone_set('Asia/Manila');

		$reserved = $this->module->table_where('student_reservation', array('sy_id' => $this->module->get_active_sy()));

		foreach($reserved->result() as $r){
			$stud_fullname 		= $r->stud_fullname;
			$stud_id 			= $r->stud_id;
			$stud_type  		= $r->stud_type;
			$sy_id 				= $r->sy_id;
			$sec_id 			= $r->sec_id;
			$lvl_id				= $this->module->table_where('v_sy_section', array('sy_id' => $sy_id, 'sec_id' => $sec_id))->row('lvl_id');
			$cl_date_reserved 	= $r->res_date;

			if($stud_type == 'New Student'){
				$stud_type = 'N';
			}else{
				$stud_type = 'O';
			}

			$stud_name 		= preg_split ("/,/", $stud_fullname);
			$stud_lastname 	= trim(preg_replace('/\s+/', ' ',$stud_name[0]));
			$stud_firstname = trim(preg_replace('/\s+/', ' ',$stud_name[1]));

			$stud_data = array(
				'stud_id' 			=> $stud_id,
				'stud_lastname' 	=> $stud_lastname,
				'stud_firstname' 	=> $stud_firstname,
				'stud_type' 		=> $stud_type,
				'lvl_id' 			=> $lvl_id,
				'sec_id' 			=> $sec_id,
				'sy_id' 			=> $sy_id,
				'cl_status'			=> 'Reserved',
				'cl_is_reserved'	=> 'Y',
				'cl_date_reserved' 	=> $cl_date_reserved,
				'cl_date'			=> date('Y-m-d H:i:s')

			);




			$check = $this->module->get_query("SELECT * FROM student_class_list WHERE stud_lastname LIKE '%".$stud_lastname."%'  AND  stud_firstname LIKE '%".$stud_firstname."%' ");

			if($check->num_rows() > 0 ){
				echo '<br/>update';
				$this->module->update('student_class_list', $stud_data,  array('stud_id' => $stud_id, 'sy_id' => $sy_id));
			}else{
				echo '<br/>insert';

				$stud_id = $this->module->get_query("SELECT * FROM students WHERE stud_lastname LIKE '%".$stud_lastname."%'  AND  stud_firstname LIKE '%".$stud_firstname."%'");
				
				if($stud_id->num_rows() > 0){
					$sstud_id = $stud_id->row('stud_id');
					$stud_fullname = $stud_lastname.', '.$stud_firstname;
					$this->module->get_query("UPDATE student_reservation SET stud_id = ".$sstud_id." WHERE stud_fullname LIKE '%".$stud_fullname."%' AND sy_id = 2 ");
				}
				

				$this->module->insert('student_class_list', $stud_data);
			}

			
		}

		//echo 'Done';

	}

	public function generate_class_list_enrolled(){
		

		date_default_timezone_set('Asia/Manila');
		$enrolled = $this->module->table_where('v_student_enrollment', array('sy_id' => $this->module->get_active_sy()));

		foreach($enrolled->result() as $r){
			$stud_type 			= $r->se_stud_type;
			$stud_id 			= $r->stud_id;
			$stud_lastname 		= $r->stud_lastname;
			$stud_firstname 	= $r->stud_firstname;
			$sec_id 			= $r->sec_id;
			$lvl_id 			= $r->lvl_id;
			$sy_id 				= $r->sy_id;



			$update = $this->module->table_where('v_student_enrollment', array('sy_id' => $sy_id, 'lvl_id' => $lvl_id, 'sec_id' => $sec_id, 'stud_id' => $stud_id, 'se_status' => 'Enrolled'));

			foreach($update->result() as $s){
				$check = $this->module->get_query("SELECT * FROM student_class_list WHERE stud_lastname LIKE '%".$s->stud_lastname."%' AND stud_firstname LIKE '%".$s->stud_firstname."%' AND sy_id = ".$sy_id." ");
				
				if($check->num_rows() < 1 ){
					$stud_data = array(
						'stud_id' 			=> $stud_id,
						'stud_lastname' 	=> $stud_lastname,
						'stud_firstname' 	=> $stud_firstname,
						'stud_type' 		=> $stud_type,
						'lvl_id' 			=> $lvl_id,
						'sec_id' 			=> $sec_id,
						'sy_id' 			=> $sy_id,
						'cl_is_reserved'	=> 'N',
						'cl_status'			=> 'Enrolled',
						'cl_date'			=> date('Y-m-d')
					);

					$this->module->insert('student_class_list', $stud_data);

				}else{

					$stud_data = array(
						'lvl_id' 			=> $lvl_id,
						'sec_id' 			=> $sec_id,
						'sy_id' 			=> $sy_id,
						'cl_status'			=> 'Enrolled',
						'cl_date'			=> date('Y-m-d')
					);

					$this->module->update('student_class_list', $stud_data, array('stud_id' => $stud_id) );
				}

				echo '<pre>';
				print_r($stud_data);
				echo '</pre>';

			}

		}
	}


	public function update_cash_payment(){

		$cash = $this->module->table_where('student_assessment_payment', array('sap_payment_type' => 'Check'));

		foreach($cash->result() as $r){

			$sap_id 			= $r->sap_id;
			$sap_check_payment 	= $r->sap_total_payment;

			$cash_data = array('sap_check_payment' => $sap_check_payment, 'sap_cash_payment' => 0);

			$this->module->update('student_assessment_payment',$cash_data, array('sap_id' => $sap_id) );
		}
	}

	public function direct_enroll_student(){
		$cl_id 				= $this->input->post('cl_id', true);
		$cl_status 			= $this->input->post('cl_status', true);
		$cl_date_enrolled 	= $this->input->post('cl_date_enrolled', true);

		$this->module->public_update('student_class_list', array('cl_status' => $cl_status, 'cl_date_enrolled' => $cl_date_enrolled), array('cl_id' => $cl_id) );

	}



	public function lov()
	{
		if(!$this->input->is_ajax_request())
			{
				$sy_id 					= $this->module->get_active_sy();
				$data['title']			= "Learners Observed Values";
				$data['lov_core'] 		= $this->module->getTableSort('lov_core_values', 'cv_sort');
				$data['lov_bs'] 		= $this->module->getTableSort('v_lov_bs', 'bs_id, cv_sort');
				$data['lov_indicator'] 	= $this->module->getTableSort('v_lov_indicator', 'indc_sort, bs_id, cv_sort');
				//$data['subject_assign'] = $this->module->get_query("SELECT * FROM v_subject WHERE sy_id =".$sy_id." ");
				$this->load->view('configuration/lov', $data);
			}
		else
		{
			/*$this->form_validation->set_rules('sub_name', 'Subject Name', 'trim|required');

			if ($this->form_validation->run() == FALSE)
                {
                	$this->module->my_return(false, validation_errors());
                }
            else
                {
					$sub_name		= $this->input->post('sub_name', true);
					$sub_sort		= $this->input->post('sub_sort', true);

					$this->module->public_insert('subject', array('sub_name' => $sub_name, 'sub_sort' => $sub_sort ));
			}	*/	
		}

	}

	public function lov_indicator(){

		$this->form_validation->set_rules('cv_id', 'Core Value', 'trim|required');
		$this->form_validation->set_rules('bs_id', 'Behavior Statement', 'trim|required');
		$this->form_validation->set_rules('indc_description', 'Indicator', 'trim|required');
		$this->form_validation->set_rules('indc_sort', 'Sort', 'trim|required');

		if ($this->form_validation->run() == FALSE)
            {
            	$this->module->my_return(false, validation_errors());
            }
        else
            {
            	$cv_id 				= $this->input->post('cv_id', true);
            	$bs_id 				= $this->input->post('bs_id', true);
            	$indc_description 	= $this->input->post('indc_description', true);
            	$indc_sort 			= $this->input->post('indc_sort', true);

            	$data = array(
            		'cv_id' 			=> $cv_id,
            		'bs_id'				=> $bs_id,
            		'indc_description'	=> $indc_description,
            		'indc_sort'			=> $indc_sort
             	);

            	$this->module->public_insert('lov_indicator', $data);

            }
	}


	public function get_bs(){
		$cv_id 		= $this->uri->segment(3);
		$bs 		= $this->module->table_where('lov_behavior_statement', array('cv_id' => $cv_id));

		foreach($bs->result() as $r){
			echo '<option value="'.$r->bs_id.'">'.$r->bs_description.'</option>';
		}
	}



	public function get_reserve_class_list(){
		$sec_id 			= $this->uri->segment(3);
		$data['class_list'] = $this->module->get_query("SELECT * FROM v_student_class_list WHERE sec_id = ".$sec_id." ORDER BY stud_lastname, stud_firstname, cl_date_reserved ASC ");
		$data['dept_max']	= $this->module->table_where('v_sy_section', array('sec_id' => $sec_id));
		$this->load->view('records/tbl_reserve_class_list', $data);

	}

	public function get_reserve_class_list_old(){
		$sec_id 			= $this->uri->segment(3);
		$sy_selected 		= $this->module->get_active_sy_selected();
		$data['class_list'] = $this->module->get_query("SELECT sy_name, dept_id, dept_name, lvl_id, lvl_name,sec_id, sec_name, stud_id, stud_lastname, stud_firstname FROM v_student_class_list WHERE sec_id = ".$sec_id." AND stud_id NOT IN (SELECT stud_id FROM v_student_class_list WHERE sy_id = ".$sy_selected.") AND lvl_id <> 21 ORDER BY stud_lastname ");
		$this->load->view('records/tbl_reserve_class_list_old', $data);

	}

	/*$data['pending_student_list'] = $this->module->get_query("SELECT sy_name, dept_id, dept_name, lvl_id, lvl_name,sec_id, sec_name, stud_id, stud_lastname, stud_firstname FROM v_student_class_list WHERE stud_id NOT IN (SELECT stud_id FROM v_student_class_list WHERE sy_id = ".$sy_selected.") AND lvl_id <> 21 ORDER BY lvl_sort,sec_sort");*/


	



	public function preschool_upload_grades(){
		$data['title']			= "Upload Preschool Grades";
		$sy_id 					= $this->module->get_active_sy();
		$data['ps_section'] 	= $this->module->table_where('v_sy_section', array('sy_id' => $sy_id, 'dept_name' => 'Pre-School'));
		$data['ps_school_year'] = $this->module->get_query("SELECT * FROM school_year ORDER BY sy_id");
		$data['count']			= $this->module->get_query("SELECT  sec_id, COUNT(*) as cnt FROM portal_ps_grade GROUP BY sec_id, sy_id ");

		//echo $this->db->last_query();

		$this->load->view('records/preschool_upload_grades', $data);
	}

	public function view_ps_section(){
		$data['title']			= "Upload Preschool Grades";
		$sec_id 				= $this->uri->segment(3);
		$sy_id 					= empty($this->uri->segment(4)) ? $this->module->get_active_sy() : $this->uri->segment(4);

		$data['students'] 		= $this->module->get_query("SELECT * FROM v_section_students WHERE sy_id = ".$sy_id." AND sec_id = ".$sec_id." ORDER BY stud_lastname, stud_firstname ASC ");
		$data['ps_school_year'] = $this->module->get_query("SELECT * FROM school_year ORDER BY sy_id");
		$data['ps_grade'] 		= $this->module->get_query("SELECT * FROM v_portal_ps_student WHERE sy_id = ".$sy_id." AND sec_id = ".$sec_id." ORDER BY stud_lastname, stud_firstname ");
		//$data['stud_section']

		$this->load->view('records/view_ps_section', $data);
	}

	/*public function view_ps_student(){
		$sec_id = $this->uri->segment(3);
		$sy_id 	= $this->uri->segment(4);

		$data['section'] = $this->module->table_where('v_sy_section', array('sy_id' => $sy_id, 'sec_id' => $sec_id));
		$data['students'] = $this->module->get_query("SELECT * FROM v_section_students WHERE sy_id = ".$sy_id." AND sec_id = ".$sec_id." ORDER BY stud_lastname, stud_firstname ASC ");
		$this->load->view('records/ps_view_student', $data);

	}

	public function load_ps_student(){
		$sec_id = $this->uri->segment(3);
		$sy_id 	= $this->uri->segment(4);

		$students = $this->module->get_query("SELECT * FROM v_section_students WHERE sy_id = ".$sy_id." AND sec_id = ".$sec_id." ORDER BY stud_lastname, stud_firstname ASC ");

		$stud = '';

		foreach($students->result() as $r){
			//$stud_name = $sy_id.'_'.$r->stud_lastname.$r->stud_firstname;
			$stud_name = $r->stud_lastname.', '.$r->stud_firstname.' '.$r->stud_suffix.' '.(empty($r->stud_middlename) ? '' : substr($r->stud_middlename,0, 1).'.');
			echo '<option value="'.$r->stud_id.'"> '.$stud_name.'</option>'; 
		}


	}*/

	public function upload_grade(){

		//$stud_id 	= $this->input->post('stud_id', true);
		$sy_id		= $this->input->post('sy_id', true);
		$sec_id		= $this->input->post('sec_id', true);

		$err_msg	= array();
		$suc_msg 	= array();

	 
	      $data = array();

	      // Count total files
	      $countfiles = count($_FILES['files']['name']);
	      /*$img_name = '';*/
	 
	      // Looping all files
	      for($i=0;$i<$countfiles;$i++){


	 
	        if(!empty($_FILES['files']['name'][$i])){

		          // Define new $_FILES array - $_FILES['file']
		          $_FILES['file']['name'] 		= $_FILES['files']['name'][$i];
		          $_FILES['file']['type'] 		= $_FILES['files']['type'][$i];
		          $_FILES['file']['tmp_name'] 	= $_FILES['files']['tmp_name'][$i];
		          $_FILES['file']['error'] 		= $_FILES['files']['error'][$i];
		          $_FILES['file']['size'] 		= $_FILES['files']['size'][$i];

		          $img_name = $sy_id.'_'.$_FILES['files']['name'][$i];

		          $folder_name = 'asset/uploads/PS Grades/'.$sy_id.'/'.$sec_id;

		          	if (!is_dir($folder_name)) {
					    mkdir('asset/uploads/PS Grades/' . $sy_id.'/'.$sec_id, 0777, TRUE);
					}


		          // Set preference
		          $config['upload_path'] 	= $folder_name; 
		          $config['allowed_types'] 	= 'jpg|jpeg|png|gif';
		          $config['max_size'] 		= '5000'; // max_size in kb
		          $config['remove_spaces']	= TRUE;
		          $config['overwrite']		= TRUE;
		          /*$config['file_name'] 		= $img_name;*/

		          $this->load->library('upload',$config); 


		          //echo($img_name);
		          //echo '<br/>';
		 
		          // File upload
		          if($this->upload->do_upload('file')){

		            // Get data about the file
		            $uploadData = $this->upload->data();
		            $filename = $uploadData['file_name'];

		            // Initialize array
		            //$data['filenames'][] = $filename;
		            array_push($suc_msg, $filename);

		          }else{
		        	array_push($err_msg, $this->upload->display_errors());
		          }
	        }
	 
	      }

	      if(empty($err_msg) ){

	      	$this->session->set_userdata('temp_upload', $suc_msg);

	      	$this->module->cust_return(true, 'Upload Success ['.count($suc_msg).']',$sec_id.'/'.$sy_id);
	      }else{
	      	$this->module->my_return(false, 'Error ['.count($err_msg).']');
	      }


	      //echo '<br/>';
		  //print_r($this->session->userdata('temp_upload'));


	    /*print_r($err_msg);
		echo '<br/>';
		print_r($suc_msg);*/
		
	}

	public function delete_ps_grade()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('portal_ps_grade', array('psg_id' => $id)))
		{
			return true;
		}else{
			return false;
		}
		
	}




	public function load_ps_section(){
		$sec_id = $this->uri->segment(3);
		$sy_id 	= $this->uri->segment(4);

		$data['sy_id']		= $sy_id;
		$data['sec_id']		= $sec_id;
		$data['student'] 	= $this->module->get_query("SELECT * FROM v_section_students WHERE sy_id = ".$sy_id." AND sec_id = ".$sec_id." ORDER BY stud_lastname, stud_firstname ASC ");

		$this->load->view('records/tbl_ps_section', $data);

	}

	public function save_ps_grade(){
		$sy_id 	= $this->input->post('sy_id', true);
		$sec_id = $this->input->post('sec_id', true);

		
		$stud_data  = array();
		$check_data = array();

		foreach ($_POST['stud_id'] as $k => $v){
	        //echo  $v.'<br/>';
	        foreach($_POST['stud_img'] as $c =>$b){
	        	if($k==$c){

	        		$save = array(
	        			'sy_id' 	=> $sy_id,
	        			'sec_id' 	=> $sec_id,
	        			'stud_id' 	=> $v, 
	        			'psg_grade' => $b
	        		);

	        		$check_data = array(
	        			'sy_id' 	=> $sy_id,
	        			'sec_id' 	=> $sec_id,
	        			'stud_id' 	=> $v
	        		);

	        		$check = $this->module->table_where('portal_ps_grade', $check_data);

	        		if($check->num_rows() >= 1){
	        			//update
	        			$psg_id = $check->row('psg_id');
	        			$this->module->delete('portal_ps_grade',array('psg_id' => $psg_id));

	        			//$this->module->update('portal_ps_grade', $save, array('psg_id' => $psg_id));
	        		}

	        		$this->module->insert('portal_ps_grade', $save);
	        	}
	        }
	    }

	    $this->session->unset_userdata('temp_upload');
	    $this->module->my_return(true, 'Success');


	    /*echo '<pre>';
	    print_r($check_data);*/

	    //$check = $this->module->table_where('portal_ps_grade', $check_data);

	    //echo $this->db->last_query();

	    /*if($check->num_rows() > 0 ){
	    	$this->module->my_return(false, 'Cant save to database');
	    	//$this->module->delete('portal_ps_grade', $check_data);
	    }else{
	    	$this->module->my_return(true, 'go');
	    }*/



	    /*if($this->module->batch_insert('portal_ps_grade', $stud_data)){
	    	$this->session->unset_userdata('temp_upload');
	    }else{
	    	$this->module->my_return(false, 'Cant save to database');
	    }*/



		/*$data 	= $this->input->post(null,true);
        foreach($data as $d => $k){

			if(strpos($d, 'stud_img') <> FALSE){
				$img_name 	= empty($k["stud_img"])?'': $k["stud_img"];

				echo $stud_img;
			}
		}*/


	}

	

	

	
}