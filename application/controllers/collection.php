<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Collection extends CI_Controller {

	public function __construct(){
		parent::__construct();

		 
	}
	
	public function create_payment()
	{
		if(!$this->input->is_ajax_request())
		{	
			$data['title']			= "Payment";
			$data['grade_level']    = $this->module->get_table('grade_level');
			$data['students']		= $this->module->get_query("SELECT * FROM v_section_students  /*WHERE se_mode_payment <> 'CASH'*/ ORDER BY stud_lastname ASC ");
			$data['type']			= $this->module->get_table('collection_type');
			$this->load->view('collection/create_payment', $data);
		}
		else
		{

		}
		
	}

	public function get_assessment(){
		$stud_id 			= $this->uri->segment(3);
		$sy_id 				= $this->module->get_active_sy();

		$data['sy_id'] 		= $sy_id;
		$data['fees'] 		= $this->module->table_where('v_student_fees', array('stud_id' => $stud_id, 'sy_id' => $sy_id));


		/*backup old query*/
		$data['student_payment']	= $this->module->get_query("SELECT *, ROUND(tf_sub_total,2) AS tf_paid, ROUND( ( (tf_amount_due + tf_fine_amount) - tf_sub_total ) ,2) AS balance FROM v_student_payment_record_tf WHERE stud_id = ".$stud_id." AND sy_id = ".$sy_id."  ORDER BY tf_payment_date DESC "); 

		//echo $this->db->last_query();
		
		$data['sum_amount_due'] 	= $this->module->get_query("SELECT SUM(tf_amount_due) as sum_tf_amount_due, tf_amount_due FROM v_student_payment_record_tf WHERE stud_id = ".$stud_id." AND sy_id = ".$sy_id." "); 
		
		$data['get_total_paid_db']  = $this->module->get_query("SELECT SUM(tf_sub_total) as tf_sub_total FROM v_student_payment_record_tf WHERE sy_id = ".$sy_id." AND stud_id = ".$stud_id." ");
		$data['enrollment']			= $this->module->get_query("SELECT * FROM v_student_payment WHERE  stud_id = ".$stud_id." AND sy_id = ".$sy_id." and se_status = 'Enrolled' ");

		$data['balance']			= $this->module->get_out_balance($stud_id, $sy_id);

		//print_r($data['enrollment']);

		//echo 'wew';
		$this->load->view('collection/tbl_payment', $data);
	}

	public function get_test_assessment(){
		$data['title'] 		= 'Test';
		$stud_id 			= 344;
		$sy_id 				= $this->module->get_active_sy();

		$data['sy_id'] 		= $sy_id;
		$data['fees'] 		= $this->module->table_where('v_student_fees', array('stud_id' => $stud_id, 'sy_id' => $sy_id));


		/*backup old query*/

		$data['student_payment']	= $this->module->get_query("SELECT *, ROUND(tf_sub_total,2) AS tf_paid, ROUND( ( (tf_amount_due + tf_fine_amount) - tf_sub_total ) ,2) AS balance FROM v_student_payment_record_tf WHERE stud_id = ".$stud_id." AND sy_id = ".$sy_id."  ORDER BY tf_payment_date,spd_id ASC "); 
		
		$data['sum_amount_due'] 	= $this->module->get_query("SELECT SUM(tf_amount_due) as sum_tf_amount_due, tf_amount_due FROM v_student_payment_record_tf WHERE stud_id = ".$stud_id." AND sy_id = ".$sy_id." "); 
		
		/*backup old query
		$data['sum_amount_due'] 	= $this->module->get_query("SELECT SUM(tf_amount_due) as sum_tf_amount_due, tf_amount_due FROM v_student_payment_record_tf WHERE stud_id = ".$stud_id." AND sy_id = ".$sy_id." ");*/  

		$data['get_total_paid_db']  = $this->module->get_query("SELECT SUM(tf_sub_total) as tf_sub_total FROM v_student_payment_record_tf WHERE sy_id = ".$sy_id." AND stud_id = ".$stud_id." ");
		$data['enrollment']			= $this->module->get_query("SELECT * FROM v_student_payment WHERE  stud_id = ".$stud_id." AND sy_id = ".$sy_id." and se_status = 'Enrolled' ");
		

		$enrollment_data 	= $this->module->get_query("SELECT * FROM v_student_payment WHERE  stud_id = ".$stud_id." AND sy_id = ".$sy_id." and se_status = 'Enrolled' ");
		$payment_record		= $this->module->get_query("SELECT *,  ROUND((tf_amount_due + tf_fine_amount),2) AS amount_due, ROUND(SUM(tf_sub_total),2) AS amount_paid, tf_remarks FROM v_student_payment_record_tf WHERE stud_id = ".$stud_id." AND sy_id = ".$sy_id." GROUP BY tf_months ORDER BY tf_payment_date");

		$payment_data = [];

		/*if($payment_record->num_rows() > 0){
			foreach($payment_record->result() as $p){
				$tf_payment_date 		= $p->tf_payment_date;
				$tf_payment_period 		= $p->tf_months;
				$tf_payment_type 		= $p->tf_payment_type;
				$tf_payment_remarks 	= $p->tf_remarks;
				$tf_payment_amount_due 	= $p->amount_due;
				$tf_payment_fines 		= $p->tf_fine_amount;
				$tf_payment_amount_paid = $p->amount_paid;


				array_push($payment_data, array(
						'$tf_payment_date' 				=> $tf_payment_date,
						'$tf_payment_period' 			=> $tf_payment_period,
						'$tf_payment_type' 				=> $tf_payment_type,
						'$tf_payment_remarks' 			=> $tf_payment_remarks,
						'$tf_payment_amount_due'		=> $tf_payment_amount_due,
						'$tf_payment_fines' 			=> $tf_payment_fines,
						'$tf_payment_amount_paid' 		=> $tf_payment_amount_paid
				));
			}
		}*/

		/*echo '<pre>';
		print_r($payment_data);
		echo '</pre>';*/

		$this->load->view('collection/payment_record_test', $data);
	}

	public function get_update_payment_record(){
		$stud_id 			= $this->uri->segment(3);
		$sy_id 				= $this->module->get_active_sy();

		$data['student_payment']	= $this->module->get_query("SELECT * FROM v_student_payment_record_tf WHERE stud_id = ".$stud_id." AND sy_id = ".$sy_id." ORDER BY  spd_id ASC "); 
		$data['enrollment']			= $this->module->get_query("SELECT * FROM v_student_payment WHERE  stud_id = ".$stud_id." AND sy_id = ".$sy_id." and se_status = 'Enrolled' ");
		$this->load->view('collection/tbl_payment_record', $data);
	}


	public function tuition_fee(){


		$this->form_validation->set_rules('tf_stud_id', "Learner's Name",  'trim|required');
		if ($this->form_validation->run() == FALSE)
            {
            	$this->module->my_return(false, validation_errors());
            }
        else
            {	

            	$stud_id 				= $this->input->post('tf_stud_id', true);
            	$stud_name 				= $this->input->post('stud_name', true);
            	$sy_id 					= $this->input->post('sy_id', true);
            	$sec_id 				= $this->input->post('sec_id', true);
        		$tf_tuition_fee			= floatval(str_replace(",","", $this->input->post('tf_tuition_fee', true)));
        		$tf_miscelleneous_fee 	= floatval(str_replace(",","", $this->input->post('tf_miscelleneous_fee', true)));
        		$tf_amount_paid 		= floatval(str_replace(",","", $this->input->post('tf_amount_paid', true)));
        		$tf_payment_type 		= $this->input->post('tf_payment_type', true);
        		$tf_amount_paid 		= floatval(str_replace(",","",$this->input->post('tf_amount_paid', true)));
        		$tf_bank_name 			= $this->input->post('tf_bank_name', true);
        		$tf_account_number 		= $this->input->post('tf_account_number', true);
        		$tf_payment_date 		= date('Y-m-d h:i:s', strtotime($this->input->post('tf_payment_date', true).' '.date('h:i:s')));



            	date_default_timezone_set('Asia/Manila');

            	$tf_balance = floatval(str_replace(",","",$this->input->post('tf_balance', true)));

            	$student_payment_data = array (
            		'stud_id' 				=> $stud_id,
            		'sy_id' 				=> $sy_id,
            		'sec_id' 				=> $sec_id,
            		'tf_tuition_fee' 		=> $tf_tuition_fee,
            		'tf_miscelleneous_fee' 	=> $tf_miscelleneous_fee,
            		'tf_amount_paid' 		=> $tf_amount_paid,
            		'tf_payment_type' 		=> $tf_payment_type,
            		'tf_amount_paid' 		=> $tf_amount_paid,
            		'tf_bank_name' 			=> $tf_bank_name,
            		'tf_account_number' 	=> $tf_account_number,
            		'tf_payment_date' 		=> $tf_payment_date, 
            		'sp_type' 				=> 'Tuition Fee'
            		
            	);


            	if($this->module->insert('student_payment', $student_payment_data)){

            		$sp_id = $this->db->insert_id();

            		$total_due 			= 0;
            		$tf_running_balance = 0;

            		$total_payment 		= 0;
            		$remarks 			= '';

            		$data 		= $this->input->post(null,true);
			        foreach($data as $d => $k){

						if(strpos($d, 'tuition') !== FALSE){
							$tf_months 	= empty($k["tf_months"]) ? '' : $k["tf_months"];
							
							if(!empty($tf_months) ){

								$amount_due = floatval(str_replace(",","",$k['tf_amount_due']));
			        			$total_due += $amount_due;

			        			$tf_running_balance = $tf_balance - $total_due;

			        			$tf_sub_total = floatval(str_replace(",","",$k['tf_sub_total']));

								$student_payment_details = array(
									'sp_id' 			 =>	$sp_id,
									'tf_months' 		 =>	$k['tf_months'],
									'tf_amount_due' 	 =>	$amount_due,
									'tf_fine_percentage' =>	$k['tf_fine_percentage'],
									'tf_fine_amount' 	 =>	floatval(str_replace(",","", $k['tf_fine_amount'])),
									'tf_sub_total' 		 =>	$tf_sub_total,
									'tf_remarks' 		 =>	$k['tf_remarks']
									/*'tf_balance' 		=>  $tf_running_balance*/
								);

								$total_payment += $tf_sub_total;
								$remarks 	   .= !empty($k['tf_remarks']) ? $k['tf_remarks'].', ' : '';

								$this->module->insert('student_payment_details', $student_payment_details);

								/*$tf_running_balance = $tf_running_balance;*/
							}
						}
					}

					$this->module->cust_return(true, 'Payment succesfully saved.', $stud_id);


					$array = array(
						'sy_id'				=> $this->module->get_active_sy(),
						'sp_id'				=> $sp_id,
						'stud_id'			=> $stud_id,
						'stud_name'			=> $stud_name,
						'coltype_id'		=> 1,
						'col_payment_type'	=> !empty($tf_bank_name) ? 'Check' : 'Cash' , 
						'col_bank_account'	=> !empty($tf_bank_name) ? $tf_bank_name.' : '.$tf_account_number : '',
						'col_payment'		=> $total_payment,
						'col_payment_date'	=> date('Y-m-d', strtotime($tf_payment_date)),
						'col_type'			=> 'C',
						'col_remarks' 		=> $remarks
					);


					$this->module->insert('collection', $array); 

            	}else{
            		$this->module->my_return(false, ' Something went wrong, Payment not save.');
            	}


            }
	}


	public function edit_payment(){
		$this->form_validation->set_rules('spd_id', "SPD id",  'trim|required');
		$this->form_validation->set_rules('sp_id', "SP id",  'trim|required');

		if ($this->form_validation->run() == FALSE)
            {
            	$this->module->my_return(false, validation_errors());
            }
        else
            {

            	$sp_id 	= $this->input->post('sp_id', true);
            	$spd_id = $this->input->post('spd_id', true);


            	$sp_data = array(
            		'tf_payment_type'		=> $this->input->post('tf_payment_type', true),
            		'tf_bank_name'			=> $this->input->post('tf_bank_name', true),
            		'tf_account_number'		=> $this->input->post('tf_account_number', true),
            		'tf_payment_date'		=> date('Y-m-d h:i:s', strtotime($this->input->post('tf_payment_date', true)))
            	);

            	$spd_data = array(
            		'tf_months'				=> $this->input->post('tf_months', true),
            		'tf_amount_due'			=> floatval(str_replace(",","", $this->input->post('tf_amount_due', true))),
            		'tf_fine_percentage'	=> $this->input->post('tf_fine_percentage', true),
            		'tf_fine_amount'		=> floatval(str_replace(",","", $this->input->post('tf_fine_amount', true))),
            		'tf_sub_total'			=> floatval(str_replace(",","", $this->input->post('tf_sub_total', true))),  
            		'tf_remarks'			=> $this->input->post('tf_remarks', true)
            	);


            	if($this->module->update('student_payment',$sp_data, array('sp_id' => $sp_id) )){
            		$this->module->public_update('student_payment_details',$spd_data, array('spd_id' => $spd_id));
            	}else{
            		$this->module->my_return(false, ' Something went wrong, Payment not update.');
            	}
            }
	}

	public function get_edit_payment(){

		$spd_id 	= $this->uri->segment(3);
		$fee_type 	= $this->uri->segment(4);
		$stud_id 	= $this->uri->segment(4);
		$sy_id 		= $this->module->get_active_sy();

		$data['fee_type'] 		= $fee_type;
		$data['payment_data'] 	= $this->module->table_where('v_student_payment_record_tf', array('spd_id' => $spd_id));
		$this->load->view('collection/tbl_edit_payment', $data);

	}


	public function delete_payment(){
		$spd_id 	= $this->uri->segment(3);
		$sp_id 		= $this->uri->segment(4);

		$check = $this->module->table_where('v_student_payment_record_tf', array('spd_id' => $spd_id) );

		if($check->num_rows() > 1 ){
			$this->module->delete('student_payment_details', array('spd_id' => $spd_id));
		} else{
			$this->module->delete('student_payment', array('sp_id' => $sp_id));
		}

		return true;

	}


	public function collection_summary(){
		$data['title'] 			= 'Collection Summary';
		$sy_id 					= $this->module->get_active_sy();
		$data['level']			= $this->module->get_query("SELECT lvl_id, lvl_name FROM grade_level  ORDER BY lvl_sort ASC");
		$data['student']		= $this->module->get_query("SELECT lvl_name, sec_id, sec_name, sec_teacher FROM v_section_students WHERE se_mode_payment GROUP BY sec_id ORDER BY sec_sort, stud_lastname ASC");
		$data['enrollment']		= $this->module->table_where("v_student_fees", array('sy_id' => $sy_id) );
		$data['payment_data'] 	= $this->module->get_query("SELECT sy_id, sec_id, stud_id, tf_months, SUM(tf_sub_total) AS tf FROM v_student_payment_record_tf WHERE sy_id = ".$sy_id."  GROUP BY stud_id, tf_months");
		$this->load->view('collection/collection_summary', $data);

	}
} /*End of file*/