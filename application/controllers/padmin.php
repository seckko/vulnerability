<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Padmin extends CI_Controller {

	function __construct(){

		parent::__construct();

		$is_login 	= $this->session->userdata('prtl_is_login');
		$role 		= $this->session->userdata('prtl_role');

		if(!$is_login){
			redirect('portal');
		}else{

			if($role <> 'A'){
				redirect('home');
			}
		}

		

	}

	public function index(){
		$data['title'] 					= 'Dashboard';
		$sy_id 							= $this->module->get_active_sy();
		$data['dashboard']				= $this->module->get_table('v_portal_admin_dashboard');
		
		$data['registered_learners'] 	= $this->module->get_query("SELECT * FROM v_portal_enrollment WHERE sy_id = ".$sy_id." AND prtle_stud_approve = 'Y' ORDER BY stud_lastname, stud_firstname ASC ");
		$data['pending_learners'] 		= $this->module->get_query("SELECT * FROM v_portal_enrollment WHERE sy_id = ".$sy_id." AND prtle_stud_approve = 'N' ORDER BY stud_lastname, stud_firstname ASC ");

		$data['approve_per_date']		= $this->module->get_query("SELECT DATE(prtle_date_approved) AS date_approved, COUNT(*) AS cnt FROM portal_enrollment WHERE prtle_stud_approve = 'Y' GROUP BY DATE(prtle_date_approved) ");
		$data['pending_per_date']		= $this->module->get_query("SELECT DATE(prtle_date_apply) AS date_apply, COUNT(*) AS cnt FROM portal_enrollment WHERE prtle_stud_approve = 'N' GROUP BY DATE(prtle_date_approved) ");


		$this->load->view('portal/admin/dashboard', $data);
	}

	public function send_itexmo($code, $number, $name){

		//$msg 		= "Your verification code is ".$code.". Do not share this with anyone. If you did not request for a code, please call the Isidore hotline."; 
		$msg 		= "Your verification code for the registration of ".$name." is ".$code.". If you did not request for a code, please call the Isidore hotline.";
		$result = $this->module->itexmo_online($number,$msg);

		if ($result == ""){
		echo "iTexMo: No response from server!!!
		Please check the METHOD used (CURL or CURL-LESS). If you are using CURL then try CURL-LESS and vice versa.	
		Please CONTACT US for help. ";	

		}else if ($result == 0){
			return true;
		}
		else{	
			return false;  /*"Error Num ". $result . " was encountered!";*/
		}
	}

	public function unregistered_learners(){
		$data['title']			= 'Unregistered Learners';
		$data['unregistered']	= $this->module->get_query("SELECT * FROM v_student_class_list WHERE sy_id = 2 AND stud_id NOT IN (SELECT stud_id FROM portal_enrollment) ORDER BY lvl_sort, sec_sort, stud_lastname, stud_firstname ");

		$this->load->view('portal/admin/unregistered_learners', $data);
	}

	public function update_learner(){
		$data['title'] 		= 'Update Learner';
		$sy_id 				= $this->module->get_active_sy();
		$data['learners']	= $this->module->table_where('v_student_class_list', array('sy_id' => $sy_id));

		$this->load->view('portal/admin/update_learner', $data);
	}

	public function update_birthdate(){
		$this->form_validation->set_rules('stud_id', 'Student ID', 'trim|required');

		if ($this->form_validation->run() == FALSE)
            {
            	$this->module->my_return(false, validation_errors());
            }
        else
            {	
            	$stud_id 		= $this->input->post('stud_id', true);
            	$stud_birthdate = date('Y-m-d', strtotime($this->input->post('stud_birthdate', true)));
            	
            	$update_portal = $this->module->update('portal_enrollment', array('stud_birthdate' => $stud_birthdate), array('stud_id' => $stud_id));
            	$update_student = $this->module->update('students', array('stud_birthdate' => $stud_birthdate), array('stud_id' => $stud_id));

            	if($update_portal && $update_student){
            		$this->module->my_return(true, 'Update Success');
            	}else{
            		$this->module->my_return(false, 'Failed to update');
            	}

            }
	}




	public function update_registered_number(){

		$this->form_validation->set_rules('stud_id', 'Student ID', 'trim|required');
		$this->form_validation->set_rules('stud_contact', 'Registered Number', 'trim|required||regex_match[/^[0-9]{11}$/]');

		if ($this->form_validation->run() == FALSE)
            {
            	$this->module->my_return(false, validation_errors());
            }
        else
            {

				$stud_id 			= $this->input->post('stud_id', true);
				$stud_contact 		= $this->input->post('stud_contact', true);

		    	//$get_portal_details = $this->module->table_where('portal_enrollment', array('stud_id' => $stud_id));
		    	$get_portal_details = $this->module->table_where('v_portal_enrollment', array('stud_id' => $stud_id));
		    	$prtle_code 		= $get_portal_details->row('prtle_code');
		    	$stud_nickname 		= $get_portal_details->row('stud_nickname');

		    	//echo $stud_nickname;


		    	if($get_portal_details->num_rows() <= 0 ){
		    		
		    		$this->module->my_return(false, 'Learner was not yet registered in portal.');
		    	}else{

		    		if($this->send_itexmo($prtle_code, $stud_contact, $stud_nickname)){
					
						$update_portal  = $this->module->update('portal_enrollment', array('stud_msg_cast' => $stud_contact), array('stud_id' => $stud_id));
						$update_student = $this->module->update('students', array('stud_guardian_contact' => $stud_contact), array('stud_id' => $stud_id));

						if($update_portal && $update_student){
	            			$this->module->my_return(true, 'Update Success | code: '.$prtle_code);
		            	}else{
		            		$this->module->my_return(false, 'Failed to update');
		            	}

					}else{
						$this->module->my_return(false, 'Failed to send text message');
					}


		    	}
		    }

	}

	public function reservation_list(){
		$data['title'] 	= 'Make Reservation';

	}

	/*MOVE IT TO HOME CONTROLLER*/
	public function reservation(){
		if(!$this->input->is_ajax_request())
			{ 
				$prtl_id 				= 177; //$this->session->userdata('prtl_id');  281 177 251
				$data['title']			= 'Reserve Learners';
				

				$my_learners 			= $this->module->get_query("SELECT * FROM v_portal_enrollment WHERE prtl_id = ".$prtl_id." AND prtle_stud_approve = 'Y'  AND stud_id NOT IN (SELECT stud_id FROM v_portal_reservation) ");



				$selected_sy 			= $this->module->table_where('school_year', array('sy_selected' => 'Y'));
				$selected_sy_id 		= $selected_sy->row('sy_id');

				$data['next_sy']		= array('selected_sy_id' => $selected_sy_id, 'selected_sy_name' => $selected_sy->row('sy_name'));


				$learners_data 	= [];
				foreach($my_learners->result() as $r){
					$promote 			= ((int)$r->lvl_promote) + 1 ;
					$current_lvl 		= $r->lvl_id;
					$current_lvl_name 	= $r->lvl_name;

					$get_lvl 			= $this->module->table_where('v_sy_section', array('lvl_promote' => $promote, 'sy_id' => $selected_sy_id));
					$next_lvl_id		= $get_lvl->num_rows() < 1 ? $current_lvl : $get_lvl->row('lvl_id');
					$next_lvl_name		= $get_lvl->num_rows() < 1 ? $current_lvl_name : $get_lvl->row('lvl_name');
					$next_sy_id 		= $get_lvl->num_rows() < 1 ? $r->sy_id 	: $get_lvl->row('sy_id');
					$next_sy_name 		= $get_lvl->num_rows() < 1 ? $r->sy_name : $get_lvl->row('sy_name');
					$next_dept_name 	= $get_lvl->row('dept_name');

					//$check_counter 		= $this->module->check_available_slot($sec_id, $sy_id, $dept_name);

					array_push($learners_data, array(
						'stud_id' 		=> $r->stud_id,
						'stud_name' 	=> $r->stud_lastname.', '.$r->stud_firstname.' '.$r->stud_suffix,
						'lvl_name'		=> $current_lvl_name,
						'next_sy_id'	=> $next_sy_id,
						'next_sy_name'	=> $next_sy_name,
						'sec_name'		=> $r->sec_name,
						'next_lvl_id'	=> $next_lvl_id,
						'next_lvl_name'	=> $next_lvl_name,
						'next_dept_name'=> $next_dept_name,
						'next_section'	=> $this->module->table_where('v_section', array('lvl_id' => $next_lvl_id, 'sy_id' => $next_sy_id ))					
					));
				}


				/*echo '<pre>';
				print_r($learners_data);*/ 

				$data['my_learners'] 		= $learners_data;
				
				$data['my_reservation'] 	= $this->module->get_query("SELECT * FROM  v_portal_reservation WHERE sy_id = ".$selected_sy_id." AND stud_id IN (SELECT stud_id FROM v_portal_enrollment WHERE prtl_id = ".$prtl_id.") "); 

				$data['pending_reservation'] = $this->module->table_where('portal_reservation_hdr', array('prtl_id' => $prtl_id));

				$this->load->view('portal/admin/reservation', $data);

			}
		/*else
			{
				//$check = $this->module->check_reservation(65, 3);
				//print_r($check);

				$this->form_validation->set_rules('stud_id', 'Student ID', 'trim|required');

				if ($this->form_validation->run() == FALSE)
		            {
		            	$this->module->my_return(false, validation_errors());
		            }
		        else
		            {	

		            }

			}*/

		
    }

    public function check_available_slot(){
    	$sy_id 		= $this->uri->segment(3);
    	$sec_id 	= $this->uri->segment(4);
    	$dept_name 	= $this->uri->segment(5);

    	$check = $this->module->check_available_slot($sec_id, $sy_id, $dept_name);

    	if($check){
    		return $this->module->my_return(true, '<span  class="text-success"><i class="fa fa-check"></i> Available</span>');
    		//echo '<span style="font-size:14px" class="text-success"><i class="fa fa-check"></i> Available</span>';
    	}else{
    		return $this->module->my_return(false, '<span  class="text-danger"><i class="fa fa-times"></i> Sorry, this section is full.</span>');
    		//echo '<span style="font-size:14px" class="text-danger"><i class="fa fa-times"></i> Section is full.</span>';
    	}
    }

    public function proceed_payment(){
    	/*echo '<pre>';
    	print_r($_POST);*/

    	$reservation_data = [];

    	$data 		= $this->input->post(null,true);

    	$res_fee 	= 1000;

        foreach($data as $d => $k){

			if(strpos($d, 'res')!== FALSE){
				$sy_id 		= empty($k['sy_id'])?'': $k['sy_id'];
				$lvl_id 	= empty($k['lvl_id'])?'': $k['lvl_id'];
				$sec_id 	= empty($k['sec_id'])?'': $k['sec_id'];
				$stud_id 	= empty($k['stud_id'])?'': $k['stud_id'];
				$stud_name 	= empty($k['stud_name'])?'': $k['stud_name'];
				$lvl_name 	= empty($k['lvl_name'])?'': $k['lvl_name'];
				$dept_name 	= empty($k['dept_name'])?'': $k['dept_name'];

				if(!empty($sec_id) ){

					array_push($reservation_data, array(
						'sy_id' 	=> $sy_id,
						'lvl_id' 	=> $lvl_id,
						'sec_id' 	=> $sec_id,
						'stud_id' 	=> $stud_id,
						'stud_type'	=> 'O',
						'stud_name' => $stud_name,
						'lvl_name'	=> $lvl_name,
						'dept_name' => $dept_name,
						'sec_name'  => $this->module->table_where('section', array('sec_id' => $sec_id))->row('sec_name'),
						'res_fee'	=> $res_fee
					));
				}

			}
		}

		if(empty($reservation_data)){
			return $this->module->my_return(false, 'Please select section');
		}else{
			$this->session->set_userdata('reservation', $reservation_data);
			return $this->module->my_return(true, '');
			//print_r($this->session->userdata('reservation'));
		}

    }


    public function reservation_payment(){
    	if(!$this->input->is_ajax_request())
			{
		    	$data['title']			= 'Reserve Learners';
		    	$data['my_reservation'] = $this->session->userdata('reservation');
		    	$this->load->view('portal/admin/reservation_payment', $data);
		    }
		else{

			$my_reservation = $this->session->userdata('reservation');

			if(empty($my_reservation)){
				return $this->module->my_return(false, 'Please learner');
			}else{

				$selected_sy 			= $this->module->table_where('school_year', array('sy_selected' => 'Y'));
				$selected_sy_id 		= $selected_sy->row('sy_id');

				date_default_timezone_set('Asia/Manila');
				$prhdr_receipt_img  = '';

				$code = date('mdyhm').$this->module->gen_otp().'-'.$this->module->get_max('portal_reservation_hdr', 'prhdr_id');



				if(!empty($_FILES['receipt']['name']) ){
					$receipt 			= $_FILES['receipt'];

					$_FILES['file']['name'] 		= $receipt['name'];
			        $_FILES['file']['type'] 		= $receipt['type'];
			        $_FILES['file']['tmp_name'] 	= $receipt['tmp_name'];
			        $_FILES['file']['error'] 		= $receipt['error'];
			        $_FILES['file']['size'] 		= $receipt['size'];	

			        $folder_name = 'asset/uploads/receipt/';

			        // Set preference
			        $config['upload_path'] 		= $folder_name; 
			        $config['allowed_types'] 	= 'jpg|jpeg|png|gif|pdf';
			        $config['max_size'] 		= '10000'; // max_size in kb
			        $config['remove_spaces']	= TRUE;
			        $config['file_name'] 		= $code;
			        /*$config['overwrite']		= TRUE;*/

			        $this->load->library('upload',$config); 

			        if($this->upload->do_upload('file')){

			            // Get data about the file
			            $uploadData = $this->upload->data();
			            $filename = $uploadData['file_name'];
			            // Initialize array
			            $prhdr_receipt_img =  $filename;
			          }else{
			          	return $this->module->my_return(false, $this->upload->display_errors());
			          }
				}


				$date = date('Y-m-d H:i:s');

				$prhdr_data = array(
					'prhdr_no'				=> 'RES-'.$code,
					'prtl_id' 				=> $this->session->userdata('prtl_id'),
					'prhdr_date_reserved'	=> $date,
					'prhdr_receipt_img'		=> $prhdr_receipt_img
				);



				if($this->module->insert('portal_reservation_hdr', $prhdr_data)){

					$reservation_portal = [];

					$id = $this->db->insert_id();

					foreach($my_reservation as $r){
						$prd_data = array(
							'prhdr_id' 			=> $id,
							'sy_id'				=> $r['sy_id'],
							'stud_type'			=> $r['stud_type'],
							'stud_id'			=> $r['stud_id'],
							'lvl_id'			=> $r['lvl_id'],
							'sec_id'			=> $r['sec_id'],
							'prd_status'		=> 'Pending',
							'prd_amount'		=> $r['res_fee']
						);

						array_push($reservation_portal, array(
							'prtl_id' 			=> $this->session->userdata('prtl_id'),
							'sy_id'				=> $r['sy_id'],
							'lvl_id'			=> $r['lvl_id'],
							'sec_id'			=> $r['sec_id'],
							'stud_id'			=> $r['stud_id'],
							'prd_date_approved' => $date,
							'prd_status'		=> 'Pending'
						));

						//$check_res = $this->module->table_where('portal_reservation', ); 
						$this->module->insert('portal_reservation_details', $prd_data);	
					}

					$this->module->mybatch_insert('portal_reservation', $reservation_portal);


					/*$data = array(
							'prtl_id' 			=> $this->session->userdata('prtl_id'),
			    			'sy_id' 			=> $r['sy_id'],
			    			'lvl_id' 			=> $r['lvl_id'],
			    			'sec_id' 			=> $r['sec_id'],
			    			'stud_id' 			=> $r['stud_id'],
			    			'prd_date_approved' => $date,
			    			'prd_status'		=> 'Pending'
			    		);

			    		$this->module->insert('portal_reservation', $data);*/

					
					return $this->module->my_return(true, 'Successfully reserved');
					$this->session->unset_userdata('reservation');



				}else{
					return $this->module->my_return(false, 'Reservation failed, please try again later');
				}

				

				/*portal_reservation_details*/

				/*echo '<pre>';
				print_r($prhdr_data);
				echo '<hr/>';*/
				// /print_r($my_reservation);

			}
		}

    }


    /*public function move_to_reservation(){
    	$reserved = $this->module->table_where('student_class_list', array('sy_id' => 3));

    	foreach ($reserved->result() as $r) {
    		$data = array(
    			'sy_id' 			=> $r->sy_id,
    			'lvl_id' 			=> $r->lvl_id,
    			'sec_id' 			=> $r->sec_id,
    			'stud_id' 			=> $r->stud_id,
    			'prd_date_approved' => $r->cl_date_reserved,
    			'prd_status' 		=> 'Approved'
    		);

    		$this->module->insert('portal_reservation', $data);
    	}
    }*/

    public function update_reservation(){
    	if(!$this->input->is_ajax_request())
			{

		    	$data['title']			= 'Reserve Learners';
		    	$prtl_id 				= 177;
		    	$prhdr_id 				= $this->uri->segment(3);
		    	$data['prhdr_id']		= $prhdr_id;
				$data['my_reservation'] = $this->module->table_where('v_portal_reservation_for_approval', array('prtl_id' => $prtl_id, 'prhdr_id' => $prhdr_id));
				$data['prhdr_no']		= $data['my_reservation']->row('prhdr_no');
				$this->load->view('portal/admin/update_reservation', $data);
			}
		else
			{


				date_default_timezone_set('Asia/Manila');
				$prhdr_receipt_img  = '';

				$code 		= $this->input->post('prhdr_no', true);
				$prhdr_id	= $this->input->post('prhdr_id', true);

				//$code = date('mdyhm').$this->module->gen_otp().'-'.$this->module->get_max('portal_reservation_hdr', 'prhdr_id');


				if(!empty($_FILES['receipt']['name']) ){
					$receipt 			= $_FILES['receipt'];

					$_FILES['file']['name'] 		= $receipt['name'];
			        $_FILES['file']['type'] 		= $receipt['type'];
			        $_FILES['file']['tmp_name'] 	= $receipt['tmp_name'];
			        $_FILES['file']['error'] 		= $receipt['error'];
			        $_FILES['file']['size'] 		= $receipt['size'];	

			        $folder_name = 'asset/uploads/receipt/';

			        // Set preference
			        $config['upload_path'] 		= $folder_name; 
			        $config['allowed_types'] 	= 'jpg|jpeg|png|gif|pdf';
			        $config['max_size'] 		= '10000'; // max_size in kb
			        $config['remove_spaces']	= TRUE;
			        $config['file_name'] 		= $code;
			        /*$config['overwrite']		= TRUE;*/

			        $this->load->library('upload',$config); 

			        if($this->upload->do_upload('file')){

			            // Get data about the file
			            $uploadData = $this->upload->data();
			            $filename = $uploadData['file_name'];
			            // Initialize array
			            $prhdr_receipt_img =  $filename;
			          }else{
			          	return $this->module->my_return(false, $this->upload->display_errors());
			          }
				}


				$date = date('Y-m-d H:i:s');

				$prhdr_data = array(
					'prhdr_date_update'		=> $date,
					'prhdr_receipt_img'		=> $prhdr_receipt_img
				);



				if($this->module->update('portal_reservation_hdr', $prhdr_data, array('prhdr_id' => $prhdr_id) )){
					return $this->module->my_return(true,'Successful');
				}else{
					return $this->module->my_return(false, 'Something went wrong, please try again later.');
				}


			}
    }

    public function deactivate_account(){
		$data['title'] 	= 'Deactivate Account';
		$data['users'] = $this->module->get_query("SELECT * FROM portal_user ORDER BY prtl_lname, prtl_fname");
		$this->load->view('portal/admin/deactivate_account', $data);

	}

	public function get_enrollees(){
		$prtl_id = $this->uri->segment(3);
		//$get_enrolees = $this->module->table_where('v_portal_enrollment', array('prtl_id' => $prtl_id));
		$get_enrollees = $this->module->get_query("SELECT e.*, s.stud_lastname, s.stud_firstname FROM portal_enrollment AS e, student AS s WHERE e.stud_id = s.stud_id AND prtl_id = ".$prtl_id." ");

		//echo $this->db->last_query();

		if($get_enrollees->num_rows() > 0 ){

			foreach($get_enrollees->result() as $r){

				$stat = $r->prtle_stud_approve;

				echo '<tr>';
				echo '<td>'.$r->stud_lastname.', '.$r->stud_firstname.'</td>';
				echo '<td class="text-center">'.$r->prtle_stud_approve.'</td>';
				echo '<td>'.$r->prtle_id.'</td>';

				if($stat == 'Y' ){
					echo '<td><button class="btn btn-xs btn-danger deact_stud" data-id="'.$r->prtle_id.'" >Deactivate</button></td>';
				}else{
					echo '<td><button class="btn btn-xs btn-info actv_stud" data-id="'.$r->prtle_id.'" >Activate</button></td>';
				}
				
				echo '<tr>';
			}

		}else{
			echo 'No Data';
		}

		

	}

	public function deactivate_user(){
		$prtl_id = $this->uri->segment(3);

		$update = $this->module->update('portal_user', array('prtl_approve' => 'N'), array('prtl_id' => $prtl_id) );

		if($update){
			echo 'success';
		}else{
			echo 'awts';
		}
		
	}

	public function deactivate_enrollment(){
		$prtleid = $this->uri->segment(3);

		$update = $this->module->update('portal_enrollment', array('prtle_stud_approve' => 'N'), array('prtle_id' => $prtleid) );

		if($update){
			echo 'success';
		}else{
			echo 'awts';
		}
		
	}

	public function activate_user(){
		$prtl_id = $this->uri->segment(3);

		$update = $this->module->update('portal_user', array('prtl_approve' => 'Y'), array('prtl_id' => $prtl_id) );

		if($update){
			echo 'success';
		}else{
			echo 'awts';
		}
		
	}

	public function activate_enrollment(){
		$prtleid = $this->uri->segment(3);

		$update = $this->module->update('portal_enrollment', array('prtle_stud_approve' => 'Y'), array('prtle_id' => $prtleid) );

		if($update){
			echo 'success';
		}else{
			echo 'awts';
		}
		
	}

	public function on_hold(){
		if(!$this->input->is_ajax_request())
			{
				$data['title'] 		= "On Hold Account";
				$data['students']	= $this->module->get_table('students');
				$data['onhold']		= $this->module->get_query("SELECT p.oh_id, p.stud_id, sy.sy_name, s.stud_lastname, s.stud_firstname FROM portal_onhold AS p, school_year AS sy, students AS s WHERE p.sy_id = sy.sy_id AND p.stud_id = s.stud_id");
				$this->load->view('portal/admin/onhold', $data);
			}
		else
			{
				$sy_id 		= $this->module->get_active_sy();
				$stud_id 	= $this->input->post('stud_id');
				$oh_hold 	= $this->input->post('oh_hold');


				$check = $this->module->table_where('portal_onhold', array('sy_id' => $sy_id, 'stud_id' => $stud_id));

				if($check->num_rows() > 0 ){
					$update = $this->module->public_update('portal_onhold', array('oh_hold' => $oh_hold), array('sy_id' => $sy_id, 'stud_id' => $stud_id) );

					if($oh_hold == 'N'){
						$this->module->delete('portal_onhold', array('sy_id' => $sy_id, 'stud_id' => $stud_id));
						$this->module->my_return(true, 'Success delete.');
					}
				}else{
					$insert = $this->module->public_insert('portal_onhold', array('sy_id' => $sy_id, 'stud_id' => $stud_id, 'oh_hold' => $oh_hold));
				}
			}
	}

	public function delete_onhold()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('portal_onhold', array('oh_id' => $id)))
		{
			return true;
		}else{
			return false;
		}
		
	}

	public function print_portal_user(){
		$data['title'] = 'Print Portal Users';
		$data['user']	= $this->module->get_query("SELECT * FROM portal_user WHERE prtl_approve = 'Y' ORDER BY prtl_lname, prtl_fname ASC ");
		$data['learner'] = $this->module->get_query("SELECT * FROM  v_portal_enrollment GROUP BY stud_id");
		$this->load->view('portal/admin/print_portal_user', $data);
	}

	/*FOR TESTING */
	public function print_report_card_testing(){
		//$data['title'] 	= "Report Card";

		//$sy_id 			= $this->module->get_active_sy();
		/*$stud_id 		= $this->uri->segment(3);*/
		$stud_id 		= 421;
		$sy_id 			= 3;

		$student_data 	= array();
		
		/*GET SUBJECTS*/
		$subject		= $this->module->getTableSort('subject', 'sub_sort');
		
		/*GET STUDENT DATA SEC LVL */
		$students		= $this->module->get_query("SELECT * FROM v_student_section_class_list WHERE stud_id = ".$stud_id." AND sy_id = ".$sy_id."  GROUP BY stud_id"); 

		/*GET QUARTERS*/
		$quarter  			= $this->module->get_table('quarter');
		$data['quarters']	= $quarter;

		/*GET QUARTERLY GRADES*/
		$quarterly_grades 	= $this->module->table_where('v_quarterly_grade', array('stud_id' => $stud_id, 'sy_id' => $sy_id));


		/*GET ATTENDANCE*/
		$attendance  		= $this->module->get_query("SELECT * FROM attendance_hdr WHERE sy_id = ".$sy_id." ORDER BY athdr_sort ASC");
		$attendance_detail 	= $this->module->table_where('v_attendance' , array('stud_id' => $stud_id, 'sy_id' => $sy_id) );


		$attendance_data = array();

		foreach($attendance->result() as $a){

			$month  	= $a->athdr_month;
            $days   	= empty($a->athdr_total_days) ? 0 : $a->athdr_total_days;
            $athdr_id 	= $a->athdr_id;
            //$total 	+= $days;

            //$attendance_detail_data = array();

            $present = 0;
            $absent  = 0;

            foreach($attendance_detail->result() as $t){
            	$tathdr_id 		= $t->athdr_id;
            	$att_present    = $t->att_present;
            	$att_absent    	= $t->att_absent;


            	if($tathdr_id == $athdr_id){

            		$present = $att_present;
            		$absent  = $att_absent;

            		/*array_push($attendance_detail_data, array(
		            	'present'	=> $att_present,
		            	'absent'	=> $att_absent
		            ));*/

            	}
            }



            array_push($attendance_data, array(
            	'month' 		=> $month,
            	'total_days'	=> $days,
            	'present'		=> $present,
            	'absent'		=> $absent
            ));

		}

		//echo '<pre>';
		//print_r($attendance_data);

		$data['attendance'] = $attendance_data;


		/*GET CORE VALUES*/
		$data['core']		= $this->module->get_query("SELECT cv_id, cv_core_value, COUNT(cv_core_value) AS cnt FROM v_values GROUP BY cv_core_value ORDER BY cv_sort ASC");
		$data['values']		= $this->module->get_query("SELECT * FROM v_values ORDER BY cv_sort ASC");
		$data['behavior'] 	= $this->module->table_where('lov_student_values', array('sy_id' => $sy_id, 'stud_id' => $stud_id ));

		$dept_name = '';

		foreach($students->result() as $st){
			$stud_lastname 		= $st->stud_lastname;
			$stud_firstname 	= $st->stud_firstname;
			$stud_middlename 	= $st->stud_middlename;
			$stud_suffix		= $st->stud_suffix;
			$stud_name 			= $stud_lastname.', '.$stud_firstname.' '.$stud_suffix.' '.(empty($stud_middlename) ? '' : substr($st->stud_middlename,0, 1).'.');

			$stud_fullname 		= $stud_firstname.' '.$stud_suffix.' '.(empty($stud_middlename) ? '' : substr($st->stud_middlename,0, 1).'.');
			$sec_id 			= $st->sec_id;
			$lrn 				= $st->stud_lrn;
			$gr_sec 			= $st->lvl_name.' - '.$st->sec_name;
			$stud_img 			= $st->stud_img;
			$dept_name 			= $st->dept_name;
			
				$subject_array 		= array();

				foreach($subject->result() as $sj){
					$sub_name   = $sj->sub_name;
		            $sub_id     = $sj->sub_id; 

		            $subject_det    = $this->module->get_query('SELECT COUNT(*) as cnt FROM subject_detail WHERE sub_id = '.$sub_id.' ')->row('cnt');
		            $subject_detail = $this->module->table_where('subject_detail', array('sub_id' => $sub_id));

		            $check_subject 	= $this->module->table_where('subject_assignment', array('sub_id' => $sub_id, 'sec_id' => $sec_id));
		            
		            if($check_subject->num_rows() > 0){

		            	$quarter_array = array();
		            	foreach($quarter->result() as $q){
							$qtr_code 			= $q->qtr_code;

							$quarterly_grade_array = array();

							$cnt = 0;
		            		$total_grade = 0;

		            		$array_grades = array();


							foreach($quarterly_grades->result() as $qg){
								$qgh_id 			= $qg->qgh_id;
								$qgh_sub_id 		= $qg->sub_id;
								$qgh_subj_det_id 	= $qg->subj_det_id;
								$qgh_qtr_code 		= $qg->qtr_code;
								$qgh_stud_id 		= $qg->stud_id;
								$qgh_grade 			= $qg->quarterly_grade;

								if( ($qgh_qtr_code == $qtr_code) && ($qgh_sub_id == $sub_id)   && ($stud_id == $qgh_stud_id)){
									$cnt ++;
									$total_grade += $qgh_grade;

									/*$a 		 	= array_filter($qgh_grade);
									$average 	= array_sum($a) / count($a);
									$final_ave 	= round($average);*/

									//echo $final_ave.'<br/>';
									//echo $qtr_code.' - '.$sub_id .' - '. $qgh_grade.'<br/>';

									array_push($quarterly_grade_array, array('sub_id' => $qgh_sub_id, 'subj_det_id' => $qg->subj_det_id ,'grade' => $qgh_grade  ));

									array_push($array_grades, $qgh_grade);
									
								}


							}

							/*$a 		 	= array_filter($array_grades);
							$average 	= array_sum($a) / count($a);
							$final_ave 	= round($average);*/

							/*echo $final_ave.'<br/>';*/

							/*$total = round( $total_grade / ($cnt == 0 ? $cnt = 1 : $cnt = $cnt));*/

							$total = round( $total_grade / ($cnt == 0 ? $cnt = 1 : $cnt = $cnt));
							array_push($quarter_array, array('qtr_code' => $qtr_code, 'final_grade' => $total, 'quarterly_grade' => $quarterly_grade_array) );

				       	}

				       	array_push($subject_array, 
			            	array(
			            		'sub_id' 			=> $sub_id,
			            		'sub_name' 			=> $sub_name,
			            		'quarter'			=> $quarter_array

			            	)
			       		);
		            }
		             
		        }

			array_push($student_data, 
            	array(
            		'sy_id'			=> $sy_id,
            		'stud_id' 		=> $stud_id,
            		'stud_name' 	=> $stud_name,
            		'stud_lastname' => $stud_lastname,
            		'stud_fullname' => $stud_fullname,
            		'lrn'			=> $lrn,
            		'gr_sec'		=> $gr_sec,
            		'stud_img'		=> $stud_img,
            		'dept_name'		=> $dept_name,
            		'subjects'		=> $subject_array
            	)
            );


		}

		$data['student_data'] 	= $student_data;
		$data['ps_card']		= $this->module->table_where('portal_ps_grade', array('sy_id' => $sy_id, 'stud_id' => $stud_id));
		echo '<pre>';
		print_r($student_data);
		print_r($data['ps_card']->result());
		echo '</pre>';



		//if($dept_name == 'Pre-school'){
			//$check = $this->module->table_where('portal_ps_grade', array('sy_id' => $sy_id, 'stud_id' => $stud_id));
			/*$filename = $check->row('psg_grade');

			if($check->num_rows() >= 1){
				return '<img src="'.base_url().'asset/uploads/PS Grades/'.$filename.' "/>';
			}else{
				return '<h3>No card uploaded.</h3>';
			}*/
			
		//}

		//$this->load->view('portal/report_card',$data);

	}

	public function print_report_card($stud_id, $sy_id){
		//$data['title'] 	= "Report Card";

		//$sy_id 			= $this->module->get_active_sy();
		//$stud_id 		= $this->uri->segment(3);

		$student_data 	= array();
		
		/*GET SUBJECTS*/
		$subject		= $this->module->getTableSort('subject', 'sub_sort');
		
		/*GET STUDENT DATA SEC LVL */
		$students		= $this->module->get_query("SELECT * FROM v_student_section_class_list WHERE stud_id = ".$stud_id." AND sy_id = ".$sy_id."  GROUP BY stud_id"); 

		$this->db->last_query();

		/*GET QUARTERS*/
		$quarter  			= $this->module->get_table('quarter');
		$data['quarters']	= $quarter;

		/*GET QUARTERLY GRADES*/
		$quarterly_grades 	= $this->module->table_where('v_quarterly_grade', array('stud_id' => $stud_id, 'sy_id' => $sy_id));


		/*GET ATTENDANCE*/
		$attendance  		= $this->module->get_query("SELECT * FROM attendance_hdr WHERE sy_id = ".$sy_id." ORDER BY athdr_sort ASC");
		$attendance_detail 	= $this->module->table_where('v_attendance' , array('stud_id' => $stud_id, 'sy_id' => $sy_id) );


		$attendance_data = array();

		foreach($attendance->result() as $a){

			$month  	= $a->athdr_month;
            $days   	= empty($a->athdr_total_days) ? 0 : $a->athdr_total_days;
            $athdr_id 	= $a->athdr_id;


            $present = 0;
            $absent  = 0;

            foreach($attendance_detail->result() as $t){
            	$tathdr_id 		= $t->athdr_id;
            	$att_present    = $t->att_present;
            	$att_absent    	= $t->att_absent;


            	if($tathdr_id == $athdr_id){

            		$present = $att_present;
            		$absent  = $att_absent;
          
            	}
            }



            array_push($attendance_data, array(
            	'month' 		=> $month,
            	'total_days'	=> $days,
            	'present'		=> $present,
            	'absent'		=> $absent
            ));

		}


		$data['attendance'] = $attendance_data;


		/*GET CORE VALUES*/
		$data['core']		= $this->module->get_query("SELECT cv_id, cv_core_value, COUNT(cv_core_value) AS cnt FROM v_values GROUP BY cv_core_value ORDER BY cv_sort ASC");
		$data['values']		= $this->module->get_query("SELECT * FROM v_values ORDER BY cv_sort ASC");
		$data['behavior'] 	= $this->module->table_where('lov_student_values', array('sy_id' => $sy_id, 'stud_id' => $stud_id ));

		$dept_name = '';

		foreach($students->result() as $st){
			$stud_lastname 		= $st->stud_lastname;
			$stud_firstname 	= $st->stud_firstname;
			$stud_middlename 	= $st->stud_middlename;
			$stud_suffix		= $st->stud_suffix;
			$stud_name 			= $stud_lastname.', '.$stud_firstname.' '.$stud_suffix.' '.(empty($stud_middlename) ? '' : substr($st->stud_middlename,0, 1).'.');

			$stud_fullname 		= $stud_firstname.' '.$stud_suffix.' '.(empty($stud_middlename) ? '' : substr($st->stud_middlename,0, 1).'.');
			$sec_id 			= $st->sec_id;
			$lrn 				= $st->stud_lrn;
			$gr_sec 			= $st->lvl_name.' - '.$st->sec_name;
			$stud_img 			= $st->stud_img;
			$dept_name 			= $st->dept_name;
			
				$subject_array 		= array();

				foreach($subject->result() as $sj){
					$sub_name   = $sj->sub_name;
		            $sub_id     = $sj->sub_id; 

		            $subject_det    = $this->module->get_query('SELECT COUNT(*) as cnt FROM subject_detail WHERE sub_id = '.$sub_id.' ')->row('cnt');
		            $subject_detail = $this->module->table_where('subject_detail', array('sub_id' => $sub_id));

		            $check_subject 	= $this->module->table_where('subject_assignment', array('sub_id' => $sub_id, 'sec_id' => $sec_id));
		            
		            if($check_subject->num_rows() > 0){

		            	$quarter_array = array();
		            	foreach($quarter->result() as $q){
							$qtr_code 			= $q->qtr_code;

							$quarterly_grade_array = array();

							$cnt = 0;
		            		$total_grade = 0;

		            		$array_grades = array();


							foreach($quarterly_grades->result() as $qg){
								$qgh_id 			= $qg->qgh_id;
								$qgh_sub_id 		= $qg->sub_id;
								$qgh_subj_det_id 	= $qg->subj_det_id;
								$qgh_qtr_code 		= $qg->qtr_code;
								$qgh_stud_id 		= $qg->stud_id;
								$qgh_grade 			= $qg->quarterly_grade;

								if( ($qgh_qtr_code == $qtr_code) && ($qgh_sub_id == $sub_id)   && ($stud_id == $qgh_stud_id)){
									$cnt ++;
									$total_grade += $qgh_grade;


									array_push($quarterly_grade_array, array('sub_id' => $qgh_sub_id, 'subj_det_id' => $qg->subj_det_id ,'grade' => $qgh_grade  ));

									array_push($array_grades, $qgh_grade);
									
								}


							}

							$total = round( $total_grade / ($cnt == 0 ? $cnt = 1 : $cnt = $cnt));
							array_push($quarter_array, array('qtr_code' => $qtr_code, 'final_grade' => $total, 'quarterly_grade' => $quarterly_grade_array) );

				       	}

				       	array_push($subject_array, 
			            	array(
			            		'sub_id' 			=> $sub_id,
			            		'sub_name' 			=> $sub_name,
			            		'quarter'			=> $quarter_array

			            	)
			       		);
		            }
		             
		        }

			array_push($student_data, 
            	array(
            		'sy_id'			=> $sy_id,
            		'stud_id' 		=> $stud_id,
            		'stud_name' 	=> $stud_name,
            		'stud_lastname' => $stud_lastname,
            		'stud_fullname' => $stud_fullname,
            		'lrn'			=> $lrn,
            		'gr_sec'		=> $gr_sec,
            		'stud_img'		=> $stud_img,
            		'dept_name'		=> $dept_name,
            		'subjects'		=> $subject_array
            	)
            );


		}

		$data['ps_sy_id']		= $sy_id;
		$data['ps_stud_id']		= $stud_id;

		$data['student_data'] 	= $student_data;

		$this->load->view('portal/report_card',$data);

	}



	/*PRESCHOOL UPLOAD GRADES*/

	public function preschool_upload_grades(){
		$data['title']			= "Upload Preschool Grades";
		$sy_id 					= $this->module->get_active_sy();
		$data['ps_section'] 	= $this->module->table_where('v_sy_section', array('sy_id' => $sy_id, 'dept_name' => 'Pre-School'));
		$data['ps_school_year'] = $this->module->get_query("SELECT * FROM school_year ORDER BY sy_id");
		$data['count']			= $this->module->get_query("SELECT  sec_id, COUNT(*) as cnt FROM portal_ps_grade GROUP BY sec_id, sy_id ");

		//echo $this->db->last_query();

		$this->load->view('portal/admin/preschool_upload_grades', $data);
	}

	public function view_ps_section(){
		$data['title']			= "Upload Preschool Grades";
		$sec_id 				= $this->uri->segment(3);
		$sy_id 					= empty($this->uri->segment(4)) ? $this->module->get_active_sy() : $this->uri->segment(4);
		$qtr_code 				= $this->module->get_active_qtr_code();

		$data['students'] 		= $this->module->get_query("SELECT * FROM v_section_students WHERE sy_id = ".$sy_id." AND sec_id = ".$sec_id." ORDER BY stud_lastname, stud_firstname ASC ");
		$data['ps_school_year'] = $this->module->get_query("SELECT * FROM school_year ORDER BY sy_id");
		$data['ps_grade'] 		= $this->module->get_query("SELECT * FROM v_portal_ps_student WHERE sy_id = ".$sy_id." AND sec_id = ".$sec_id." AND qtr_code = '".$qtr_code."' ORDER BY stud_lastname, stud_firstname ");
		//$data['stud_section']

		$this->load->view('portal/admin/view_ps_section', $data);
	}


	public function upload_grade(){

		//$stud_id 	= $this->input->post('stud_id', true);
		$sy_id		= $this->input->post('sy_id', true);
		$sec_id		= $this->input->post('sec_id', true);
		$qtr_code 	= $this->input->post('qtr_code', true);

		$err_msg	= array();
		$suc_msg 	= array();

	 
	      $data = array();

	      // Count total files
	      $countfiles = count($_FILES['files']['name']);
	      /*$img_name = '';*/
	 
	      // Looping all files
	      for($i=0;$i<$countfiles;$i++){


	 
	        if(!empty($_FILES['files']['name'][$i])){

		          // Define new $_FILES array - $_FILES['file']
		          $_FILES['file']['name'] 		= $_FILES['files']['name'][$i];
		          $_FILES['file']['type'] 		= $_FILES['files']['type'][$i];
		          $_FILES['file']['tmp_name'] 	= $_FILES['files']['tmp_name'][$i];
		          $_FILES['file']['error'] 		= $_FILES['files']['error'][$i];
		          $_FILES['file']['size'] 		= $_FILES['files']['size'][$i];

		          $img_name = $sy_id.'_'.$_FILES['files']['name'][$i];

		          $folder_name = 'asset/uploads/PS Grades/'.$sy_id.'/'.$qtr_code.'/'.$sec_id;

		          	if (!is_dir($folder_name)) {
					    mkdir('asset/uploads/PS Grades/' . $sy_id.'/'.$qtr_code.'/'.$sec_id, 0777, TRUE);
					}


		          // Set preference
		          $config['upload_path'] 	= $folder_name; 
		          $config['allowed_types'] 	= 'jpg|jpeg|png|gif';
		          $config['max_size'] 		= '5000'; // max_size in kb
		          $config['remove_spaces']	= TRUE;
		          $config['overwrite']		= TRUE;
		          /*$config['file_name'] 		= $img_name;*/

		          $this->load->library('upload',$config); 


		          //echo($img_name);
		          //echo '<br/>';
		 
		          // File upload
		          if($this->upload->do_upload('file')){

		            // Get data about the file
		            $uploadData = $this->upload->data();
		            $filename = $uploadData['file_name'];

		            // Initialize array
		            //$data['filenames'][] = $filename;
		            array_push($suc_msg, $filename);

		          }else{
		        	array_push($err_msg, $this->upload->display_errors());
		          }
	        }
	 
	      }

	      if(empty($err_msg) ){

	      	$this->session->set_userdata('temp_upload', $suc_msg);

	      	$this->module->cust_return(true, 'Upload Success ['.count($suc_msg).']',$sec_id.'/'.$sy_id.'/'.$qtr_code);
	      }else{
	      	$this->module->my_return(false, 'Error ['.count($err_msg).']');
	      }


	      //echo '<br/>';
		  //print_r($this->session->userdata('temp_upload'));


	    /*print_r($err_msg);
		echo '<br/>';
		print_r($suc_msg);*/
		
	}

	public function delete_ps_grade()
	{
		$id = $this->uri->segment(3);
		if($this->module->delete('portal_ps_grade', array('psg_id' => $id)))
		{
			return true;
		}else{
			return false;
		}
		
	}




	public function load_ps_section(){
		$sec_id 	= $this->uri->segment(3);
		$sy_id 		= $this->uri->segment(4);
		$qtr_code 	= $this->uri->segment(5);

		$data['sy_id']		= $sy_id;
		$data['sec_id']		= $sec_id;
		$data['qtr_code']	= $qtr_code;
		$data['student'] 	= $this->module->get_query("SELECT * FROM v_section_students WHERE sy_id = ".$sy_id." AND sec_id = ".$sec_id." ORDER BY stud_lastname, stud_firstname ASC ");

		$this->load->view('portal/admin/tbl_ps_section', $data);

	}

	public function save_ps_grade(){
		$sy_id 		= $this->input->post('sy_id', true);
		$sec_id 	= $this->input->post('sec_id', true);
		$qtr_code 	= $this->input->post('qtr_code', true);

		
		$stud_data  = array();
		$check_data = array();

		foreach ($_POST['stud_id'] as $k => $v){
	        //echo  $v.'<br/>';
	        foreach($_POST['stud_img'] as $c =>$b){
	        	if($k==$c){

	        		$save = array(
	        			'sy_id' 	=> $sy_id,
	        			'sec_id' 	=> $sec_id,
	        			'qtr_code' 	=> $qtr_code,
	        			'stud_id' 	=> $v, 
	        			'psg_grade' => $b
	        		);

	        		$check_data = array(
	        			'sy_id' 	=> $sy_id,
	        			'sec_id' 	=> $sec_id,
	        			'qtr_code' 	=> $qtr_code,
	        			'stud_id' 	=> $v
	        		);

	        		$check = $this->module->table_where('portal_ps_grade', $check_data);

	        		if($check->num_rows() >= 1){
	        			//update
	        			$psg_id = $check->row('psg_id');
	        			$this->module->delete('portal_ps_grade',array('psg_id' => $psg_id));
	        			//$this->module->update('portal_ps_grade', $save, array('psg_id' => $psg_id));
	        		}

	        		$this->module->insert('portal_ps_grade', $save);
	        	}
	        }
	    }

	    $this->session->unset_userdata('temp_upload');
	    $this->module->my_return(true, 'Success');


	    /*echo '<pre>';
	    print_r($check_data);*/

	    //$check = $this->module->table_where('portal_ps_grade', $check_data);

	    //echo $this->db->last_query();

	    /*if($check->num_rows() > 0 ){
	    	$this->module->my_return(false, 'Cant save to database');
	    	//$this->module->delete('portal_ps_grade', $check_data);
	    }else{
	    	$this->module->my_return(true, 'go');
	    }*/



	    /*if($this->module->batch_insert('portal_ps_grade', $stud_data)){
	    	$this->session->unset_userdata('temp_upload');
	    }else{
	    	$this->module->my_return(false, 'Cant save to database');
	    }*/



		/*$data 	= $this->input->post(null,true);
        foreach($data as $d => $k){

			if(strpos($d, 'stud_img') <> FALSE){
				$img_name 	= empty($k["stud_img"])?'': $k["stud_img"];

				echo $stud_img;
			}
		}*/


	}

	public function view_grades(){

		if(!$this->input->is_ajax_request())
			{
				$data['title'] 			= 'View Grades - Admin';
				$sy_id 					= $this->module->get_active_sy();
				$data['my_learners'] 	= $this->module->get_query("SELECT * FROM v_student_enrollment WHERE sy_id = ".$sy_id." GROUP BY stud_id ORDER BY stud_lastname, stud_firstname");
				//$sy_id 					= $this->module->get_active_sy();
				$data['school_year']	= $this->module->get_query("SELECT * FROM school_year ORDER BY sy_id");
				$this->load->view('portal/admin/view_grades', $data);
			}
		else
			{


				/*===================================================*/

				$stud_id 	= $this->uri->segment(3);
				$sy_id 		= $this->uri->segment(4);

				$flag 	=	1; /*change it to 1 to view the current school year*/

				$check_balance 		= $this->module->get_out_balance($stud_id, $sy_id);
				$oustanding_balance = $check_balance['total'];

				$check_payment_record = $this->module->table_where('v_student_payment', array('stud_id' => $stud_id, 'sy_id' => $sy_id));

				if($check_payment_record->num_rows() > 0){
					if($oustanding_balance > 0 ){

						echo '<h2>Viewing of grades is currently inaccessible.</h2>';
						echo '<h4>You may have overlooked the payment schedule of your child’s account.</h4>';
					}else{
			
						return $this->print_report_card($stud_id,$sy_id);
					}
				}else{

					$check_onhold = $this->module->table_where('portal_onhold', array('sy_id' => $sy_id, 'stud_id' => $stud_id) );
					$onhold =  $check_onhold->row('oh_hold');
					
					if($check_onhold->num_rows() > 0 ){

						if($onhold === 'Y'){
							echo '<h2>Viewing of grades is currently inaccessible.</h2>';
							/*echo '<h4>You may have overlooked the payment schedule of your child’s account.</h4>';*/
						}else{

							if($sy_id == 3 && $flag == 1){
								return $this->print_report_card($stud_id,$sy_id);
							}else{
								echo  '<h2>Viewing of grades is currently inaccessible now.</h2>';
							}
							
						}

					}else{
						if($sy_id == 3 && $flag == 1){
							return $this->print_report_card($stud_id,$sy_id);
						}else{
							echo  '<h2>Viewing of grades is currently inaccessible now.</h2>';
						}
						//echo '<h3>No record found.</h3>';
					}

					

				}


				


			}
	}



	public function view_all_user(){

		$data['title'] 		= 'View All User';
		$data['user']		= $this->module->get_query("SELECT * FROM portal_user WHERE prtl_approve = 'Y' ORDER BY prtl_lname, prtl_fname ASC ");
		$data['learner']    = $this->module->get_query("SELECT * FROM  v_portal_enrollment GROUP BY stud_id");
		$this->load->view('portal/admin/view_all_user', $data);

	}

	public function reset_user_password(){

		if(!$this->input->is_ajax_request())
			{
				$data['title'] 		= 'Reset User Password';
				$this->load->view('portal/admin/reset_user_password', $data);
			}
		else
		{
				$username 	= $this->input->post('username', true);
            	$check 		= $this->module->table_where('portal_user', array('username' => $username)); 

            	if($check->num_rows() < 1){
            		$this->module->my_return(false, 'Check your email address and try again.');
            	}else{

            		$prtl_id 	= $check->row('prtl_id');
            		/*$hrs		= $check->row('prtl_request_date');
            		$hrs_now 	= date('Y-m-d H:i:s');*/

            		$fname 		= $check->row('prtl_fname');
            		$lname 		= $check->row('prtl_lname');

            		//$hrs_diff 	= $this->module->date_diff($hrs, $hrs_now)['hrs'];

            		/*CHECK IF REQUEST IS LESS THAN 1 HOUR*/

            		$code 		= $this->module->gen_otp($cnt=6);
            		$date 		= date('Y-m-d H:i:s');
            		
            		$data_add = array(
            			'prtl_request_code'	=> $code,
            			'prtl_request_date'	=> $date
            		);


            		$update = $this->module->update('portal_user', $data_add, array('prtl_id' => $prtl_id));
		            	
	            	if($update){
	            		$this->module->my_return(true, 'We have sent an email to <strong>'.$username.'</strong> to reset password.<br/>Code: '.$code.'<br/> Date: '.date('m-d-Y, h:m',$date).' ');

	            		//email sending

	            		$msg 	= '<img src="http://portal.isidore.edu.ph/asset/images/logo_portal_dark.png" width="300px" >
								<br/><br/>

								<h2>Verification Code</h2>
								<h3><small>Hi</small> <strong>'.$fname.' '.$lname.'</strong></h3>

								You are receiving this email because we received a password reset request for your account in Isidore Portal. <br/>
								Your verification code is <strong>'.$code.'</strong><br/><br/>

								Click the "Reset Password" button below to start:<br/><br/>

								<a href="http://portal.isidore.edu.ph/portal/reset_password/'.$prtl_id.'" style="background-color:#1f4495;border:1px solid #1f4495;border-radius:3px;color:#ffffff;display:inline-block;font-family:sans-serif;font-size:14px;line-height:30px;text-align:center;text-decoration:none;width:150px;-webkit-text-size-adjust:none;mso-hide:all;">Reset Password</a>
								<br/><br/><br/>
								If there was a problem accessing the button, please click this link: http://portal.isidore.edu.ph/portal/reset_password/'.$prtl_id.'<br/>

								<p>Please click the reset password link to set your new password</p>

								NOTE: Do NOT forward this email or share this code to anyone.';

							$subject = 'Isidore Portal -  Reset Password';
	            		
	                	if(!$this->send_email($msg, $username, $subject )){
	                		$this->module->my_return(false, 'Something went wrong.');
	                	}

	            	}else{
	            		$this->module->my_return(false, 'Unable to send resquest.');
	            	}


            		/*if(empty($hrs) || ($hrs_diff > 1)  ){
            			$update = $this->module->update('portal_user', $data_add, array('prtl_id' => $prtl_id));
		            	
		            	if($update){
		            		$this->module->my_return(true, 'We have sent an email to <strong>'.$username.'</strong> to reset password.<br/>Please click the reset password link to set your new password');

		            		//email sending

		            		$msg 	= '<img src="http://portal.isidore.edu.ph/asset/images/logo_portal_dark.png" width="300px" >
									<br/><br/>

									<h2>Verification Code</h2>
									<h3><small>Hi</small> <strong>'.$fname.' '.$lname.'</strong></h3>

									You are receiving this email because we received a password reset request for your account in Isidore Portal. <br/>
									Your verification code is <strong>'.$code.'</strong><br/><br/>

									Click the "Reset Password" button below to start:<br/>

									<a href="http://portal.isidore.edu.ph/portal/reset_password/'.$prtl_id.'" style="background-color:#1f4495;border:1px solid #1f4495;border-radius:3px;color:#ffffff;display:inline-block;font-family:sans-serif;font-size:14px;line-height:30px;text-align:center;text-decoration:none;width:150px;-webkit-text-size-adjust:none;mso-hide:all;">Reset Password</a>
									<br/><br/><br/>
									If there was a problem accessing the button, please click this link: http://portal.isidore.edu.ph/portal/reset_password/'.$prtl_id.'<br/>

									<p>Please click the reset password link to set your new password</p>

									NOTE: Do NOT forward this email or share this code to anyone.';

								$subject = 'Isidore Portal -  Reset Password';
		            		
		                	if(!$this->send_email($msg, $username, $subject )){
		                		$this->module->my_return(false, 'Something went wrong.');
		                	}

		            	}

            		}else{
            			$this->module->my_return(false, 'You requested less than an hour ago. Please try again later.');
            		}*/
            		
            	}
		}
	}




	public function send_email($msg, $email, $subject){
    
	    $config = array(

	      'protocol'    => 'smtp',
	      'smtp_host'   => 'ssl://smtp.webfaction.com',
	      'smtp_port'   => '465',
	      'smtp_user'   => 'admin_isidore',
	      'smtp_pass'   => 'idsis2016xyz',
	      'mailtype'    => 'html',
	      'charset'   	=> 'iso-8859-1',
	      'wordwrap'    => TRUE
	    );

	    $this->email->initialize($config);
	    $this->email->set_mailtype('html');

	    $this->email->from('admin@isidore.edu.ph', 'Isidore Admin');
	    $this->email->to($email);
	    $this->email->subject( $subject);/*'Isidore Portal - Email Verification'*/
	    $this->email->message($msg);

	    if($this->email->send()){
	      //echo 'email sent';
	      return true;
	    }else{
	      //echo $this->email->print_debugger();
	      return false;
	    }


	}

	

	
}