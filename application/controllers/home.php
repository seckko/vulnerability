<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Home extends CI_Controller {

	function __construct(){

		parent::__construct();

		$is_login 	= $this->session->userdata('prtl_is_login');

		if(!$is_login){
			redirect('portal');
		}

	}

	public function index(){
		$data['title'] = 'Welcome to Isidore Portal';
		$sy_id 				= $this->module->get_active_sy();
		$prtl_id 			= $this->session->userdata('prtl_id');
		$data['enrollment'] = $this->module->get_query("SELECT * FROM v_portal_enrollment WHERE prtl_id = ".$prtl_id." AND prtle_stud_approve = 'Y' GROUP BY stud_id");

		/*$number = '09210635953';
		$code 	= '000000';
		$this->send_itexmo($code, $number);*/

		$this->load->view('portal/dashboard', $data);
	}

	public function view_profile(){
		$data['title'] 			= 'View Profile';
		$sy_id 					= $this->module->get_active_sy();
		$prtl_id 				= $this->session->userdata('prtl_id');
		$stud_id 				= $this->uri->segment(3);
		$data['student_data'] 	= $this->module->table_where('v_portal_enrollment', array('prtl_id' => $prtl_id, 'sy_id' => $sy_id, 'stud_id' => $stud_id));
		$this->load->view('portal/view_profile', $data);
	}

	public function registration(){
		$data['title'] 		= 'Register Learners';
		$prtl_id 			= $this->session->userdata('prtl_id');
		$sy_id 				= $this->module->get_active_sy();
		$data['enrollment'] = $this->module->get_query("SELECT * FROM v_portal_enrollment WHERE prtl_id = ".$prtl_id."  GROUP BY stud_id ORDER BY FIELD (prtle_stud_approve, 'N', 'Y'), stud_lastname ASC");
		$this->load->view('portal/register_learner', $data);
	}

	public function register_learner(){
		/*$this->form_validation->set_rules('stud_lrn', 'Learners LRN', 'trim|required|is_unique[portal_enrollment.stud_lrn]');*/
		$this->form_validation->set_rules('stud_lrn', 'Learners LRN', 'trim');
		//$this->form_validation->set_rules('stud_no', 'Student Number', 'trim|required|is_unique[portal_enrollment.stud_no]');
		$this->form_validation->set_rules('stud_no', 'Student Number', 'trim|required');

		if ($this->form_validation->run() == FALSE)
            {
            	$this->module->my_return(false, validation_errors());
            }
        else
            {	
            	$stud_lrn 			= $this->input->post('stud_lrn', true);
            	$stud_no 			= $this->input->post('stud_no', true);
            	$stud_birthdate 	= date('Y-m-d', strtotime($this->input->post('stud_birthdate', true)));

            	$check_student  = $this->module->table_where('students', array('stud_no' => $stud_no, 'stud_birthdate' => $stud_birthdate )); 
            	$stud_id 		= $check_student->row('stud_id');

            	if($check_student->num_rows() < 1){
            		$this->module->my_return(false, 'No learner record found with the following details: <br/> <br/>LRN : <strong>'.$stud_lrn.'</strong><br/> Student No. : <strong>'.$stud_no.'</strong> <br/> Birthdate : <strong>'.$stud_birthdate.'</strong>');
            	}else{
            		//$this->module->my_return(true, 'Merun pasok');

            		$get_student = $this->module->table_where('students', array('stud_lrn' => $stud_lrn, 'stud_no' => $stud_no, 'stud_birthdate' => $stud_birthdate ));

            		$lrn 			= $get_student->row('stud_lrn');
            		$number 		= $get_student->row('stud_guardian_contact'); 
            		
            		
            		if($stud_lrn <> $lrn){
            			$this->module->my_return(false,'<strong>Incorrect</strong> Learners Reference Number(LRN).');
            		}else{

            			$get_stud_id =  $this->module->table_where('portal_enrollment', array('stud_id' => $stud_id));

        				if($get_stud_id->num_rows() > 0 ){
        					$this->module->my_return(false, 'Learner already registered.');
        				}else{

        					$code = $this->module->gen_otp();

		            		$data = array(
		            			'prtl_id'			=> $this->session->userdata('prtl_id'),	
		            			'stud_id'			=> $stud_id,
		            			'stud_no' 			=> $stud_no, 
		            			'stud_lrn' 			=> $stud_lrn, 
		            			'stud_birthdate' 	=> $stud_birthdate,
		            			'prtle_stud_approve'=> 'N',
		            			'prtle_code'		=> $code,
		            			'stud_msg_cast' 	=> $number,
		            			'prtle_date_apply'	=> date('Y-m-d H:i:s')
		            		);

		            		//print_r($data);

		            		if($this->send_itexmo($code, $number)){
		            			$this->module->insert('portal_enrollment', $data);
		            			$this->module->my_return(true, '<h4 class="m-0">Your application was successful.</h4> A code has been sent to your mobile number for verification.');
		            		}else{
		            			$this->module->my_return(false, 'Something went wrong. Please try again later.');
		            		}
        				}
            		

            			

	            		  /*Please wait for the confirmation and verification from administrator*/

	            		

            		}
            	}
            }

	}



	public function send_itexmo($code, $number){

		/*$number = '09210635953';
		$code 	= 'YEHEY';*/

		$msg 		= "Your verification code is ".$code.". Do not share this with anyone. If you did not request for a code, please call the Isidore hotline."; 
		
		$result = $this->module->itexmo_online($number,$msg);

		if ($result == ""){
		echo "iTexMo: No response from server!!!
		Please check the METHOD used (CURL or CURL-LESS). If you are using CURL then try CURL-LESS and vice versa.	
		Please CONTACT US for help. ";	

		}else if ($result == 0){
			return true;
		}
		else{	
			return false;  /*"Error Num ". $result . " was encountered!";*/
		}
	}

	


	public function delete_enrollment(){
		$prtle_id = $this->uri->segment(3);

		if($this->module->delete('portal_enrollment', array('prtle_id' => $prtle_id)))
		{
			//echo $this->db->last_query();
			return true;
		}
	}

	public function confirm_learner(){
		$prtle_id 	= $this->input->post('prtle_id', true);
		$prtle_code = $this->input->post('prtle_code', true);


		$this->form_validation->set_rules('prtle_code', '6 digit code', 'required');

		if ($this->form_validation->run() == FALSE)
            {
            	$this->module->my_return(false, validation_errors());
            }
        else
            {

				$check_code = $this->module->table_where('portal_enrollment', array('prtle_id' => $prtle_id));
				$code 		= $check_code->row('prtle_code');
				//$stud_id 	= $check_code->row('stud_id');

				//$number 	= $this->module->get_contact_number($stud_id);

				if($code == $prtle_code){
					$this->module->update('portal_enrollment', array('prtle_stud_approve' => 'Y', 'prtle_date_approved' => date('Y-m-d H:i:s')), array('prtle_id' => $prtle_id));
					$this->module->my_return(true, 'Confirmation successful. You can now view learner\'s grades and account.');
				}else{
					$this->module->my_return(false, 'Invalid digit code: <strong>'.$prtle_code.'</strong>');
				}
			}
	}


	public function print_report_card($stud_id, $sy_id){
		//$data['title'] 	= "Report Card";

		//$sy_id 			= $this->module->get_active_sy();
		//$stud_id 		= $this->uri->segment(3);

		$student_data 	= array();
		
		/*GET SUBJECTS*/
		$subject		= $this->module->getTableSort('subject', 'sub_sort');
		
		/*GET STUDENT DATA SEC LVL */
		$students		= $this->module->get_query("SELECT * FROM v_student_section_class_list WHERE stud_id = ".$stud_id." AND sy_id = ".$sy_id."  GROUP BY stud_id"); 

		/*GET QUARTERS*/
		$quarter  			= $this->module->get_table('quarter');
		$data['quarters']	= $quarter;

		/*GET QUARTERLY GRADES*/
		$quarterly_grades 	= $this->module->table_where('v_quarterly_grade', array('stud_id' => $stud_id, 'sy_id' => $sy_id));


		/*GET ATTENDANCE*/
		$attendance  		= $this->module->get_query("SELECT * FROM attendance_hdr WHERE sy_id = ".$sy_id." ORDER BY athdr_sort ASC");
		$attendance_detail 	= $this->module->table_where('v_attendance' , array('stud_id' => $stud_id, 'sy_id' => $sy_id) );


		$attendance_data = array();

		foreach($attendance->result() as $a){

			$month  	= $a->athdr_month;
            $days   	= empty($a->athdr_total_days) ? 0 : $a->athdr_total_days;
            $athdr_id 	= $a->athdr_id;
            //$total 	+= $days;

            //$attendance_detail_data = array();

            $present = 0;
            $absent  = 0;

            foreach($attendance_detail->result() as $t){
            	$tathdr_id 		= $t->athdr_id;
            	$att_present    = $t->att_present;
            	$att_absent    	= $t->att_absent;


            	if($tathdr_id == $athdr_id){

            		$present = $att_present;
            		$absent  = $att_absent;

            		/*array_push($attendance_detail_data, array(
		            	'present'	=> $att_present,
		            	'absent'	=> $att_absent
		            ));*/

            	}
            }



            array_push($attendance_data, array(
            	'month' 		=> $month,
            	'total_days'	=> $days,
            	'present'		=> $present,
            	'absent'		=> $absent
            ));

		}

		//echo '<pre>';
		//print_r($attendance_data);

		$data['attendance'] = $attendance_data;


		/*GET CORE VALUES*/
		$data['core']		= $this->module->get_query("SELECT cv_id, cv_core_value, COUNT(cv_core_value) AS cnt FROM v_values GROUP BY cv_core_value ORDER BY cv_sort ASC");
		$data['values']		= $this->module->get_query("SELECT * FROM v_values ORDER BY cv_sort ASC");
		$data['behavior'] 	= $this->module->table_where('lov_student_values', array('sy_id' => $sy_id, 'stud_id' => $stud_id ));

		$dept_name = '';

		foreach($students->result() as $st){
			$stud_lastname 		= $st->stud_lastname;
			$stud_firstname 	= $st->stud_firstname;
			$stud_middlename 	= $st->stud_middlename;
			$stud_suffix		= $st->stud_suffix;
			$stud_name 			= $stud_lastname.', '.$stud_firstname.' '.$stud_suffix.' '.(empty($stud_middlename) ? '' : substr($st->stud_middlename,0, 1).'.');

			$stud_fullname 		= $stud_firstname.' '.$stud_suffix.' '.(empty($stud_middlename) ? '' : substr($st->stud_middlename,0, 1).'.');
			$sec_id 			= $st->sec_id;
			$lrn 				= $st->stud_lrn;
			$gr_sec 			= $st->lvl_name.' - '.$st->sec_name;
			$stud_img 			= $st->stud_img;
			$dept_name 			= $st->dept_name;
			
				$subject_array 		= array();

				foreach($subject->result() as $sj){
					$sub_name   = $sj->sub_name;
		            $sub_id     = $sj->sub_id; 

		            $subject_det    = $this->module->get_query('SELECT COUNT(*) as cnt FROM subject_detail WHERE sub_id = '.$sub_id.' ')->row('cnt');
		            $subject_detail = $this->module->table_where('subject_detail', array('sub_id' => $sub_id));

		            $check_subject 	= $this->module->table_where('subject_assignment', array('sub_id' => $sub_id, 'sec_id' => $sec_id));
		            
		            if($check_subject->num_rows() > 0){

		            	$quarter_array = array();
		            	foreach($quarter->result() as $q){
							$qtr_code 			= $q->qtr_code;

							$quarterly_grade_array = array();

							$cnt = 0;
		            		$total_grade = 0;

		            		$array_grades = array();


							foreach($quarterly_grades->result() as $qg){
								$qgh_id 			= $qg->qgh_id;
								$qgh_sub_id 		= $qg->sub_id;
								$qgh_subj_det_id 	= $qg->subj_det_id;
								$qgh_qtr_code 		= $qg->qtr_code;
								$qgh_stud_id 		= $qg->stud_id;
								$qgh_grade 			= $qg->quarterly_grade;

								if( ($qgh_qtr_code == $qtr_code) && ($qgh_sub_id == $sub_id)   && ($stud_id == $qgh_stud_id)){
									$cnt ++;
									$total_grade += $qgh_grade;

									/*$a 		 	= array_filter($qgh_grade);
									$average 	= array_sum($a) / count($a);
									$final_ave 	= round($average);*/

									//echo $final_ave.'<br/>';
									//echo $qtr_code.' - '.$sub_id .' - '. $qgh_grade.'<br/>';

									array_push($quarterly_grade_array, array('sub_id' => $qgh_sub_id, 'subj_det_id' => $qg->subj_det_id ,'grade' => $qgh_grade  ));

									array_push($array_grades, $qgh_grade);
									
								}


							}

							/*$a 		 	= array_filter($array_grades);
							$average 	= array_sum($a) / count($a);
							$final_ave 	= round($average);*/

							/*echo $final_ave.'<br/>';*/

							/*$total = round( $total_grade / ($cnt == 0 ? $cnt = 1 : $cnt = $cnt));*/

							$total = round( $total_grade / ($cnt == 0 ? $cnt = 1 : $cnt = $cnt));
							array_push($quarter_array, array('qtr_code' => $qtr_code, 'final_grade' => $total, 'quarterly_grade' => $quarterly_grade_array) );

				       	}

				       	array_push($subject_array, 
			            	array(
			            		'sub_id' 			=> $sub_id,
			            		'sub_name' 			=> $sub_name,
			            		'quarter'			=> $quarter_array

			            	)
			       		);
		            }
		             
		        }

			array_push($student_data, 
            	array(
            		'sy_id'			=> $sy_id,
            		'stud_id' 		=> $stud_id,
            		'stud_name' 	=> $stud_name,
            		'stud_lastname' => $stud_lastname,
            		'stud_fullname' => $stud_fullname,
            		'lrn'			=> $lrn,
            		'gr_sec'		=> $gr_sec,
            		'stud_img'		=> $stud_img,
            		'dept_name'		=> $dept_name,
            		'subjects'		=> $subject_array
            	)
            );


		}

		$data['student_data'] 	= $student_data;

		//$qtr_code 				= $this->module->get_active_portal_qtr_code(); /*change it to quarter visible*/
		//$data['ps_card']		= $this->module->table_where('portal_ps_grade', array('sy_id' => $sy_id, 'stud_id' => $stud_id,  'qtr_code' => $qtr_code));

		//if($dept_name == 'Pre-school'){
			//$check = $this->module->table_where('portal_ps_grade', array('sy_id' => $sy_id, 'stud_id' => $stud_id));
			/*$filename = $check->row('psg_grade');

			if($check->num_rows() >= 1){
				return '<img src="'.base_url().'asset/uploads/PS Grades/'.$filename.' "/>';
			}else{
				return '<h3>No card uploaded.</h3>';
			}*/
			
		//}

		$data['ps_sy_id']		= $sy_id;
		$data['ps_stud_id']		= $stud_id;

		$this->load->view('portal/report_card',$data);

	}

	/*public function print_ps_card(){
		$this->load->view('portal/ps_report_ca',$data);
	}*/

	public function view_grades(){

		if(!$this->input->is_ajax_request())
			{
				$data['title'] 			= 'View Grades';
				$prtl_id 				= $this->session->userdata('prtl_id');
				//$prtl_id 				= 177;
				$data['my_learners'] 	= $this->module->get_query("SELECT * FROM v_portal_enrollment WHERE prtl_id = ".$prtl_id." AND prtle_stud_approve = 'Y' GROUP BY stud_id");

				$sy_id 					= $this->module->get_active_sy();

				$data['school_year']	= $this->module->get_query("SELECT * FROM school_year ORDER BY sy_id");
				$this->load->view('portal/view_grades', $data);
			}
		else
			{
				/*$stud_id 	= $this->input->post('stud_id', true);
				$sy_id 		= $this->input->post('sy_id', true);*/

				/*===================================================*/
				/*OLD FUNCTION BEFORE ECQ*/
				
				/*$stud_id 	= $this->uri->segment(3);
				$sy_id 		= $this->uri->segment(4);

				$check_balance 		= $this->module->get_out_balance($stud_id, $sy_id);
				$oustanding_balance = $check_balance['total'];

				$check_payment_record = $this->module->table_where('v_student_payment', array('stud_id' => $stud_id, 'sy_id' => $sy_id));

				if($check_payment_record->num_rows() > 0){
					if($oustanding_balance > 0 ){

						echo '<h2>Viewing of grades is currently inaccessible.</h2>';
						echo '<h4>You may have overlooked the payment schedule of your child’s account. Please check your child’s statement of account by clicking the ‘<strong>Check Accounts</strong>’ on the menu.</h4>';
					}else{

						return $this->print_report_card($stud_id,$sy_id);

					}
				}else{
					echo '<h3>No record found.</h3>';
				}*/

				/*===================================================*/

				$stud_id 	= $this->uri->segment(3);
				$sy_id 		= $this->uri->segment(4);
				//$stud_id 	= 317;

				$flag 	=	1; /*change it to 1 to view the current school year*/

				

				$check_balance 		= $this->module->get_out_balance($stud_id, $sy_id);
				$oustanding_balance = $check_balance['total'];

				$check_payment_record = $this->module->table_where('v_student_payment', array('stud_id' => $stud_id, 'sy_id' => $sy_id));

				if($check_payment_record->num_rows() > 0){
					if($oustanding_balance > 0 ){

						echo '<h2>Viewing of grades is currently inaccessible.</h2>';
						echo '<h4>You may have overlooked the payment schedule of your child’s account.</h4>';
					}else{
			
						return $this->print_report_card($stud_id,$sy_id);
					}
				}else{

					$check_onhold = $this->module->table_where('portal_onhold', array('sy_id' => $sy_id, 'stud_id' => $stud_id) );
					$onhold =  $check_onhold->row('oh_hold');
					
					if($check_onhold->num_rows() > 0 ){

						if($onhold === 'Y'){
							echo '<h2>Viewing of grades is currently inaccessible.</h2>';
							/*echo '<h4>You may have overlooked the payment schedule of your child’s account.</h4>';*/ /*for temporary on hold*/
						}else{

							if($sy_id == 3 && $flag == 1){
								return $this->print_report_card($stud_id,$sy_id);
							}else{
								echo  '<h2>Viewing of grades is currently inaccessible.</h2>';
							}
							
						}

					}else{
						if($sy_id == 3 && $flag == 1){
							return $this->print_report_card($stud_id,$sy_id);
						}else{
							echo  '<h2>Viewing of grades is currently inaccessible.</h2>';
						}
						//echo '<h3>No record found.</h3>';
					}

					

				}


				


			}
	}

	public function view_due_accounts(){

		if(!$this->input->is_ajax_request())
			{
				$data['title'] 			= 'Accounts';
				$sy_id 					= $this->module->get_active_sy();
				$data['sy_id']			= $sy_id;

				$prtl_id 	 			= $this->session->userdata('prtl_id');
				$data['my_learners'] 	= $this->module->get_query("SELECT * FROM v_portal_enrollment WHERE prtl_id = ".$prtl_id." AND prtle_stud_approve = 'Y' GROUP BY stud_id");
				//$data['school_year']	= $this->module->get_query("SELECT * FROM school_year ORDER BY sy_id");
				$this->load->view('portal/view_due_accounts', $data);
			}
		else{

				$stud_id 	= $this->uri->segment(3);
				$sy_id 		= $this->uri->segment(4);

				return $this->print_learner_due($stud_id,$sy_id);
				

			}
	}

	public function view_due_account(){
		$data['title'] 			= 'Accounts';
		$stud_id 				= $this->uri->segment(3);
		$sy_id 					= $this->uri->segment(4);

		$data['learner_info'] 	= $this->module->table_where('students', array( 'stud_id' => $stud_id));
		$data['learner_enroll'] = $this->module->table_where('v_student_enrollment', array( 'stud_id' => $stud_id, 'sy_id' => $sy_id, 'se_status' => 'Enrolled' ));
		$data['learner_payment'] = $this->module->table_where('v_student_payment', array( 'stud_id' => $stud_id, 'sy_id' => $sy_id, 'se_status' => 'Enrolled' ));
		$data['sy_id'] 			= $sy_id; 

		$prtl_id 	 			= $this->session->userdata('prtl_id');
		$data['my_learners'] 	= $this->module->get_query("SELECT * FROM v_portal_enrollment WHERE prtl_id = ".$prtl_id." AND prtle_stud_approve = 'Y' GROUP BY stud_id");
		$data['school_year']	= $this->module->get_query("SELECT * FROM school_year ORDER BY sy_id");

		//$data['test'] =  $this->print_learner_due($stud_id,$sy_id);

		$this->load->view('portal/view_learner_due_account', $data);

	}

	public function print_learner_due($stud_id,$sy_id){

		$data['learner_info'] 	= $this->module->table_where('students', array( 'stud_id' => $stud_id));
		$data['learner_enroll'] = $this->module->table_where('v_student_enrollment', array( 'stud_id' => $stud_id, 'sy_id' => $sy_id, 'se_status' => 'Enrolled' ));
		$data['learner_payment'] = $this->module->table_where('v_student_payment', array( 'stud_id' => $stud_id, 'sy_id' => $sy_id, 'se_status' => 'Enrolled' ));
		$data['sy_id'] 			= $sy_id; 
		$data['school_year']	= $this->module->get_query("SELECT * FROM school_year ORDER BY sy_id");

		$this->load->view('portal/view_due_learner', $data);
	}

	public function logout(){

		$sess_data['prtl_id'] 			= "";
		$sess_data['prtl_username'] 	= "";
		$sess_data['prtl_fname'] 		= "";
		$sess_data['prtl_lname'] 		= "";
		$sess_data['prtl_gender'] 		= "";
		$sess_data['prtl_is_login']		= false;
		$sess_data['prtl_role'] 		= "";
	
		
		$this->session->unset_userdata('prtl_id');
		$this->session->unset_userdata('prtl_username');
		$this->session->unset_userdata('prtl_fname');
		$this->session->unset_userdata('prtl_lname');
		$this->session->unset_userdata('prtl_gender');
		$this->session->unset_userdata('prtl_is_login');
		$this->session->unset_userdata('prtl_role');

		$this->session->unset_userdata($sess_data);
		$this->session->sess_destroy();
		
		
		header("cache-Control: no-store, no-cache, must-revalidate");
		header("cache-Control: post-check=0, pre-check=0", false);
		header("Pragma: no-cache");
		header("Expires: Sat, 26 Jul 1997 05:00:00 GMT"); // Date in the past
		redirect('portal','refresh'); 
	}



	public function view_due(){

		$sy_id 				= $this->module->get_active_sy();
		$sy_last_payment  	= $this->module->table_where('school_year', array('sy_id' => $sy_id))->row('sy_last_payment');

		$prtl_id 	 		= $this->session->userdata('prtl_id');
		$my_learners 		= $this->module->get_query("SELECT * FROM v_portal_enrollment WHERE prtl_id = ".$prtl_id." GROUP BY stud_id");



		$learners_due = [];

		foreach ($my_learners->result() as $l){
			$stud_id 		= $l->stud_id;
			$balance    	= $this->module->get_out_balance($stud_id, $sy_id );
            $payment_mode  	= $balance['payment_mode'];
            $is_scholar 	= $balance['is_scholar'];
            $installment 	= $balance['student_tf'];


            $student_name  = $l->stud_lastname.', '. $l->stud_firstname.' '.$l->stud_suffix;
            $gr_section    = $l->lvl_name.'-'.$l->sec_name;

            /*PAYMENT RECORD - TUITION FEE*/
            $payment_record = $this->module->get_payment_record($sy_id, $stud_id);

            array_push($learners_due, array(
            	'stud_id' 		=> $stud_id,
            	'student_name' 	=> $student_name,
            	'gr_section' 	=> $gr_section,
            	'payment_mode' 	=> $payment_mode,
            	'is_scholar'	=> $is_scholar,
            	'payment_record' => $payment_record
            ));
		}

		/*$datetime1 	= new DateTime('2020-01-31');
		$datetime2 	= new DateTime('2020-01-30');
		$interval 	= $datetime1->diff($datetime2);
		$elapsed 	= $interval->format('%y years %m months %a days %h hours %i minutes %s seconds');
		echo $elapsed;*/


		/*$date1 = '2020-01-30';
		$date2 = '2020-01-29';

		$ts1 = strtotime($date1);
		$ts2 = strtotime($date2);

		$year1 = date('Y', $ts1);
		$year2 = date('Y', $ts2);

		$month1 = date('m', $ts1);
		$month2 = date('m', $ts2);

		echo $diff = (($year2 - $year1) * 12) + ($month2 - $month1);*/

		echo '<pre>';
		print_r($learners_due);
		echo '</pre>';


	}


	public function school_fees(){
		$data['title'] = 'View School Fees';
		$this->load->view('portal/view_school_fees', $data);
	}


	


	


}