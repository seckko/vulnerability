<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Module {

  var $ci;

  public function  __construct(){
    $this->ci =& get_instance();

  }

  public function get_query($query){
    return $this->ci->db->query($query);
  }

  public function getTableSort($table,$sort) {
    $this->ci->db->from($table);
    $this->ci->db->order_by($sort, "asc");
    return $query = $this->ci->db->get(); 
    /*return $query->result();

    $this->ci->db->get($query);
    return $this->ci->db->order_by($sort,'asc'); */
  }



  public function get_table($query) {
   return $this->ci->db->get($query);
  }

 public function table_where($table,$where,$select ="*"){
    return $this->ci->db->select($select)->get_where($table,$where);
 }


 public function is_exsist($table,$where,$field){
    return ($this->ci->db->select($field)->limit(1)->get_where($table,$where)->num_rows() < 1? false:true);
 }

  public function public_insert($table,$data,$msg = "Successfully save entry.",$return_json = true){
    if($this->ci->db->insert($table,$data) === false){
      if($return_json){
        $this->my_return(false,$this->ci->db->_error_message());
      }else{
        return $this->return_object(false,$this->ci->db->_error_message());
      }
    }else{
      if($return_json){
        $this->my_return(true,$msg);
      }
      else{
        return $this->return_object(true,$msg);
      }
    }
  }

  public function insert($table,$data){
    if($this->ci->db->insert($table,$data) === false){
      return $this->ci->db->_error_message();
    }
    else{
      return TRUE;
    }
  }

  public function public_insert_with_id($table,$data,$return_json = true){
    if($this->ci->db->insert($table,$data) === false){
      if($return_json){
        $this->my_return(false,$this->ci->db->_error_message());
      }else{
        return $this->return_object(false,$this->ci->db->_error_message());
      }
    }else{
      if($return_json){
        $this->my_return(true,$this->ci->db->insert_id());
      }else{
        return $this->return_object(true,$this->ci->db->insert_id());
      }

    }
  }



  public function batch_insert($table,$data,$msg = "Successfully save batch entry.",$return_json = true){

    if($this->ci->db->insert_batch($table,$data) === false){
      if($return_json){
        $this->my_return(false,$this->ci->db->_error_message());
      }else{
      return $this->return_object(false,$this->ci->db->_error_message());
      }
    }else{
      if($return_json){
        $this->my_return(true,$msg);
      }else{
        return $this->return_object(true,$msg);
      }
    }
  }

  public function mybatch_insert($table,$data,$return_json = true){

    if($this->ci->db->insert_batch($table,$data) === false){
      if($return_json){
        $this->my_return(false,$this->ci->db->_error_message());
      }else{
      return $this->return_object(false,$this->ci->db->_error_message());
      }
    }else{
      if($return_json){
        //$this->my_return(true,$msg);
        return true;
      }else{
        return $this->return_object(true);
      }
    }
  }

  public function batch_update($table,$data,$id,$msg = "Update success.",$return_json = true){
    if($this->ci->db->update_batch($table,$data,$id) === false){
      if($return_json){
        $this->my_return(false,$this->ci->db->_error_message());
      }else{
        return $this->return_object(false,$this->ci->db->_error_message());
      }
    }else{
      if($return_json){
        $this->my_return(true,$msg);
      }else{
        return $this->return_object(true,$msg);
      }
    }
  }

  public function public_update($table,$data,$id,$msg="Update success.",$return_json= true){
    if($this->ci->db->update($table,$data,$id) === false){
      if($return_json){
        $this->my_return(false,$this->ci->db->_error_message());
      }else{
        return $this->return_object(false,$this->ci->db->_error_message());
      }
    }else{
      if($return_json){
        $this->my_return(true,$msg);
      }else{
        return $this->return_object(true,$msg);
      }
    }
  }

  public function update($table,$data,$id){
    if($this->ci->db->update($table,$data,$id) === false){
      return $this->ci->db->_error_message();
    }
    else{
      return TRUE;
    }
  }

  public function public_delete($table,$id, $msg ="Deleted.",$return_json = true){
    if($this->ci->db->delete($table,$id) === false){
      if($return_json){
       $this->my_return(false,$this->ci->db->_error_message());
      }else{
      return $this->return_object(false,$this->ci->db->_error_message());
      }
    }else{
      if($return_json){
        $this->my_return(true,$msg);
      }else{
        return $this->return_object(true,$msg);
      }
    }
  }

  public function delete($table,$id){
    if($this->ci->db->delete($table,$id) === false){
      return $this->ci->db->_error_message();
    }
    else{
      return TRUE;
    }
  }

  public function get_max_sorting($table,$where,$field){
   return $this->ci->db->select_max($field)->get_where($table, $where,1);
  }

  //get the default format
  public function get_datetime($f = "Y-m-d h:i:s"){
   $time_zone = new DateTimeZone('Asia/Manila');
   $datetime = new DateTime();
   $datetime->setTimezone($time_zone);
   return date_format($datetime, $f);
  }

  public function get_dateformat($date,$format = "Y-m-d"){
   $date = new DateTime($date);
   return $date->format($format);
  }

  public function timelapse($datetime, $full = false) {
    $etime = strtotime($this->get_datetime("Y-m-d H:i:s")) - strtotime($datetime);
      if ($etime < 1) {
      return '0 seconds';
    }

    $interval = array( 12 * 30 * 24 * 60 * 60  =>  'year',
      30 * 24 * 60 * 60       =>  'month',
      24 * 60 * 60            =>  'day',
      60 * 60                 =>  'hour',
      60                      =>  'minute',
      1                       =>  'second'
    );

    foreach ($interval as $secs => $str) {
      $d = $etime / $secs;
      if ($d >= 1) {
       $r = round($d);
                            // return $r . ' ' . $str . ($r > 1 ? 's ago' : ' ago');
       return $r . ' ' . $str . ($r > 1 ? '' : '');
      }
    }
  }

  public function format_code($code,$cnt = 5,$format = "0"){
   return str_pad($code, $cnt, $format, STR_PAD_LEFT);
  }

    //encryption and decryption
  public function get_encode($str){
   return base64_encode(base64_encode($str));
  }

  public function get_decode($str){
   return base64_decode(base64_decode($str));
  }


  public function get_md5($str){
   return md5($this->get_encode($str));
  }


  public function ping_server($server =""){
   return base_url();
  }


  public function is_log_in(){
  //$is_log = $level = "";
  //$level   = $this->ci->session->userdata("type");
  /*switch ($level) {
      case 'admin':
      redirect('admin');
    break;
    case 'agent':
      redirect('agent');
    break;
    }*/
  
  $is_log  = $this->ci->session->userdata("usr_is_in");
 
    if($is_log<1){
      redirect('auth');
    }
  }


  public function check_session(){
   $sess_data = $this->ci->session->all_userdata();
   print_r($sess_data);
  }


  public function unset_sessions(){
    $sess_data = $this->ci->session->all_userdata();
    $arr_static = array("session_id","ip_address","last_activity","user_agent","user_data","ip_user_username","logged_in","ip_user_role","ip_user_id");
    $arr_remove = array();
    foreach ($sess_data as $key =>$v ) {
      if(!in_array($key, $arr_static)){
       $this->ci->session->unset_userdata(array($key=>""));
      }
    }
  }



  public function gen_password($cnt = 8){
   $letters = 'abcefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';
   return substr(str_shuffle($letters), 0, $cnt);
  }

  public function gen_uniq_id($cnt = 6) {
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $string     = substr(str_shuffle($characters), 0, $cnt);
    $now        = strtotime($this->get_datetime());
    $uniq_id    = $string;
    return $uniq_id;
  }

  public function gen_otp($cnt = 6) {
    $characters = '0123456789';
    $string     = substr(str_shuffle($characters), 0, $cnt);
    $now        = strtotime($this->get_datetime());
    $uniq_id    = $string;
    return $uniq_id;
  }


  public function gen_queue_no($number){

    $format  = 'N'.date('ynj').'-';
    if($number <= 9){
      $format .= '000'.$number;
    }

    else if($number <= 99){
      $format .= '00'.$number;
    }

    else if($number <= 999){
      $format .= '0'.$number;
    }

    else {
      $format .= $number;
    }

    return $format;

  }


  public function gen_stud_no($number){

    $format  = date('y').'-';
    if($number <= 9){
      $format .= '00'.$number;
    }

    else if($number <= 99){
      $format .= '0'.$number;
    }

    else if($number <= 999){
      $format .= $number;
    }

    else {
      $format .= $number;
    }

    return $format;

  }


  public function gen_pagination($config = array()){
   /* $config['full_tag_open'] = '<div class="pagination pagination-small"><ul>';
    $config['full_tag_close'] = '</ul></div><!--pagination-->'; */
   $config['full_tag_open']       = '<ul class="pagination">';
      $config['full_tag_close']   = '</ul>';
      $config['first_link']       = '&laquo; First';
      $config['first_tag_open']   = '<li class="prev page">';
      $config['first_tag_close']  = '</li>';
      $config['last_link']        = 'Last &raquo;';
      $config['last_tag_open']    = '<li class="next page">';
      $config['last_tag_close']   = '</li>';
      $config['next_link']        = 'Next &rarr;';
      $config['next_tag_open']    = '<li class="next page">';
      $config['next_tag_close']   = '</li>';
      $config['prev_link']        = '&larr; Previous';
      $config['prev_tag_open']    = '<li class="prev page">';
      $config['prev_tag_close']   = '</li>';
      $config['cur_tag_open']     = '<li class="active"><a href="">';
      $config['cur_tag_close']    = '</a></li>';
      $config['num_tag_open']     = '<li class="page">';
      $config['num_tag_close']    = '</li>';
    /*echo $this->db->last_query();echo $result->num_rows();*/
    $this->ci->pagination->initialize($config);
    return $this->ci->pagination->create_links();

  }

  /*public function check_max_section($sy_id, $sec_id){
    $reservation  = $this->get_query("select dept_name, count(*) as rcnt from v_reservation where sy_id = ".$sy_id." and sec_id = ".$sec_id." ");
    $assessment   = $this->get_query("select count(*) as acnt from v_student_enrollment_assessment where sy_id = ".$sy_id." and sec_id = ".$sec_id." ");

    $rcnt       = $reservation->row('rcnt');
    $acnt       = $assessment->row('acnt');
    $rdept_name = $reservation->row('dept_name');
    $adept_name = $assessment->row('dept_name');
    $count      = $rcnt + $acnt;

    if( ($rdept_name == 'Pre-School') && ( $adept_name == 'Pre-School') ){
      if($count <= 15){
        return 'Section is full.';
      }else{
        return true;
      }
    }else{
      if($count <= 25){
        return 'Section is full.';


      }else{
        return true;
      }
    }

    

    if( ($rdept_name == 'Pre-School')  ) { || ($adept_name == 'Pre-School')
      if($count < 15){
        return true;
      }else{
        return false;
      }
    }else{
      if($count < 25){
        return true;
      }else{
        return false;
      }
    }

  }*/


  public function get_purchase_no(){
    $code = $this->get_query("select max(int_id) as int_code from isoft_merchant_header");
    $code = $code->row("int_code");
    $code = (empty($code)? 1:$code+1 );
    return "PO".$this->get_datetime("Ymd").$this->format_code($code,7,0);
  }

   public function get_or_no(){
    $code = $this->get_query("select max(id) as po_no from isoft_paysol_or_header");
    $code = $code->row("po_no");
    $code = (empty($code)? 1:$code+1 );
    return $this->get_datetime("Yd")."OR".$this->format_code($code,5,0);
    }

    public function get_new_student_no(){
      $sy_id  = $this->get_active_sy(); 
      $code   = $this->get_query("select count(se_id) as se_id from student_enrollment where se_stud_type ='N' and sy_id = ".$sy_id." ");
      $code   = $code->row("se_id");
      $code   = (empty($code)? 1:$code+1 );
      return date('y-').$this->format_code($code,3,0);
    }

    public function get_queue_no(){
      $sy_id = $this->get_active_sy(); 
      $code = $this->get_query("select max(sa_id) as sa_id from student_assessment where sy_id = ".$sy_id." ");
      $code = $code->row("sa_id");
      $code = (empty($code)? 1:$code+1 );
      return 'Q'.date('y-').$this->format_code($code,5,0);
    }


    public function get_active_sy(){
    $code = $this->get_query("SELECT * FROM school_year WHERE sy_is_active ='Y' ");
    $code = $code->row("sy_id");
    return $code;
    }

    public function get_selected_sy(){
    $code = $this->get_query("SELECT * FROM school_year WHERE sy_selected ='Y' ");
    $code = $code->row("sy_id");
    return $code;
    }

    public function get_active_qtr_code(){
    $code = $this->get_query("SELECT * FROM quarter WHERE qtr_active ='Y' ");
    $code = $code->row("qtr_code");
    return $code;
    }

    public function get_active_portal_qtr_code(){
    $code = $this->get_query("SELECT * FROM portal_quarter");
    $code = $code->row("qtr_code");
    return $code;
    }

    public function get_active_qtr_name(){
    $code = $this->get_query("SELECT * FROM quarter WHERE qtr_active ='Y' ");
    $code = $code->row("qtr_name");
    return $code;
    }

    public function get_active_sy_name(){
    $code = $this->get_query("SELECT * FROM school_year WHERE sy_is_active ='Y' ");
    $code = $code->row("sy_name");
    return $code;
    }

    public function get_active_sy_selected(){
    $code = $this->get_query("SELECT * FROM school_year WHERE sy_selected ='Y' ");
    $code = $code->row("sy_id");
    return $code;
    }

    public function get_active_sy_selected_name(){
    $code = $this->get_query("SELECT * FROM school_year WHERE sy_selected ='Y' ");
    $code = $code->row("sy_name");
    return $code;
    }

    public function get_stud_section($stud_id){
    $code = $this->get_query("SELECT s.`sec_name` from section_assignment as sa, section as s  WHERE s.`sec_id` = sa.`sec_id` AND sa.`stud_id` = ".$stud_id." ");
    
    $sec_name = '';
    if($code->num_rows < 1 ){
      $sec_name = '- <span class="badge badge-danger "> Assign to section</span>';
    }else{
      $sec_name = ' - '.$code->row('sec_name');
    }

    $code = $sec_name;
    return $code;
    }

    public function get_student_section($sec_id){
    $sy_id  = $this->get_active_sy();

    if(empty($sec_id) || $sec_id == 0 ){
      $sec_id = 0;
    }else{
      $sec_id = $sec_id;
    }

    $code = $this->get_query("SELECT * from v_sy_section  WHERE sec_id = ".$sec_id." AND sy_id = ".$sy_id." ");
    
    $sec_name = '';

    if($code->num_rows < 1 ){
      $sec_name = '- <span class="badge badge-danger "> Assign to section</span>';
    }else{
      $sec_name = ' - '.$code->row('sec_name');
    }

    $code = $sec_name;
    return $code;
    }

    public function get_stud_section_id($stud_id){
    $code = $this->get_query("SELECT s.`sec_id` from section_assignment as sa, section as s  WHERE s.`sec_id` = sa.`sec_id` AND sa.`stud_id` = ".$stud_id." ");
    
    $sec_id = 0;
    if($code->num_rows < 1 ){
      $sec_id = 0;
    }else{
      $sec_id = $code->row('sec_id');
    }

    $code = $sec_id;
    return $code;
    }


  public function clean_string($string){
    return preg_replace('/[^A-Za-z0-9\-]/', '', $string);
  }

  public function parse_word($var){
    switch ($var) {
      case 'M':
      echo 'Married';
      break;
      case 'W':
      echo 'Widowed';
      break;
      case 'L':
      echo 'Legally Separated';
      break;
      case 'A':
      echo 'Annulled';
      break;
      case 'S':
      echo 'Single';
      break;
    }
  }


  public function get_case_status($code){
    $case_stat    = $this->table_where("ip_case_status",array("ip_stat_id"=>$code),"ip_stat_id,ip_stat_desc");
    $case_stat    = $case_stat->row();
    return (object) array("ip_stat_id"=>$case_stat->ip_stat_id,"ip_stat_desc"=>$case_stat->ip_stat_desc);
  }

  public function get_soa_no($soa = ""){
    if(empty($soa)){
      $soa = $this->get_query("SELECT MAX(ip_soa_id) AS ip_soa_id FROM ip_accnt_soa LIMIT 1");
      $soa = $soa->row("ip_soa_id");
      $soa = $soa+1;
    }
    return "00080".$this->get_datetime('Y').$this->format_code($soa,7);
  }


  public function get_case_code($or = ""){
    if(empty($or)){
     $or = $this->get_query("SELECT MAX(ip_case_id) AS ip_case_id FROM ip_case ");
     $or = $or->row("ip_case_id") + 1;

   }
   return  '99-'. $this->get_datetime('Y').'-'.$this->format_code($or,7);
  }

  public function get_lu_voters_id($table ='lu_voters' , $field = 'app_id' , $split = '.', $cnt = 2){
    $sql = "
    SELECT
    SUBSTRING_INDEX(SUBSTRING_INDEX(".$field.", '".$split."', ".$cnt."), '".$split."', -1)+1 AS ".$field."
    FROM
    ".$table."
    WHERE
    ".$field."
    IN
    (SELECT MAX(".$field.") FROM ".$table.")
    LIMIT 1
    ";
    $code = $this->ci->db->query($sql);
    $code= $code->row($field);
    $code = (empty($code)? 1:$code );
    return $this->format_code($code,$cnt);
  }

  //return only a specific detail of a person
  public function get_person_detail($table = "",$where = array(),$select = "*"){
    $agent = $this->ci->db->select($select)->get_where($table,$where,1);
    foreach ($agent->result() as $k => $v) {}
      return (object) $v;
  }

  public function return_object($successful,$message = "Save!"){
    return (object) array('stat'=> $successful,'msg'=> $message);
  }

  public function my_return($successful, $message){
    echo json_encode(array(
     'stat'   => $successful,
     'msg'  => $message
     ));
  }

  public function new_return($message){
    echo json_encode(array(
     'msg'  => $message
     ));
  }

  public function cust_return($stat, $msg, $id){
    echo json_encode(array(
     'stat' => $stat,
     'msg'  => $msg,
     'id'   => $id
     ));
  }

   public function get_random_cards($chars_min=8, $chars_max=11, $use_upper_case=false, $include_numbers=false, $include_special_chars=false)
    {
        $length = rand($chars_min, $chars_max);
        $selection = '1234567890aeuoyibcdfghjklmnpqrstvwxz';
        if($include_numbers) {
            $selection .= "1234567890";
        }
        if($include_special_chars) {
            $selection .= "!@\"#$%&[]{}?|";
        }

        $password = "";
        for($i=0; $i<$length; $i++) {
            $current_letter = $use_upper_case ? (rand(0,1) ? strtoupper($selection[(rand() % strlen($selection))]) : $selection[(rand() % strlen($selection))]) : $selection[(rand() % strlen($selection))];
            $password .=  $current_letter;
        }

        return $password;
  }

public function get_ip_address() {
    $ip_keys = array('HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'HTTP_X_FORWARDED', 'HTTP_X_CLUSTER_CLIENT_IP', 'HTTP_FORWARDED_FOR', 'HTTP_FORWARDED', 'REMOTE_ADDR');
    foreach ($ip_keys as $key) {
        if (array_key_exists($key, $_SERVER) === true) {
            foreach (explode(',', $_SERVER[$key]) as $ip) {
                // trim for safety measures
                $ip = trim($ip);
                // attempt to validate IP
                if ($this->validate_ip($ip)) {
                    return $ip;
                }
            }
        }
    }
      return isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : false;
  }
  /**
   * Ensures an ip address is both a valid IP and does not fall within
   * a private network range.
   */
public function validate_ip($ip)
{
  if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 | FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) === false) {
      return false;
  }
  return true;
}

public function geolocate($ip){
   $raw_html = file_get_contents("http://www.geody.com/geoip.php?ip=$ip");
   if(preg_match('/Location:(.*)/',$raw_html,$matches)){
     $location_raw = $matches[1];

     //Get rid of pesky HTML tags
     $location = preg_replace("/<[^>]*>/","",$location_raw);
     return $location;
   }else{
     return "ERROR";
   }
}

public function is_bot($user_agent){
  $botlist = array("Teoma", "alexa", "froogle", "Gigabot", "inktomi",
                    "looksmart", "URL_Spider_SQL", "Firefly", "NationalDirectory",
                    "Ask Jeeves", "TECNOSEEK", "InfoSeek", "WebFindBot", "girafabot",
                    "crawler", "www.galaxy.com", "Googlebot", "Scooter", "Slurp",
                    "msnbot", "appie", "FAST", "WebBug", "Spade", "ZyBorg", "rabaz",
                    "Baiduspider", "Feedfetcher-Google", "TechnoratiSnoop", "Rankivabot",
                    "Mediapartners-Google", "Sogou web spider", "WebAlta Crawler","TweetmemeBot",
                    "Butterfly","Twitturls","Me.dium","Twiceler");
  foreach($botlist as $bot){
      if(strpos($user_agent, $bot) !== false)
      return true;
    }
  return false;
}

public function get_geolocation($ip){
  $d = file_get_contents("http://www.ipinfodb.com/ip_query.php?ip=$ip&output=xml");
  //Use backup server if cannot make a connection
  if (!$d) {
    $backup = file_get_contents("http://backup.ipinfodb.com/ip_query.php?ip=$ip&output=xml");
    $result = new SimpleXMLElement($backup);
  if (!$backup)
    return false; // Failed to open connection
  } else {
    $result = new SimpleXMLElement($d);
  }
  //Return the data as an array
  return array('ip'=>$ip, 'country_code'=>$result->CountryCode, 'country_name'=>$result->CountryName, 'region_name'=>$result->RegionName, 'city'=>$result->City, 'zip_postal_code'=>$result->ZipPostalCode, 'latitude'=>$result->Latitude, 'longitude'=>$result->Longitude, 'timezone'=>$result->Timezone, 'gmtoffset'=>$result->Gmtoffset, 'dstoffset'=>$result->Dstoffset);

}

public function userAgentParser( $u_agent = null ){
    if( is_null($u_agent) ) {
      if( isset($_SERVER['HTTP_USER_AGENT']) ) {
        $u_agent = $_SERVER['HTTP_USER_AGENT'];
      } else {
        throw new \InvalidArgumentException('parse_user_agent requires a user agent');
      }
    }
    $platform = null;
    $browser  = null;
    $version  = null;
    $empty = array( 'platform' => $platform, 'browser' => $browser, 'version' => $version );
    if( !$u_agent ) return $empty;
    if( preg_match('/\((.*?)\)/im', $u_agent, $parent_matches) ) {
      preg_match_all('/(?P<platform>BB\d+;|Android|CrOS|Tizen|iPhone|iPad|iPod|Linux|Macintosh|Windows(\ Phone)?|Silk|linux-gnu|BlackBerry|PlayBook|(New\ )?Nintendo\ (WiiU?|3?DS)|Xbox(\ One)?)
          (?:\ [^;]*)?
          (?:;|$)/imx', $parent_matches[1], $result, PREG_PATTERN_ORDER);
      $priority           = array( 'Xbox One', 'Xbox', 'Windows Phone', 'Tizen', 'Android' );
      $result['platform'] = array_unique($result['platform']);
      if( count($result['platform']) > 1 ) {
        if( $keys = array_intersect($priority, $result['platform']) ) {
          $platform = reset($keys);
        } else {
          $platform = $result['platform'][0];
        }
      } elseif( isset($result['platform'][0]) ) {
        $platform = $result['platform'][0];
      }
    }
    if( $platform == 'linux-gnu' ) {
      $platform = 'Linux';
    } elseif( $platform == 'CrOS' ) {
      $platform = 'Chrome OS';
    }
    preg_match_all('%(?P<browser>Camino|Kindle(\ Fire)?|Firefox|Iceweasel|Safari|MSIE|Trident|AppleWebKit|TizenBrowser|Chrome|
        Vivaldi|IEMobile|Opera|OPR|Silk|Midori|Edge|CriOS|
        Baiduspider|Googlebot|YandexBot|bingbot|Lynx|Version|Wget|curl|
        NintendoBrowser|PLAYSTATION\ (\d|Vita)+)
        (?:\)?;?)
        (?:(?:[:/ ])(?P<version>[0-9A-Z.]+)|/(?:[A-Z]*))%ix',
      $u_agent, $result, PREG_PATTERN_ORDER);
    // If nothing matched, return null (to avoid undefined index errors)
    if( !isset($result['browser'][0]) || !isset($result['version'][0]) ) {
      if( preg_match('%^(?!Mozilla)(?P<browser>[A-Z0-9\-]+)(/(?P<version>[0-9A-Z.]+))?%ix', $u_agent, $result) ) {
        return array( 'platform' => $platform ?: null, 'browser' => $result['browser'], 'version' => isset($result['version']) ? $result['version'] ?: null : null );
      }
      return $empty;
    }
    if( preg_match('/rv:(?P<version>[0-9A-Z.]+)/si', $u_agent, $rv_result) ) {
      $rv_result = $rv_result['version'];
    }
    $browser = $result['browser'][0];
    $version = $result['version'][0];
    $lowerBrowser = array_map('strtolower', $result['browser']);
    $find = function ( $search, &$key ) use ( $lowerBrowser ) {
      $xkey = array_search(strtolower($search), $lowerBrowser);
      if( $xkey !== false ) {
        $key = $xkey;
        return true;
      }
      return false;
    };
    $key  = 0;
    $ekey = 0;
    if( $browser == 'Iceweasel' ) {
      $browser = 'Firefox';
    } elseif( $find('Playstation Vita', $key) ) {
      $platform = 'PlayStation Vita';
      $browser  = 'Browser';
    } elseif( $find('Kindle Fire', $key) || $find('Silk', $key) ) {
      $browser  = $result['browser'][$key] == 'Silk' ? 'Silk' : 'Kindle';
      $platform = 'Kindle Fire';
      if( !($version = $result['version'][$key]) || !is_numeric($version[0]) ) {
        $version = $result['version'][array_search('Version', $result['browser'])];
      }
    } elseif( $find('NintendoBrowser', $key) || $platform == 'Nintendo 3DS' ) {
      $browser = 'NintendoBrowser';
      $version = $result['version'][$key];
    } elseif( $find('Kindle', $key) ) {
      $browser  = $result['browser'][$key];
      $platform = 'Kindle';
      $version  = $result['version'][$key];
    } elseif( $find('OPR', $key) ) {
      $browser = 'Opera Next';
      $version = $result['version'][$key];
    } elseif( $find('Opera', $key) ) {
      $browser = 'Opera';
      $find('Version', $key);
      $version = $result['version'][$key];
    } elseif( $find('Midori', $key) ) {
      $browser = 'Midori';
      $version = $result['version'][$key];
    } elseif( $browser == 'MSIE' || ($rv_result && $find('Trident', $key)) || $find('Edge', $ekey) ) {
      $browser = 'MSIE';
      if( $find('IEMobile', $key) ) {
        $browser = 'IEMobile';
        $version = $result['version'][$key];
      } elseif( $ekey ) {
        $version = $result['version'][$ekey];
      } else {
        $version = $rv_result ?: $result['version'][$key];
      }
      if( version_compare($version, '12', '>=') ) {
        $browser = 'Edge';
      }
    } elseif( $find('Vivaldi', $key) ) {
      $browser = 'Vivaldi';
      $version = $result['version'][$key];
    } elseif( $find('Chrome', $key) || $find('CriOS', $key) ) {
      $browser = 'Chrome';
      $version = $result['version'][$key];
    } elseif( $browser == 'AppleWebKit' ) {
      if( ($platform == 'Android' && !($key = 0)) ) {
        $browser = 'Android Browser';
      } elseif( strpos($platform, 'BB') === 0 ) {
        $browser  = 'BlackBerry Browser';
        $platform = 'BlackBerry';
      } elseif( $platform == 'BlackBerry' || $platform == 'PlayBook' ) {
        $browser = 'BlackBerry Browser';
      } elseif( $find('Safari', $key) ) {
        $browser = 'Safari';
      } elseif( $find('TizenBrowser', $key) ) {
        $browser = 'TizenBrowser';
      }
      $find('Version', $key);
      $version = $result['version'][$key];
    } elseif( $key = preg_grep('/playstation \d/i', array_map('strtolower', $result['browser'])) ) {
      $key = reset($key);
      $platform = 'PlayStation ' . preg_replace('/[^\d]/i', '', $key);
      $browser  = 'NetFront';
    }
    return array( 'platform' => $platform ?: null, 'browser' => $browser ?: null, 'version' => $version ?: null );
}

public function paginate_table($table,$order_by,$limit){   
  $sql = "
  SELECT * FROM ".$table."  
  ORDER BY ".$order_by." ASC LIMIT ".$limit.",10";
  $query = $this->ci->db->query($sql)->result();
  $ret['rows'] = $query;
  
  //count
  $q = "
  SELECT COUNT(*) As cnt FROM ".$table."";
  $tmp = $this->ci->db->query($q)->result();
  $ret['num_rows'] = $tmp[0]->cnt;
  return $ret;
}

public function search_table($table,$where,$order_by,$limit){  
  $sql = "
  SELECT * FROM ".$table."
  WHERE ".$where."
  ORDER BY ".$order_by." ASC LIMIT ".$limit.",10";
  $query = $this->ci->db->query($sql)->result();
  $ret['rows'] = $query;
  
  //count
  $q = "
  SELECT COUNT(*) As cnt FROM ".$table."
  WHERE ".$where."";
  $tmp = $this->ci->db->query($q)->result();
  $ret['num_rows'] = $tmp[0]->cnt;
  return $ret;

}

public function searchterm_handler($searchterm)
{
  $this->ci->session->unset_userdata('searchterm');
  
  if($searchterm)
  {
    $this->ci->session->set_userdata('searchterm', $searchterm);
    return $searchterm;
  }
  elseif($this->ci->session->userdata('searchterm'))
  {
    $searchterm = $this->ci->session->userdata('searchterm');
    return $searchterm;
  }
  else
  {
    $searchterm ="";
    return $searchterm;
  }
}

public function is_connected($url)
{
    $connected = @fsockopen($url, 80); 
                                        //website, port  (try 80 or 443)
    if ($connected){
        $is_conn = true; //action when connected
        fclose($connected);
    }else{
        $is_conn = false; //action in connection failure
    }
    return $is_conn;

}

public function isSiteAvailable($url){
    //check, if a valid url is provided
    if(!filter_var($url, FILTER_VALIDATE_URL))
    {
    return 'invalid_url';
    }

    //make the connection with curl
    $cl = curl_init($url);
    curl_setopt($cl,CURLOPT_CONNECTTIMEOUT,10);
    curl_setopt($cl,CURLOPT_HEADER,true);
    curl_setopt($cl,CURLOPT_NOBODY,true);
    curl_setopt($cl,CURLOPT_RETURNTRANSFER,true);

    //get response
    $response = curl_exec($cl);

    curl_close($cl);

    if ($response) return 'up';
    return 'down';
    
}

public function format_to_hours_min($time){
        $hours = floor($time);
        $mins = round(($time - $hours) * 60);

        return floatval($hours.'.'.$mins);
}

public function time_to_decimal($time){
  return number_format($time/3600,2);
}

public function get_subject_grade($sy_id, $sec_id, $quarter, $sub_id, $stud_id ){ 


    $subject_assignment  = $this->table_where('subject_assignment', array( 'sy_id' => $sy_id, 'sec_id' => $sec_id, 'sub_id' => $sub_id ));

    $subj_id    = 0;
    $subj_det_id  = 0;

    $ww_scr_total_score = 0;
    $pt_scr_total_score = 0;
    $qa_scr_total_score = 0;
    $quarterly_grade    = 0;

    $subj_det_id_cnt = $this->get_query("SELECT COUNT(*) AS cnt FROM subject_detail WHERE sub_id = ".$sub_id." ")->row('cnt');


    


    if($subject_assignment->num_rows() > 0 ){
      foreach($subject_assignment->result() as $r){
        
        $subj_id    = $r->subj_id;
        $subj_det_id  = $r->subj_det_id;
        $sub_id     = $r->sub_id;

        $ww_scr_total_score = 0;
        $pt_scr_total_score = 0;
        $qa_scr_total_score = 0;

        $ww_scr_score = 0;
        $pt_scr_score = 0;
        $qa_scr_score = 0;

        $component      = $this->get_table('component_assessment', array('sub_id' => $sub_id));
        $ca_ww_percentage = 0;
                $ca_pt_percentage = 0;
                $ca_qa_percentage = 0;

                foreach($component->result() as $l){
                    $ca_ww_percentage = $l->ca_ww_percentage;
                    $ca_pt_percentage = $l->ca_pt_percentage;
                    $ca_qa_percentage = $l->ca_qa_percentage;
                }

        $query_subj_id  = $this->get_query("SELECT * FROM v_student_score WHERE subj_id = ".$subj_id." AND stud_id = ".$stud_id." AND scr_quarter = '".$quarter."' ");

        foreach ($query_subj_id->result() as $k) {
          $kscr_type  = $k->scr_type;

          if($kscr_type == 'WW'){
            $ww_scr_total_score += $k->scr_total_score;
            $ww_scr_score     += $k->sscr_score;
          }else if($kscr_type == 'PT'){
            $pt_scr_total_score += $k->scr_total_score;
            $pt_scr_score     += $k->sscr_score;
          }else if($kscr_type == 'QA'){
            $qa_scr_total_score += $k->scr_total_score;
            $qa_scr_score     += $k->sscr_score;
          }
        }

        $ps_ww  = round( (($ww_scr_score * 100) / $ww_scr_total_score),2 );
        $ws_ww  = round( ($ps_ww * ($ca_ww_percentage / 100 ) ) ,2 );

        $ps_pt  = round( (($pt_scr_score * 100) / $pt_scr_total_score),2 );
        $ws_pt  = round( ($ps_pt * ($ca_pt_percentage / 100 ) ) ,2 );

        $ps_qa  = round( (($qa_scr_score * 100) / $qa_scr_total_score),2 );
        $ws_qa  = round( ($ps_qa * ($ca_qa_percentage / 100 ) ) ,2 );

        $initial_grade = round(($ws_ww + $ws_pt + $ws_qa),2);
        $initial_grade = floatval($initial_grade);

                $q = $this->get_query("SELECT * FROM grade_transmutation WHERE gt_min <= ".$initial_grade." AND gt_max >= ".$initial_grade." ");
                $final_grade = $q->row('gt_grade');

                if($q->num_rows() < 1){
                    $quarterly_grade = 0;
                }else{
                    $quarterly_grade = $final_grade;
                }
                
      }

      return $quarterly_grade;

    }


  }

public function compute_score($sub_id, $quarter,$subj_id, $sec_id, $sy_id, $subj_det_id ){
  /*COMPONENT*/
        $component        = $this->table_where('component_assessment', array('sub_id' => $sub_id));
        $ca_ww_percentage = 0;
        $ca_pt_percentage = 0;
        $ca_qa_percentage = 0;
        
        if($component->num_rows() > 0 ){
          foreach($component->result() as $l){
              $ca_ww_percentage = $l->ca_ww_percentage;
              $ca_pt_percentage = $l->ca_pt_percentage;
              $ca_qa_percentage = $l->ca_qa_percentage;
          }
        }else{
            $ca_ww_percentage = $ca_ww_percentage;
            $ca_pt_percentage = $ca_pt_percentage;
            $ca_qa_percentage = $ca_qa_percentage;
        }

        /*END COMPONENT*/

        $ww_total   = 0;
        $pt_total   = 0;
        $qa_total   = 0;

        $ww_score   = 0;
        $pt_score   = 0;
        $qa_score   = 0;

        $quarterly_grade  = 0;

        $score  = $this->get_query("SELECT stud_id, scr_type, SUM(sscr_score) AS sscr_score, SUM(scr_total_score) AS scr_total_score FROM v_student_score WHERE scr_quarter = '".$quarter."' AND subj_id = ".$subj_id." AND sec_id = ".$sec_id." AND sy_id = ".$sy_id." GROUP BY scr_type, stud_id");

        $section = $this->table_where('v_section_assignment', array('sec_id' => $sec_id));

        $initial_grade  = 0;
        $result         = 0;

        $student_data = array();

        if($section->num_rows() > 0){
          foreach($section->result() as $r){
            $stud_id    = $r->stud_id;
            $stud_name  = $r->stud_lastname.', '.$r->stud_firstname.' '.substr($r->stud_middlename, 0,1).(empty($r->stud_middlename) ? '' : '. ').$r->stud_suffix;
            $stud_lrn   = $r->stud_lrn;
            $stud_gender = $r->stud_gender;
            $stud_age     = $this->get_age($r->stud_birthdate);

            $stud_raw_data = array();

            $ws_ww = 0;
            $ws_pt = 0;
            $ws_qa = 0;

            $ps_ww = 0;
            $ps_qa = 0;
            $ps_pt = 0;


            foreach($score->result() as $s){
              $sstud_id = $s->stud_id;
              $scr_type = $s->scr_type;

               

              if($stud_id == $sstud_id){
                
                if($scr_type == 'WW'){
                      $ww_score   = $s->sscr_score;
                      $ww_total   = $s->scr_total_score;
                      $ps_ww      = (($ww_score * 100) / $ww_total);
                      $ws_ww      = $ps_ww * ($ca_ww_percentage / 100 ) ;
                  }else if($scr_type == 'PT'){
                      $pt_score   = $s->sscr_score;
                      $pt_total   = $s->scr_total_score;
                      $ps_pt      = (($pt_score * 100) / $pt_total);
                      $ws_pt      = $ps_pt * ($ca_pt_percentage / 100 );

                  }else if($scr_type == 'QA'){
                      $qa_score   = $s->sscr_score;
                      $qa_total   = $s->scr_total_score;
                      $ps_qa      = (($qa_score * 100) / $qa_total);
                      $ws_qa      = $ps_qa * ($ca_qa_percentage / 100 ) ;
                  }
                  
                  array_push($stud_raw_data, array('ww_score'=> round($ww_score,2),'ww_total'=> round($ww_total,2), 'ps_ww'=> round($ps_ww,2),'ws_ww'=> round($ws_ww,2), 'ws_pt'=> round($ws_pt,2), 'ws_qa'=> round($ws_qa,2) ) );
              }

              
            }

            $initial_grade = $ws_ww + $ws_pt + $ws_qa;

            $q = $this->get_query("SELECT gt_grade FROM grade_transmutation WHERE ".round($initial_grade,3)." BETWEEN gt_min AND gt_max ");
            $final_grade = $q->row('gt_grade');

            if($q->num_rows() < 1){
                $quarterly_grade = 0;
            }else{
                $quarterly_grade = $final_grade;
            }

            $data = array(
                'sub_id'          => $sub_id,
                'subj_id'         => $subj_id,
                'subj_det_id'     => $subj_det_id,
                'stud_id'         => $stud_id,
                'stud_name'       => $stud_name,
                'stud_lrn'        => $stud_lrn,
                'stud_gender'     => $stud_gender,
                'stud_age'        => $stud_age,
                'initial_grade'   => $initial_grade,
                'quarterly_grade' => $quarterly_grade, 
                'stud_raw'        => $stud_raw_data
            );

            array_push($student_data, $data);
          }
        }


        return $student_data;


}

public function compute_score_subject($sy_id, $sec_id, $sub_id,  $subj_det_id){
  $component = $this->table_where('component_assessment', array('sub_id' => $sub_id));

  //$student_data = $this->get_query("SELECT scr_quarter, stud_id, concat(stud_lastname, ', ' , stud_firstname) as stud_name, subj_id, scr_type, SUM(scr_total_score) AS scr_total_score, SUM(sscr_score) AS scr_score, subj_id FROM v_student_score WHERE sec_id = ".$sec_id." GROUP BY scr_type, subj_id, stud_id, scr_quarter ORDER BY stud_lastname");
  //
  //$student_data = $this->get_query("SELECT scr_quarter, subj_id, stud_id, concat(stud_lastname, ', ' , stud_firstname) as stud_name,  scr_type, SUM(sscr_score) AS scr_score, SUM(scr_total_score) AS scr_total_score, ((SUM(sscr_score) * 100) /SUM(scr_total_score) ) AS average FROM v_student_score WHERE   sec_id = ".$sec_id." AND sy_id = ".$sy_id." GROUP BY scr_type, stud_id, scr_quarter");
  
  $student_data = $this->get_query("SELECT sc.subj_id, sc.scr_quarter, sc.stud_id, concat(sc.stud_lastname, ', ' , sc.stud_firstname) as stud_name, sc.scr_type, SUM(sc.sscr_score) AS scr_score, SUM(sc.scr_total_score) AS scr_total_score, ((SUM(sc.sscr_score) * 100) /SUM(sc.scr_total_score) ) AS average  FROM v_student_score AS sc, subject_assignment AS sa WHERE sa.subj_id = sc.subj_id AND sa.sub_id = ".$sub_id." AND sa.subj_det_id = ".$subj_det_id." AND sc.sec_id = ".$sec_id." AND sc.sy_id = ".$sy_id." GROUP BY sc.scr_type, sc.stud_id, sc.scr_quarter, sc.subj_id");
  


  $ws_ww = 0;
  $ws_pt = 0;
  $ws_qa = 0;

  $students_info = array();
  $array_type = array(); 

  $students = $this->get_query("SELECT stud_id, CONCAT(stud_lastname, ', ', stud_firstname) AS stud_name, sec_id FROM v_section_assignment WHERE sec_id = ".$sec_id." ");

  foreach($students->result() as $r){
    $stud_id    = $r->stud_id;
    $stud_name  = $r->stud_name;


    foreach($student_data->result() as $r){
      $scr_type         = $r->scr_type;
      $scr_quarter      = $r->scr_quarter;
      $subj_id          = $r->subj_id;
      $stud_id          = $r->stud_id;
      $stud_name        = $r->stud_name;
      $scr_score        = $r->scr_score;
      $scr_total_score  = $r->scr_total_score;

    }

    array_push();

  }

  

  //return $student_data;


}

public function compute_scores($sub_id, $quarter,$subj_id, $sec_id, $sy_id, $subj_det_id ){
  /*COMPONENT*/
        $component        = $this->table_where('component_assessment', array('sub_id' => $sub_id));
        $ca_ww_percentage = 0;
        $ca_pt_percentage = 0;
        $ca_qa_percentage = 0;
        
        if($component->num_rows() > 0 ){
          foreach($component->result() as $l){
              $ca_ww_percentage = $l->ca_ww_percentage;
              $ca_pt_percentage = $l->ca_pt_percentage;
              $ca_qa_percentage = $l->ca_qa_percentage;
          }
        }else{
            $ca_ww_percentage = $ca_ww_percentage;
            $ca_pt_percentage = $ca_pt_percentage;
            $ca_qa_percentage = $ca_qa_percentage;
        }

        /*END COMPONENT*/

        $ww_total   = 0;
        $pt_total   = 0;
        $qa_total   = 0;

        $ww_score   = 0;
        $pt_score   = 0;
        $qa_score   = 0;

        $quarterly_grade  = 0;

        $score = $this->get_query("SELECT scr_quarter, stud_id, stud_lastname, stud_firstname, stud_middlename, subj_id, scr_type, SUM(scr_total_score) AS scr_total_score, SUM(sscr_score) AS sscr_score, subj_id FROM v_student_score WHERE scr_quarter = '".$quarter."' AND subj_id = ".$subj_id." AND sec_id = ".$sec_id." AND sy_id = ".$sy_id." GROUP BY scr_type, subj_id, stud_id, scr_quarter");

        //$score  = $this->get_query("SELECT stud_id, scr_type, SUM(sscr_score) AS sscr_score, SUM(scr_total_score) AS scr_total_score FROM v_student_score WHERE scr_quarter = '".$quarter."' AND subj_id = ".$subj_id." AND sec_id = ".$sec_id." AND sy_id = ".$sy_id." GROUP BY scr_type, stud_id");

        $section = $this->table_where('v_section_assignment', array('sec_id' => $sec_id));

        $initial_grade  = 0;
        $result         = 0;

        $student_data = array();

        if($section->num_rows() > 0){
          foreach($section->result() as $r){
            $stud_id    = $r->stud_id;
            $stud_name  = $r->stud_lastname.', '.$r->stud_firstname.' '.substr($r->stud_middlename, 0,1).(empty($r->stud_middlename) ? '' : '. ').$r->stud_suffix;
            $stud_lrn   = $r->stud_lrn;
            $stud_gender = $r->stud_gender;
            $stud_age     = $this->get_age($r->stud_birthdate);

            $stud_raw_data = array();

            $ws_ww = 0;
            $ws_pt = 0;
            $ws_qa = 0;

            $ps_ww = 0;
            $ps_qa = 0;
            $ps_pt = 0;




            foreach($score->result() as $s){
              $sstud_id = $s->stud_id;
              $scr_type = $s->scr_type;

               

              if($stud_id == $sstud_id){
                
                if($scr_type == 'WW'){
                      $ww_score   = $s->sscr_score;
                      $ww_total   = $s->scr_total_score;
                      $ps_ww      = (($ww_score * 100) / $ww_total);
                      $ws_ww      = $ps_ww * ($ca_ww_percentage / 100 ) ;
                  }else if($scr_type == 'PT'){
                      $pt_score   = $s->sscr_score;
                      $pt_total   = $s->scr_total_score;
                      $ps_pt      = (($pt_score * 100) / $pt_total);
                      $ws_pt      = $ps_pt * ($ca_pt_percentage / 100 );

                  }else if($scr_type == 'QA'){
                      $qa_score   = $s->sscr_score;
                      $qa_total   = $s->scr_total_score;
                      $ps_qa      = (($qa_score * 100) / $qa_total);
                      $ws_qa      = $ps_qa * ($ca_qa_percentage / 100 ) ;
                  }
                  
                  array_push($stud_raw_data, array('ww_score'=> round($ww_score,2),'ww_total'=> round($ww_total,2), 'ps_ww'=> round($ps_ww,2),'ws_ww'=> round($ws_ww,2), 'ws_pt'=> round($ws_pt,2), 'ws_qa'=> round($ws_qa,2) ) );
              }

              
            }

            $initial_grade = $ws_ww + $ws_pt + $ws_qa;

            $q = $this->get_query("SELECT gt_grade FROM grade_transmutation WHERE ".round($initial_grade,3)." BETWEEN gt_min AND gt_max ");
            $final_grade = $q->row('gt_grade');

            if($q->num_rows() < 1){
                $quarterly_grade = 0;
            }else{
                $quarterly_grade = $final_grade;
            }

            $data = array(
                'sub_id'          => $sub_id,
                'subj_id'         => $subj_id,
                'subj_det_id'     => $subj_det_id,
                'stud_id'         => $stud_id,
                'stud_name'       => $stud_name,
                'stud_lrn'        => $stud_lrn,
                'stud_gender'     => $stud_gender,
                'stud_age'        => $stud_age,
                'initial_grade'   => $initial_grade,
                'quarterly_grade' => $quarterly_grade, 
                'stud_raw'        => $stud_raw_data
            );

            array_push($student_data, $data);
          }
        }


        return $student_data;


}

public function print_grade($sub_id, $quarter,$subj_id, $sec_id, $sy_id, $subj_det_id ){
  /*COMPONENT*/
        $component        = $this->table_where('component_assessment', array('sub_id' => $sub_id));
        $ca_ww_percentage = 0;
        $ca_pt_percentage = 0;
        $ca_qa_percentage = 0;
        
        if($component->num_rows() > 0 ){
          foreach($component->result() as $l){
              $ca_ww_percentage = $l->ca_ww_percentage;
              $ca_pt_percentage = $l->ca_pt_percentage;
              $ca_qa_percentage = $l->ca_qa_percentage;
          }
        }else{
            $ca_ww_percentage = $ca_ww_percentage;
            $ca_pt_percentage = $ca_pt_percentage;
            $ca_qa_percentage = $ca_qa_percentage;
        }

        /*END COMPONENT*/

        $ww_total   = 0;
        $pt_total   = 0;
        $qa_total   = 0;

        $ww_score   = 0;
        $pt_score   = 0;
        $qa_score   = 0;

        $quarterly_grade  = 0;

        $score  = $this->get_query("SELECT stud_id, scr_type, SUM(sscr_score) AS sscr_score, SUM(scr_total_score) AS scr_total_score FROM v_student_score WHERE scr_quarter = '".$quarter."' AND subj_id = ".$subj_id." AND sec_id = ".$sec_id." AND sy_id = ".$sy_id." GROUP BY scr_type, stud_id");

        $section = $this->table_where('v_section_assignment', array('sec_id' => $sec_id));

        $initial_grade  = 0;
        $result         = 0;

        $student_data = array();


        /*if($section->num_rows() > 0){
          foreach($section->result() as $r){
            $stud_id      = $r->stud_id;
            $stud_name    = $r->stud_lastname.', '.$r->stud_firstname.' '.substr($r->stud_middlename, 0,1).(empty($r->stud_middlename) ? '' : '. ').$r->stud_suffix;
            $stud_lrn     = $r->stud_lrn;
            $stud_gender  = $r->stud_gender;
            $stud_age     = $this->get_age($r->stud_birthdate);

            $stud_raw_data = array();

            $ws_ww = 0;
            $ws_pt = 0;
            $ws_qa = 0;


            foreach($score->result() as $s){
              $sstud_id = $s->stud_id;
              $scr_type = $s->scr_type;

               
              if($stud_id == $sstud_id){
                
                if($scr_type == 'WW'){
                      $ww_score   = $s->sscr_score;
                      $ww_total   = $s->scr_total_score;
                      $ps_ww      = round( (($ww_score * 100) / $ww_total),2 );
                      $ws_ww      = round( ($ps_ww * ($ca_ww_percentage / 100 ) ) ,3 );
                  }else if($scr_type == 'PT'){
                      $pt_score   = $s->sscr_score;
                      $pt_total   = $s->scr_total_score;
                      $ps_pt      = round( (($pt_score * 100) / $pt_total),3 );
                      $ws_pt      = round( ($ps_pt * ($ca_pt_percentage / 100 );

                  }else if($scr_type == 'QA'){
                      $qa_score   = $s->sscr_score;
                      $qa_total   = $s->scr_total_score;
                      $ps_qa      = round( (($qa_score * 100) / $qa_total),3 );
                      $ws_qa      = round( ($ps_qa * ($ca_qa_percentage / 100 ) ) ,3 );
                  }
                  
                  array_push($stud_raw_data, array('ws_ww'=> $ws_ww, 'ws_pt'=> $ws_pt, 'ws_qa'=> $ws_qa));
              }

              
            }

            $initial_grade = $ws_ww + $ws_pt + $ws_qa;

            $q = $this->get_query("SELECT gt_grade FROM grade_transmutation WHERE ".$initial_grade." BETWEEN gt_min AND gt_max ");
            $final_grade = $q->row('gt_grade');

            if($q->num_rows() < 1){
                $quarterly_grade = 0;
            }else{
                $quarterly_grade = $final_grade;
            }




            $data = array(
                'stud_id'         => $stud_id,
                'stud_name'       => $stud_name,
                'stud_lrn'        => $stud_lrn,
                'stud_gender'     => $stud_gender,
                'stud_age'        => $stud_age,
                'quarterly_grade' => $quarterly_grade
            );

            array_push($student_data, $data);
          }
        }*/

        return $student_data;

}

public function subject_grade($sub_id, $quarter,$subj_id, $sec_id, $sy_id, $subj_det_id ){
      /*COMPONENT*/
        $component        = $this->table_where('component_assessment', array('sub_id' => $sub_id));
        $ca_ww_percentage = 0;
        $ca_pt_percentage = 0;
        $ca_qa_percentage = 0;
        
        if($component->num_rows() > 0 ){
          foreach($component->result() as $l){
              $ca_ww_percentage = $l->ca_ww_percentage;
              $ca_pt_percentage = $l->ca_pt_percentage;
              $ca_qa_percentage = $l->ca_qa_percentage;
          }
        }else{
            $ca_ww_percentage = $ca_ww_percentage;
            $ca_pt_percentage = $ca_pt_percentage;
            $ca_qa_percentage = $ca_qa_percentage;
        }

        /*END COMPONENT*/

        $ww_total   = 0;
        $pt_total   = 0;
        $qa_total   = 0;

        $ww_score   = 0;
        $pt_score   = 0;
        $qa_score   = 0;

        $quarterly_grade  = 0;

        $score  = $this->get_query("SELECT stud_id, scr_type, SUM(sscr_score) AS sscr_score, SUM(scr_total_score) AS scr_total_score FROM v_student_score WHERE scr_quarter = '".$quarter."' AND subj_id = ".$subj_id." AND sec_id = ".$sec_id." AND sy_id = ".$sy_id." GROUP BY scr_type, stud_id");

        $section = $this->table_where('v_section_assignment', array('sec_id' => $sec_id));

        $initial_grade  = 0;
        $result         = 0;

        $student_data = array();

        if($section->num_rows() > 0){
          foreach($section->result() as $r){
            $stud_id        = $r->stud_id;
            $stud_name      = $r->stud_lastname.', '.$r->stud_firstname.' '.substr($r->stud_middlename, 0,1).(empty($r->stud_middlename) ? '' : '. ').$r->stud_suffix;
            $stud_raw_data  = array();

            $ws_ww = 0;
            $ws_pt = 0;
            $ws_qa = 0;

            foreach($score->result() as $s){
              $sstud_id = $s->stud_id;
              $scr_type = $s->scr_type;

              if($stud_id == $sstud_id){
                
                if($scr_type == 'WW'){
                      $ww_score   = $s->sscr_score;
                      $ww_total   = $s->scr_total_score;
                      $ps_ww      = (($ww_score * 100) / $ww_total);
                      $ws_ww      = $ps_ww * ($ca_ww_percentage / 100 ) ;
                  }else if($scr_type == 'PT'){
                      $pt_score   = $s->sscr_score;
                      $pt_total   = $s->scr_total_score;
                      $ps_pt      = (($pt_score * 100) / $pt_total);
                      $ws_pt      = $ps_pt * ($ca_pt_percentage / 100 ) ;

                  }else if($scr_type == 'QA'){
                      $qa_score   = $s->sscr_score;
                      $qa_total   = $s->scr_total_score;
                      $ps_qa      = (($qa_score * 100) / $qa_total);
                      $ws_qa      = $ps_qa * ($ca_qa_percentage / 100 ) ;
                  }
                  
                  array_push($stud_raw_data, array('ws_ww'=> round($ws_ww,2), 'ws_pt'=> round($ws_pt,2), 'ws_qa'=> round($ws_qa,2)) );
              }

              
            }

            $initial_grade = $ws_ww + $ws_pt + $ws_qa;

            $q = $this->get_query("SELECT gt_grade FROM grade_transmutation WHERE ".round($initial_grade,3)." BETWEEN gt_min AND gt_max ");
            $final_grade = $q->row('gt_grade');

            if($q->num_rows() < 1){
                $quarterly_grade = 0;
            }else{
                $quarterly_grade = $final_grade;
            }

            $data = array(
                'sub_id'          => $sub_id,
                'subj_id'         => $subj_id,
                'subj_det_id'     => $subj_det_id,
                'stud_id'         => $stud_id,
                'stud_name'       => $stud_name,
                'initial_grade'   => $initial_grade,
                'quarterly_grade' => $quarterly_grade
            );

            array_push($student_data, $data);
          }
        }


        return $student_data;


}

public function gen_quarterly_grade($initial_grade){
    $result       = '';
    //$q            = $this->get_query("SELECT * FROM grade_transmutation WHERE CAST(gt_min AS DECIMAL) >= ".$initial_grade."  AND CAST(gt_max AS DECIMAL) <= ".$initial_grade." ");
    $q            = $this->get_query("SELECT * FROM grade_transmutation WHERE  ".$initial_grade." BETWEEN gt_min  AND gt_max ");
    $final_grade  = $q->row('gt_grade');

    if($q->num_rows() < 1){
        $result = '--';
    }else{
       $result = $final_grade;
    }

   // $result = $this->db->last_query();
    return $result;

}

public function gen_quarterly_grade_covid($initial_grade){
    $result       = '';
    //$q            = $this->get_query("SELECT * FROM grade_transmutation WHERE CAST(gt_min AS DECIMAL) >= ".$initial_grade."  AND CAST(gt_max AS DECIMAL) <= ".$initial_grade." ");
    $q            = $this->get_query("SELECT * FROM grade_transmutation_covid WHERE  ".$initial_grade." BETWEEN gt_min  AND gt_max ");
    $final_grade  = $q->row('gt_grade');

    if($q->num_rows() < 1){
        $result = '--';
    }else{
       $result = $final_grade;
    }

   // $result = $this->db->last_query();
    return $result;

}

public function generate_subject_grade($sy_id, $sec_id, $quarter){ /*, $stud_id*/

  $students = $this->table_where('v_section_assignment', array('sec_id' => $sec_id, 'sy_id' => $sy_id ));

  $stud_data    = array();
  $subject_data = array();

  if($students->num_rows() > 0 ){
    foreach ($students->result() as $s) {
      $stud_id    = $s->stud_id;
      $stud_name  = '<strong >'.$s->stud_lastname.'</strong>, '.$s->stud_firstname.' '.substr($s->stud_middlename,0, 1).''.(!empty($s->stud_middlename) ? '.' : '');

      /*GET ALL SUBJECT ENROLL*/
      $subject = $this->table_where('v_subject_teacher_assignment', array('sec_id' => $sec_id, 'sy_id' => $sy_id ));
      if($subject->num_rows() > 0 ){
        foreach ($subject->result() as $sj) {
          $sub_id       = $sj->sub_id;
          $sub_name     = $sj->sub_name;
          $subj_det_id  = $sj->subj_det_id;
          $sub_teacher  = $sj->tch_firstname.' '.$sj->tch_lastname;
          $subj_id      = $sj->subj_id;

          $qsubj_det_name = $this->table_where('subject_detail', array('subj_det_id' => $subj_det_id));
          $subj_det_name  = '';
          if($qsubj_det_name->num_rows() < 0){
            $subj_det_name = $qsubj_det_name->row('subj_det_name');

          }

         /* COMPUTATION OF GRADES*/

        $ww_total_score = 0;
        $pt_total_score = 0;
        $qa_total_score = 0;

        $ww_score = 0;
        $pt_score = 0;
        $qa_score = 0;

        $ww_stud_score = 0;
        $pt_stud_score = 0;
        $qa_stud_score = 0;

        $initial_grade = 0;



        $component        = $this->table_where('component_assessment', array('sub_id' => $sub_id));
        $ca_ww_percentage = 0;
        $ca_pt_percentage = 0;
        $ca_qa_percentage = 0;

        $quarterly_grade  = 0;

        if($component->num_rows() > 0 ){
          foreach($component->result() as $l){
              $ca_ww_percentage = $l->ca_ww_percentage;
              $ca_pt_percentage = $l->ca_pt_percentage;
              $ca_qa_percentage = $l->ca_qa_percentage;
          }
        }else{
            $ca_ww_percentage = $ca_ww_percentage;
            $ca_pt_percentage = $ca_pt_percentage;
            $ca_qa_percentage = $ca_qa_percentage;
        }



        $total_score  = $this->get_query("SELECT scr_type, SUM(scr_total_score) AS scr_total_score FROM student_score_hdr WHERE subj_id = ".$subj_id." AND scr_quarter = '".$quarter."' GROUP BY scr_type");
        $raw_score    = array();

        if($total_score->num_rows() > 0 ){
          foreach($total_score->result() as $tt){
            $scr_type = $tt->scr_type;

            $get_ww  = $this->get_query("SELECT SUM(sscr_score) AS sscr_score FROM v_student_score WHERE subj_id = ".$subj_id." AND scr_type = '".$scr_type."'  AND stud_id = ".$stud_id." ")->row('sscr_score');

            $ps_ww = 0;
            $ws_ww = 0;

            $ps_pt = 0;
            $ws_pt = 0;

            $ps_qa = 0;
            $ws_qa = 0;

            

            if($scr_type == 'WW' ){
              $ww_total_score = $tt->scr_total_score;
              $ww_score       = $get_ww;

              $ps_ww          = round( (($ww_score * 100) / $ww_total_score),3 );
              $ws_ww          = round( ($ps_ww * ($ca_ww_percentage / 100 ) ) ,3 );

            }else if($scr_type == 'PT' ){
              $pt_total_score = $tt->scr_total_score;
              $pt_score       = $get_ww;

              $ps_pt          = round( (($pt_score * 100) / $pt_total_score),3 );
              $ws_pt          = round( ($ps_pt * ($ca_pt_percentage / 100 ) ) ,3 );

            }else if($scr_type == 'QA' ){
              $qa_total_score = $tt->scr_total_score;
              $qa_score       = $get_ww;

              $ps_qa          = round( (($qa_score * 100) / $qa_total_score),3 );
              $ws_qa          = round( ($ps_qa * ($ca_qa_percentage / 100 ) ) ,3 );
            }

            
            $score_data = array(
                'ps_ww' => $ps_ww,
                'ws_ww' => $ws_ww,
                'ps_pt' => $ps_pt,
                'ws_pt' => $ws_pt,
                'ps_qa' => $ps_qa,
                'ws_qa' => $ws_qa,

            );

            array_push($raw_score, $score_data);

            $initial_grade = $ws_ww + $ws_pt + $ws_qa;

          }

          

          

          //$initial_grade =  $ws_ww + $ws_pt + $ws_qa;

          //$score = $this->get_query("SELECT SUM(sscr_score) AS sscr_score FROM student_score WHERE scr_id = 25 AND stud_id =");
        }


          $sub_data = array(
            'subj_id'       => $subj_id,
            'sub_id'        => $sub_id,
            'sub_name'      => $sub_name,
            'subj_det_id'   => $subj_det_id,
            'subj_det_name' => $subj_det_name,
            'sub_teacher'   => $sub_teacher,
            'initial_grade' => $initial_grade,
            'raw'           => $raw_score
          );

          array_push($subject_data, $sub_data);
        }
      }/*END ALL SUBJECT ENROLL*/


      $data = array(
          'stud_id'       => $stud_id,
          'stud_name'     => $stud_name,
          'subject_grade' => $subject_data
      );

      array_push($stud_data, $data);
    }
  }
    
    return $stud_data;
}

public function subject_gradessssss($sy_id, $sec_id, $quarter){ /*, $stud_id*/
    $grade = array();
    $subject_assignment  = $this->table_where('v_subject_teacher_assignment', array( 'sy_id' => $sy_id, 'sec_id' => $sec_id) );

    if($subject_assignment->num_rows() > 0 ){
      foreach($subject_assignment->result() as $r){
        $sub_id   = $r->sub_id;
        $subj_id  = $r->subj_id;

        if(!empty($sub_id) ){

          $ww_scr_total_score = 0;
          $pt_scr_total_score = 0;
          $qa_scr_total_score = 0;

          $ww_scr_score = 0;
          $pt_scr_score = 0;
          $qa_scr_score = 0;

          $component        = $this->table_where('component_assessment', array('sub_id' => $sub_id));
          $ca_ww_percentage = 0;
          $ca_pt_percentage = 0;
          $ca_qa_percentage = 0;

          $quarterly_grade  = 0;

          if($component->num_rows() > 0 ){
            foreach($component->result() as $l){
                $ca_ww_percentage = $l->ca_ww_percentage;
                $ca_pt_percentage = $l->ca_pt_percentage;
                $ca_qa_percentage = $l->ca_qa_percentage;
            }
          }else{
              $ca_ww_percentage = $ca_ww_percentage;
              $ca_pt_percentage = $ca_pt_percentage;
              $ca_qa_percentage = $ca_qa_percentage;
          }

          //LOOP ALL STUDENT
          
            $all_student = $this->table_where('v_section_assignment', array('sy_id' => $sy_id, 'sec_id' => $sec_id) );
            $stud_data   = array();

              if($all_student->num_rows() > 0 ){
                  foreach($all_student->result() as $st){
                    $stud_id = $st->stud_id;
                    $stud_name  = '<strong >'.$st->stud_lastname.'</strong>, '.$st->stud_firstname.' '.substr($st->stud_middlename,0, 1).''.(!empty($st->stud_middlename) ? '.' : '');


                    $query_subj_id  = $this->get_query("SELECT * FROM v_student_score WHERE subj_id = ".$subj_id." AND stud_id = ". $stud_id." AND scr_quarter = '".$quarter."' ");

                    foreach ($query_subj_id->result() as $k) {
                      $kscr_type  = $k->scr_type;

                      if($kscr_type == 'WW'){
                        $ww_scr_total_score += $k->scr_total_score;
                        $ww_scr_score     += $k->sscr_score;
                      }else if($kscr_type == 'PT'){
                        $pt_scr_total_score += $k->scr_total_score;
                        $pt_scr_score     += $k->sscr_score;
                      }else if($kscr_type == 'QA'){
                        $qa_scr_total_score += $k->scr_total_score;
                        $qa_scr_score     += $k->sscr_score;
                      }
                    }

                    $ps_ww  = round( (($ww_scr_score * 100) / $ww_scr_total_score),2 );
                    $ws_ww  = round( ($ps_ww * ($ca_ww_percentage / 100 ) ) ,2 );

                    $ps_pt  = round( (($pt_scr_score * 100) / $pt_scr_total_score),2 );
                    $ws_pt  = round( ($ps_pt * ($ca_pt_percentage / 100 ) ) ,2 );

                    $ps_qa  = round( (($qa_scr_score * 100) / $qa_scr_total_score),2 );
                    $ws_qa  = round( ($ps_qa * ($ca_qa_percentage / 100 ) ) ,2 );

                    $initial_grade = round(($ws_ww + $ws_pt + $ws_qa),2);
                    $initial_grade = floatval($initial_grade);

                    $q = $this->get_query("SELECT gt_grade FROM grade_transmutation WHERE ( ".$initial_grade." BETWEEN CAST(gt_min AS DECIMAL)  AND CAST(gt_max AS DECIMAL)) ");
                    $final_grade = $q->row('gt_grade');

                    if($q->num_rows() < 1){
                        $quarterly_grade = 0;
                    }else{
                        $quarterly_grade = $final_grade;
                    }

                    $data = array(
                        'stud_id'         => $stud_id,
                        'stud_name'       => $stud_name,
                        'quarterly_grade' => $quarterly_grade

                    );

                    array_push($stud_data, $data);

                  }

                  
              }

              
          //END OF LOOP STUDENT

            $push_grade = array(
              'sub_id'          => $sub_id,
              'sub_name'        => $r->sub_name,
              'subj_det_id'     => $r->subj_det_id,
              'sub_teacher'     => $r->tch_firstname.' '.$r->tch_lastname,
              'stud_data'       => $stud_data,
              //'stud_id'         => $stud_id,
              //'stud_name'       => $stud_name,
              //'quarterly_grade' => $quarterly_grade,
              'msg'             => 'Record found'
            );

        }else{
          $push_grade = array(
              'sub_id'          => '',
              'sub_name'        => '',
              'subj_det_id'     => '',
              'sub_teacher'     => '',
              'quarterly_grade' => 0,
              'msg'             => 'No Record found'
            );
        }

        array_push($grade, $push_grade);
      }
    }else{
      $grade = 'No record';
    }

    return $grade;
}

public function generate_statistic_report($user_device_id, $date_from, $date_to){
  $beginning      = '';
    $sentinel       = '';
    $tracker      = '';
    $endpoint     = '';
    $partial_time     = 0;
    $outside_sum    = 0;
    $time_outside   = 0;
    $time_inside    = 0;
    $cnt_outside    = 0;
    $cnt_inside     = 0;
    $active_time    = 0;

    $total_rows     = $this->get_query("SELECT count(user_device_id) as max_row FROM v_geofence_record WHERE user_device_id = '".$user_device_id."' AND DATE(georec_datetime) BETWEEN '".$date_from."' AND '".$date_to."' ORDER BY  georec_datetime")->row('max_row');
    $geof_rec   = $this->get_query("SELECT * FROM v_geofence_record WHERE user_device_id = '".$user_device_id."' AND DATE(georec_datetime) BETWEEN '".$date_from."' AND '".$date_to."' ORDER BY  georec_datetime ASC LIMIT 1, ".$total_rows."  ");
    $sentinel   = $this->get_query("SELECT georec_datetime FROM v_geofence_record WHERE user_device_id = '".$user_device_id."' AND DATE(georec_datetime) BETWEEN '".$date_from."' AND '".$date_to."'  ORDER BY  georec_datetime ASC LIMIT 1")->row('georec_datetime');


    $cnt = 1;
      foreach ($geof_rec->result() as $k) {
        $geof_id    = $k->geof_id;
        $beginning  = $sentinel;
        $tracker    = $k->georec_datetime;

        $start      = strtotime($sentinel);
        $end        = strtotime($tracker);
        $time_diff  = number_format(($end-$start)/3600,2);

        $hours      = floor($time_diff);
        $mins       = round(($time_diff - $hours) * 60);

        $sentinel = $tracker;

        if($hours < 1 && $mins < 10){
          $partial_time +=  $time_diff;

          if($geof_id == -1 ){
            $outside_sum  +=  $time_diff;
            $time_outside = $this->format_to_hours_min($outside_sum);
            $cnt_outside  += 1;
          }
        }else{
          $endpoint = $sentinel;
        }
      }
          $active_time  = $this->format_to_hours_min($partial_time);
          $outside_diff   = ($active_time - $time_outside);
          $time_inside  = $this->format_to_hours_min($outside_diff);
          $cnt_inside   = ($total_rows - $cnt_outside);

    $data_array = array(
      'gdr_no_non_geo'  => $cnt_outside,
      'gdr_no_geo'    => $cnt_inside,
      'gdr_hrs_non_geo' => number_format($time_outside,2),
      'gdr_hrs_geo'   => number_format($time_inside,2),
      'gdr_total_hrs'   => number_format($active_time,2)
    );

    return $data_array;
}


public function get_age($date){
   $from = new DateTime($date); //'1970-02-01'
   $to   = new DateTime('today');
   return $from->diff($to)->y;

  /*# procedural
  echo date_diff(date_create('1970-02-01'), date_create('today'))->y;*/
}

public function get_age_month($date){
  $dob          = strtotime($date);
  $current_time = time();

  $age_years    = date('Y',$current_time) - date('Y',$dob);
  $age_months   = date('m',$current_time) - date('m',$dob);
  $age_days     = date('d',$current_time) - date('d',$dob);

  if ($age_days<0) {
      $days_in_month = date('t',$current_time);
      $age_months--;
      $age_days= $days_in_month+$age_days;
  }

  if ($age_months<0) {
      $age_years--;
      $age_months = 12+$age_months;
  }
  return $age_years.'.'.$age_months;
  //echo "You are $age_years years and $age_months months and $age_days days old.";  
}


public function get_balance($stud_id, $sy_id ){
  //$assessment = $this->table_where('v_student_assessment_detail', array('stud_id' => $stud_id, 'sy_id' => $sy_id));
  $fees = $this->table_where('v_student_fees', array('stud_id' => $stud_id, 'sy_id' => $sy_id));
  
  $result = [];

  if($fees->num_rows() > 0 ){
    //foreach($fees->result() as $r){
      $result = $fees->result();
    //} 
  }else{
      $result = array('result' => 'No records found' );
  }

  return $result;
  

}

/*public function array_seacrh($id, $array){
  foreach ($array as $key => $value) {
     if($value['stud_id'] == $id){

     }
  }
}
*/


public function get_out_balance($stud_id,$sy_id){

  /*$sy_id            = $this->get_active_sy();*/
  $payment_data     = $this->get_query("SELECT sy_id, sec_id, stud_id, stud_lastname, stud_firstname, tf_months, round(SUM(ABS(tf_sub_total)),2) AS tf FROM v_student_payment_record_tf WHERE sy_id = ".$sy_id." AND stud_id = ".$stud_id."  GROUP BY stud_id, tf_months");
  
  $enrollment_data    = $this->get_query("SELECT * FROM v_student_fees WHERE sy_id = ".$sy_id."  AND stud_id = ".$stud_id."  ORDER BY sec_sort,stud_lastname ASC " );


      $cnt        = 1;
      $student_tf = 0;
      $mf         = 0;
      $mo_mf      = 300;
      $qua_mf     = 800;
      $sem_mf     = 2400;

      $jul        = 0;
      $aug        = 0;
      $sep        = 0;
      $oct        = 0;
      $nov        = 0;
      $dec        = 0;
      $jan        = 0;
      $feb        = 0;
      $mar        = 0;

      $total_tf   = 0;


      $total_jul = 0;
      $total_aug = 0;
      $total_sep = 0;
      $total_oct = 0;
      $total_nov = 0;
      $total_dec = 0;
      $total_jan = 0;
      $total_feb = 0;
      $total_mar = 0;

      $grand_total = 0;

      $sec_name     = '';
      $payment_mode = '';
      $is_scholar   = '';
      $dept_id      = 0;
      $fee_type     = '';

      $stud_name    = '';



      
      foreach($enrollment_data->result() as $s){
          $stud_id        = $s->stud_id;
          $stud_name      = $s->stud_firstname.' '. $s->stud_lastname.' '.$s->stud_suffix ;
          $lvl_id         = $s->lvl_id;
          $sec_name       = $s->sec_name;
          $payment_mode   = substr($s->se_mode_payment, 0, 1);
          $sib_discount   = $s->sad_has_sib_discount;
          $is_scholar     = $s->sa_is_scholar; 
          $scholar_tf     = $s->sad_scholar_sub_total;
          $fee_tf         = $s->fee_tf;
          $dept_name      = $s->dept_name;
          $dept_id        = $s->dept_id;
          $fee_type       = ucfirst($s->fee_type);

          /*computaion for miscellaneous*/

          if($dept_name <> 'Pre-School'){
              if($payment_mode == 'M'){
                  $mf     = $mo_mf;
              }else if($payment_mode == 'Q'){
                  $mf     = $qua_mf;
              }else if($payment_mode == 'S'){
                  $mf     = $sem_mf;
              }else if($payment_mode == 'C'){
                  $mf      = 0;
              }
          }else{
                  $mf      = 0;
          }

          
          if($payment_mode == 'C'){
                  $student_tf = 0;
          }else{
              if($sib_discount == 'Y'){
                  $student_tf = $fee_tf - ($fee_tf * 0.10)  + $mf;
              }else{
                  if($is_scholar == 'Y'){
                      $student_tf = $scholar_tf;
                  }else{
                      $student_tf = $fee_tf + $mf;
                  }
              }
          }

          $tf_jul     = 0;
          $tf_aug     = 0;
          $tf_sep     = 0;
          $tf_oct     = 0;
          $tf_nov     = 0;
          $tf_dec     = 0;
          $tf_jan     = 0;
          $tf_feb     = 0;
          $tf_mar     = 0;

          $tf_sq2     = 0;
          $tf_sq3     = 0;
          $tf_sq4     = 0;

          $tf_s2      = 0;
          

          foreach($payment_data->result() as $p){
              $pstud_id   = $p->stud_id;
              $tf_months  = $p->tf_months;
              $paid_tf    = $p->tf;


              if($pstud_id == $stud_id){

                  switch ($tf_months) {
                      case 'July':
                          $tf_jul    =  empty($paid_tf) ? 0 : $paid_tf;
                          break;

                      case 'August':
                          $tf_aug    =  empty($paid_tf) ? 0 : $paid_tf;
                          break;

                      case 'September':
                          $tf_sep    =  empty($paid_tf) ? 0 : $paid_tf;
                          break;

                      case 'October':
                          $tf_oct    =  empty($paid_tf) ? 0 : $paid_tf;
                          break;

                      case 'November':
                          $tf_nov    =  empty($paid_tf) ? 0 : $paid_tf;
                          break;

                      case 'December':
                          $tf_dec    =  empty($paid_tf) ? 0 : $paid_tf;
                          break;

                      case 'January':
                          $tf_jan    =  empty($paid_tf) ? 0 : $paid_tf;
                          break;

                      case 'February':
                          $tf_feb    =  empty($paid_tf) ? 0 : $paid_tf;
                          break;

                      case 'March':
                          $tf_mar    =  empty($paid_tf) ? 0 : $paid_tf;
                          break;

                      case '2nd Quarter [August]':
                          $tf_sq2    =  empty($paid_tf) ? 0 : $paid_tf;
                          break;


                      case '3rd Quarter [October]':
                          $tf_sq3    =  empty($paid_tf) ? 0 : $paid_tf;
                          break;


                      case '4th Quarter [January]':
                          $tf_sq4    =  empty($paid_tf) ? 0 : $paid_tf;
                          break;

                      case '2nd Semester [October]':
                          $tf_s2     =  empty($paid_tf) ? 0 : $paid_tf;
                          break;
                  }

              }

          }


          if($payment_mode == 'M'){
              $jul  = $tf_jul >= $student_tf ? 0 : $student_tf - $tf_jul;
              $aug  = $tf_aug >= $student_tf ? 0 : $student_tf - $tf_aug;
              $sep  = $tf_sep >= $student_tf ? 0 : $student_tf - $tf_sep;
              $oct  = $tf_oct >= $student_tf ? 0 : $student_tf - $tf_oct;
              $nov  = $tf_nov >= $student_tf ? 0 : $student_tf - $tf_nov;
              $dec  = $tf_dec >= $student_tf ? 0 : $student_tf - $tf_dec;
              $jan  = $tf_jan >= $student_tf ? 0 : $student_tf - $tf_jan;
              $feb  = $tf_feb >= $student_tf ? 0 : $student_tf - $tf_feb;
              $mar  = $is_scholar == 'Y' ? ($tf_mar >= $student_tf ? 0 : $student_tf - $tf_mar ) : 0;
          }else if($payment_mode == 'Q'){
              $jul  = 0;
              $aug  = $tf_sq2 >= $student_tf ? 0 : $student_tf - $tf_sq2;
              $sep  = 0;
              $oct  = $tf_sq3 >= $student_tf ? 0 : $student_tf - $tf_sq3;
              $nov  = 0;
              $dec  = 0;
              $jan  = $tf_sq4 >= $student_tf ? 0 : $student_tf - $tf_sq4;
              $feb  = 0;
              $mar  = 0;
          }else if($payment_mode == 'S'){
              $jul  = 0;
              $aug  = 0;
              $sep  = 0;
              $oct  = $tf_s2 >= $student_tf ? 0 : $student_tf - $tf_s2;
              $nov  = 0;
              $dec  = 0;
              $jan  = 0;
              $feb  = 0;
              $mar  = 0;
          }else if($payment_mode == 'C'){
              $jul  = 0;
              $aug  = 0;
              $sep  = 0;
              $oct  = 0;
              $nov  = 0;
              $dec  = 0;
              $jan  = 0;
              $feb  = 0;
              $mar  = 0;
          }


          $total_tf = $jul + $aug + $sep + $oct + $nov + $dec + $jan + $feb + $mar;
      }

      $balance = array(
        'stud_name'     => $stud_name,
        'sec_name'      => $sec_name,
        'payment_mode'  => $payment_mode,
        'fee_type'      => ucfirst($fee_type),
        'is_scholar'    => $is_scholar,
        'student_tf'    => $student_tf,
        'dept_id'       => $dept_id,
        'jul'           => $jul,
        'aug'           => $aug,
        'sep'           => $sep,
        'oct'           => $oct,
        'nov'           => $nov,
        'dec'           => $dec,
        'jan'           => $jan,
        'feb'           => $feb,
        'mar'           => $mar,
        'total'         => $total_tf
      );

      return $balance;

}

public function get_contact_number($stud_id){
  $get = $this->table_where('students', array('stud_id' => $stud_id)); /*stud_emergency_contact*/

  if($get->num_rows() > 0 ){
    return $get->row('stud_guardian_contact');
  }
}

public function itexmo_local($number,$message){

    $apicode   = 'PR-ISIDO923287_VJ1I8';
    $passwd    = 'iplx4$dz(t';

    $url = 'https://www.itexmo.com/php_api/api.php';
    $itexmo = array('1' => $number, '2' => $message, '3' => $apicode, 'passwd' => $passwd);
    $param = array(
      'http' => array(
        'header'  => "Content-type: application/x-www-form-urlencoded\r\n",
        'method'  => 'POST',
        'content' => http_build_query($itexmo),
      ),
    );
    $context  = stream_context_create($param);
    return file_get_contents($url, false, $context);
}

public function itexmo_online($number,$message){
      
      $apicode   = 'PR-ISIDO923287_VJ1I8';
      $passwd    = 'iplx4$dz(t';

      $ch = curl_init();
      $itexmo = array('1' => $number, '2' => $message, '3' => $apicode, 'passwd' => $passwd);
      curl_setopt($ch, CURLOPT_URL,"https://www.itexmo.com/php_api/api.php");
      curl_setopt($ch, CURLOPT_POST, 1);
       curl_setopt($ch, CURLOPT_POSTFIELDS, 
                http_build_query($itexmo));
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
      return curl_exec ($ch);
      curl_close ($ch);
}



public function compute_aging($due_date, $last_payment_date, $amount_due){

  /*GET THE MONTHS PASS for PENALTY*/
  $d1 = date_create($last_payment_date);
  $d2 = date_create($due_date);

  $days_diff = date_diff($d1, $d2);

  $months   = $days_diff->format('%m');
  $days     = $days_diff->format('%d');
  $percent  = 3 * $months;

  //echo $months.' - '.$period_month.' : '. $due_date.'<br/>';


  /*COMPUTE FINES x PERCENT*/
  $fines      = 0;
  $due_amount = 0;

  $multiplier = $percent /100;
  $fines      = $multiplier * $amount_due;
  $due_amount = $fines + $amount_due;

  $data = array(
    'percent'     => $percent,
    'fines'       => $fines,
    'due_amount'  => $due_amount
  );


  return $data;

}

public function date_diff($date1, $date2){
  $d1 = date_create($date1);
  $d2 = date_create($date2);

  $days_diff = date_diff($d1, $d2);

  $months   = $days_diff->format('%m');
  $days     = $days_diff->format('%d');
  $hrs      = $days_diff->format('%h');

  return array('months' => $months, 'days' => $days, 'hrs' => $hrs);

}

public function get_payment_record($sy_id, $stud_id){

  /*PAYMENT RECORD - TUITION FEE*/
  $payment_record  = $this->get_query("SELECT *, ROUND(tf_sub_total,2) AS tf_paid, ROUND( ( (tf_amount_due + tf_fine_amount) - tf_sub_total ) ,2) AS balance FROM v_student_payment_record_tf WHERE stud_id = ".$stud_id." AND sy_id = ".$sy_id."  ORDER BY tf_payment_date ASC ");

  $payment_detail = $this->table_where('v_student_assessment_detail', array('sy_id' => $sy_id, 'stud_id' => $stud_id));

  $is_scholar     = $payment_detail->row('sa_is_scholar');
  $mode_payment   = substr($payment_detail->row('se_mode_payment'),0,1);

  $sy_last_payment = $this->table_where('school_year', array('sy_id' => $sy_id))->row('sy_last_payment');

  $balance        = $this->get_out_balance($stud_id, $sy_id );
  $installment  = $balance['student_tf'];


  $tf_amount_paid     = 0;
  $tf_payment_type    = '';
  $tf_bank_name       = '';
  $tf_account_number  = 0;
  $tf_payment_date    = '';
  $tf_months          = '';
  $tf_amount_due      = 0;
  $tf_fine_percentage = 0;
  $tf_fine_amount     = 0;
  $tf_sub_total       = 0;
  $tf_remarks         = '';

  $learners_payment = [];

  $due_dates        = $this->table_where('due_date', array('sy_id' => $sy_id, 'dd_is_scholar' => $is_scholar, 'dd_mode' => $mode_payment ));

  $months_ctr   = 0;
  $total_amount_due = [];

  foreach($due_dates->result() as $dd){
    $dd_date_due    = $dd->dd_date_due;
    $dd_date_name   = $dd->dd_date_name;

    /*Date COMPUTATION*/
        $d1 = date_create($sy_last_payment);
        $d2 = date_create($dd_date_due);

        $days_diff = date_diff($d1, $d2);

        $months   = $days_diff->format('%m');
        $days     = $days_diff->format('%d');

          
          if( ($months == 0) && ($days > 0 ) && ($mode_payment <> 'M') ){
            $months_ctr = 1;
          }else{
            $months_ctr = $months; 
          }

    

      $td_payment_type    = '';
      $td_bank_name       = '';
      $td_account_number  = '';
      
      $td_fine            = 0;
      $td_fine_amount     = 0;
      $td_payment_made    = 0;
      $td_payment_date    = '';
      $month              = '';
      $td_amount_due      = $installment;
      
      $due_fines          = 0;
      $due_total_amount   = 0;
      $pencentage         = 0;

      $is_unpaid          = '';


  
      foreach($payment_record->result() as $p){
        $tf_payment_type    = $p->tf_payment_type;
        $tf_bank_name       = $p->tf_bank_name;
        $tf_account_number  = $p->tf_account_number;

        $tf_amount_due      = $p->tf_amount_due;
        $tf_fine            = $p->tf_fine_percentage;
        $tf_fine_amount     = $p->tf_fine_amount;
        $payment_made       = $p->tf_sub_total;
        $month              = $p->tf_months;
        $tf_payment_date    = $p->tf_payment_date;

        if( ($payment_made > 0) && ($month == $dd_date_name) ){
            $td_payment_type    = $tf_payment_type;
            $td_bank_name       = $tf_bank_name;
            $td_account_number  = $tf_account_number;
            $td_amount_due      = $tf_amount_due;
            $td_fine            = $tf_fine;
            $td_fine_amount     = $tf_fine_amount;
            $td_payment_made    = $payment_made;
            $td_payment_date    = date('Y-m-d', strtotime($tf_payment_date));
        }
        
      }

      /*$multiplier = $percent /100;
      $fines      = $multiplier * $amount_due;
      $due_amount = $fines + $amount_due;*/


        if($td_payment_made <= 0 ){

          if($is_scholar == 'N'){
            $pencentage       = ($months_ctr * 3);
            $td_fine_amount   = ($pencentage /100) * $td_amount_due;
            $due_total_amount = $td_fine_amount + $td_amount_due;
            array_push($total_amount_due, $due_total_amount);
          }else{
            array_push($total_amount_due, $td_amount_due);
          }

          $is_unpaid = 'unpaid';

        }else{
          $pencentage = $td_fine;
          
        }


        

      array_push($learners_payment,array(
        /*'payment_mode'       => $mode_payment,*/
        'dd_date_name'       => $dd_date_name,
        'dd_date_due'        => $dd_date_due,
        /*'tf_months'          => $month,*/
        'tf_amount_due'      => $td_amount_due,
        'tf_amount_paid'     => $td_payment_made,
        'tf_fine_percentage' => $pencentage, /*($td_payment_made <= 0 ? ($installment * ($months_ctr * 3) ) : $td_fine)*/
        'tf_fine_amount'     => $td_fine_amount,
        'tf_total_amount_due'=> $due_total_amount,
        'tf_payment_type'    => $td_payment_type,
        'tf_bank_name'       => $td_bank_name,
        'tf_account_number'  => $td_account_number,
        'tf_payment_date'    => $td_payment_date,
        'diff_months'        => $months,
        'diff_days'          => $days,
        'multiplier'         => $months_ctr,
        'total_amount_due'   => $total_amount_due,
        'total_due'          => array_sum($total_amount_due),
        'is_unpaid'          => $is_unpaid 
        /*'date_fiff'          => $this->dateDifference($dd_date_due, $sy_last_payment)*/
      ));
  }

  return $learners_payment;

}

public function get_student_due($sy_id, $stud_id){

  /*PAYMENT RECORD - TUITION FEE*/
  $payment_record  = $this->get_query("SELECT *, ROUND(tf_sub_total,2) AS tf_paid, ROUND( ( (tf_amount_due + tf_fine_amount) - tf_sub_total ) ,2) AS balance FROM v_student_payment_record_tf WHERE stud_id = ".$stud_id." AND sy_id = ".$sy_id."  ORDER BY tf_payment_date ASC ");

  $payment_detail = $this->table_where('v_student_assessment_detail', array('sy_id' => $sy_id, 'stud_id' => $stud_id));

  //print_r($payment_detail->result());

  $is_scholar     = $payment_detail->row('sa_is_scholar');
  $mode_payment   = substr($payment_detail->row('se_mode_payment'),0,1);

  $sy_last_payment = $this->table_where('school_year', array('sy_id' => $sy_id))->row('sy_last_payment');

  $balance        = $this->get_out_balance($stud_id, $sy_id );
  $installment    = $balance['student_tf'];


  $tf_amount_paid     = 0;
  $tf_payment_type    = '';
  $tf_bank_name       = '';
  $tf_account_number  = 0;
  $tf_payment_date    = '';
  $tf_months          = '';
  $tf_amount_due      = 0;
  $tf_fine_percentage = 0;
  $tf_fine_amount     = 0;
  $tf_sub_total       = 0;
  $tf_remarks         = '';

  $learners_payment = [];

  $due_dates        = $this->table_where('due_date', array('sy_id' => $sy_id, 'dd_is_scholar' => $is_scholar, 'dd_mode' => $mode_payment ));

  $months_ctr   = 0;
  $total_amount_due = [];

  foreach($due_dates->result() as $dd){
    $dd_date_due    = $dd->dd_date_due;
    $dd_date_name   = $dd->dd_date_name;

    /*Date COMPUTATION*/
        $d1 = date_create($sy_last_payment);
        $d2 = date_create($dd_date_due);

        $days_diff = date_diff($d1, $d2);

        $months   = $days_diff->format('%m');
        $days     = $days_diff->format('%d');

          
          if( ($months == 0) && ($days > 0 ) && ($mode_payment <> 'M') ){
            $months_ctr = 1;
          }else{
            $months_ctr = $months; 
          }

    

      $td_payment_type    = '';
      $td_bank_name       = '';
      $td_account_number  = '';
      
      $td_fine            = 0;
      $td_fine_amount     = 0;
      $td_payment_made    = 0;
      $td_payment_date    = '';
      $month              = '';
      $td_amount_due      = $installment;
      
      $due_fines          = 0;
      $due_total_amount   = 0;
      $pencentage         = 0;

      $is_unpaid          = '';


  
      foreach($payment_record->result() as $p){
        $tf_payment_type    = $p->tf_payment_type;
        $tf_bank_name       = $p->tf_bank_name;
        $tf_account_number  = $p->tf_account_number;

        $tf_amount_due      = $p->tf_amount_due;
        $tf_fine            = $p->tf_fine_percentage;
        $tf_fine_amount     = $p->tf_fine_amount;
        $payment_made       = $p->tf_sub_total;
        $month              = $p->tf_months;
        $tf_payment_date    = $p->tf_payment_date;

        if( ($payment_made > 0) && ($month == $dd_date_name) ){
            $td_payment_type    = $tf_payment_type;
            $td_bank_name       = $tf_bank_name;
            $td_account_number  = $tf_account_number;
            $td_amount_due      = $tf_amount_due;
            $td_fine            = $tf_fine;
            $td_fine_amount     = $tf_fine_amount;
            $td_payment_made    = $payment_made;
            $td_payment_date    = date('Y-m-d', strtotime($tf_payment_date));
        }
        
      }

      /*$multiplier = $percent /100;
      $fines      = $multiplier * $amount_due;
      $due_amount = $fines + $amount_due;*/


        if($td_payment_made <= 0 ){

          if($is_scholar == 'N'){
            $pencentage       = ($months_ctr * 3);
            $td_fine_amount   = ($pencentage /100) * $td_amount_due;
            $due_total_amount = $td_fine_amount + $td_amount_due;
            array_push($total_amount_due, $due_total_amount);
          }else{
            array_push($total_amount_due, $td_amount_due);
          }

          $is_unpaid = 'unpaid';

        }else{
          $pencentage = $td_fine;
          
        }


        

      array_push($learners_payment,array(
        /*'payment_mode'       => $mode_payment,*/
        'dd_date_name'       => $dd_date_name,
        'dd_date_due'        => $dd_date_due,
        /*'tf_months'          => $month,*/
        'tf_amount_due'      => $td_amount_due,
        'tf_amount_paid'     => $td_payment_made,
        'tf_fine_percentage' => $pencentage, /*($td_payment_made <= 0 ? ($installment * ($months_ctr * 3) ) : $td_fine)*/
        'tf_fine_amount'     => $td_fine_amount,
        'tf_total_amount_due'=> $due_total_amount,
        'tf_payment_type'    => $td_payment_type,
        'tf_bank_name'       => $td_bank_name,
        'tf_account_number'  => $td_account_number,
        'tf_payment_date'    => $td_payment_date,
        'diff_months'        => $months,
        'diff_days'          => $days,
        'multiplier'         => $months_ctr,
        'total_amount_due'   => $total_amount_due,
        'total_due'          => array_sum($total_amount_due),
        'is_unpaid'          => $is_unpaid 
        /*'date_fiff'          => $this->dateDifference($dd_date_due, $sy_last_payment)*/
      ));
  }

  return array_sum($total_amount_due);

}


public function dateDifference($startDate, $endDate)
    {

        $months = 0;

        $startDate = strtotime($startDate);
        $endDate = strtotime($endDate);
        if ($startDate === false || $startDate < 0 || $endDate === false || $endDate < 0 || $startDate > $endDate)
            return false;
           
        $years = date('Y', $endDate) - date('Y', $startDate);
       
        $endMonth = date('m', $endDate);
        $startMonth = date('m', $startDate);
       
        // Calculate months
        $months = $endMonth - $startMonth;
        if ($months <= 0)  {
            $months += 12;
            $years--;
        }
        if ($years < 0)
            return false;
       
        // Calculate the days
                    $offsets = array();
                    if ($years > 0)
                        $offsets[] = $years . (($years == 1) ? ' year' : ' years');
                    if ($months > 0)
                        $offsets[] = $months . (($months == 1) ? ' month' : ' months');
                    $offsets = count($offsets) > 0 ? '+' . implode(' ', $offsets) : 'now';

                    $days = $endDate - strtotime($offsets, $startDate);
                    $days = date('z', $days);   
                   
        return array ('years' => $years, 'months' => $months, 'days' => $days);
    }


public function check_reservation($stud_id, $sy_id){
    $ps_max = 10;
    $gs_max = 15;

    $check_reservation = $this->table_where('v_student_class_list', array('sy_id' => $sy_id, 'stud_id' => $stud_id ));

    if($check_reservation->num_rows() > 0){

      $r = $check_reservation->row();

      $reservation_data = array(
        'stud_name'      => $r->stud_lastname.', '.$r->stud_firstname.' '.$r->stud_suffix,
        'lvl_id'         => $r->lvl_id,
        'lvl_name'       => $r->lvl_name,
        'sy_name'        => $r->sy_name,
        'sec_id'         => $r->sec_id,
        'sec_name'       => $r->sec_name,
        'date_reserved'  => $r->cl_date_reserved,
        'status'         => 'Reserved'
      );

      return $reservation_data;
    }else{
      $check_reservation = $this->table_where('v_portal_reservation', array('sy_id' => $sy_id, 'stud_id' => $stud_id ));

    }
}

public function get_student_class($stud_id, $sy_id){
  $check_enrollment = $this->table_where('v_student_enrollment', array('sy_id' => $sy_id, 'stud_id' => $stud_id ));

    if($check_enrollment->num_rows() < 1){
      //if no reservation yet then proceed
      return 'No data available';

    }else{

      $r = $check_enrollment->row();

      $enrollment_data = array(
        'stud_name'      => $r->stud_lastname.', '.$r->stud_firstname.' '.$r->stud_suffix,
        'stud_img'       => $r->stud_img,
        'sy_id'          => $r->sy_id,
        'sy_name'        => $r->sy_name,
        'lvl_id'         => $r->lvl_id,
        'lvl_name'       => $r->lvl_name,
        'sec_id'         => $r->sec_id,
        'sec_name'       => $r->sec_name
      );

      return $enrollment_data;
    }
}

public function check_portal_reservation($stud_id, $sy_id){

    $ps_max = 10;
    $gs_max = 15;

    $check_reservation = $this->table_where('v_portal_reservation', array('sy_id' => $sy_id, 'stud_id' => $stud_id ));

    if($check_reservation->num_rows() > 0){

      $r = $check_reservation->row();

      $reservation_data = array(
        'stud_name'      => $r->stud_lastname.', '.$r->stud_firstname.' '.$r->stud_suffix,
        'lvl_id'         => $r->lvl_id,
        'lvl_name'       => $r->lvl_name,
        'sy_name'        => $r->sy_name,
        'sec_id'         => $r->sec_id,
        'sec_name'       => $r->sec_name,
        'date_reserved'  => $r->cl_date_reserved,
        'status'         => 'Reserved'
      );

      return $reservation_data;
    }

}

public function check_available_slot($sec_id, $sy_id, $dept_name){

  $ps_max = 10;
  $gs_max = 15;


  $check  = $this->get_query("SELECT  COUNT(*) as cnt  FROM portal_reservation WHERE sy_id = ".$sy_id." AND sec_id = ".$sec_id." "); /*v_portal_reservation*/
  $count  = (int)$check->row('cnt');
  

  if($dept_name <> 'Pre-school'){
    /*Grade school & Inter*/

    if($count >= $gs_max){
      return false;
    }else{
      return true;
    }

  }else{
    if($count >= $ps_max){
      return false;
    }else{
      return true;
    }
  }
  /*if($count){

  }*/

}




/*public function itexmo($number, $message, $apicode){
  $url    = 'https://www.itexmo.com/php_api/api.php';
  $itexmo = array('1' => $number, '2' => $message, '3' => $apicode);
  $param  = array(
        'http'  => array(
          'header'  => 'Content-type: application/x-www-form-urlencoded\r\n',
          'method'  => 'POST',
          'content' => http_build_query($itexmo),
        )
  );

  $context = stream_context_create($param);
  return file_get_contents($url, false, $context);
}*/


/*public function get_due_accounts($prtl_id){

  $get_enroll_student      = $this->get_query("SELECT tfb.stud_id, SUM(tfb.stb_balance) AS stb_balance, s.stud_lastname, s.stud_firstname, s.stud_middlename, s.stud_suffix FROM student_tf_balance AS tfb, students AS s WHERE tfb.stud_id IN (SELECT stud_id FROM v_portal_enrollment WHERE prtl_id= ".$prtl_id." GROUP BY stud_id) AND tfb.stud_id = s.stud_id GROUP BY stud_id " );

  $data_balance = [];

    if($get_enroll_student->num_rows() > 0)
    {
      foreach($get_enroll_student->result() as $r)
        {
          $stud_id      = $r->stud_id;
          $stud_name    = $r->stud_lastname.', '.$r->stud_firstname.' '.$r->stud_suffix;
          $stb_balance  = $r->stb_balance;

          $balance = array(
            'stud_id'         => $stud_id,
            'stud_name'       => $stud_name,
            'stb_balance'     => $stb_balance 
          );

        }

        
    }

    return $data_balance;
  
}*/


}/* End of file welcome.php */
/* Location: ./application/library/commet.php */


